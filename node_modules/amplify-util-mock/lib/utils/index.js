"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkJavaVersion = exports.getAmplifyMeta = void 0;
var cleanup_task_1 = require("./cleanup-task");
Object.defineProperty(exports, "addCleanupTask", { enumerable: true, get: function () { return cleanup_task_1.addCleanupTask; } });
var mock_data_directory_1 = require("./mock-data-directory");
Object.defineProperty(exports, "getMockDataDirectory", { enumerable: true, get: function () { return mock_data_directory_1.getMockDataDirectory; } });
var git_ignore_1 = require("./git-ignore");
Object.defineProperty(exports, "addMockDataToGitIgnore", { enumerable: true, get: function () { return git_ignore_1.addMockDataToGitIgnore; } });
function getAmplifyMeta(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const amplifyMetaFilePath = context.amplify.pathManager.getAmplifyMetaFilePath();
        return context.amplify.readJsonFile(amplifyMetaFilePath);
    });
}
exports.getAmplifyMeta = getAmplifyMeta;
var hydrate_env_vars_1 = require("./lambda/hydrate-env-vars");
Object.defineProperty(exports, "hydrateAllEnvVars", { enumerable: true, get: function () { return hydrate_env_vars_1.hydrateAllEnvVars; } });
const which = require("which");
const execa = require("execa");
const semver = require("semver");
const minJavaVersion = '>=1.8 <= 2.0 ||  >=8.0';
exports.checkJavaVersion = (context) => __awaiter(void 0, void 0, void 0, function* () {
    const executablePath = which.sync('java', {
        nothrow: true,
    });
    if (executablePath === null) {
        context.print.error(`Unable to find Java version ${minJavaVersion} on the path. Download link: https://amzn.to/2UUljp9`);
    }
    const result = execa.sync('java', ['-version']);
    if (result.exitCode !== 0) {
        context.print.error(`java failed, exit code was ${result.exitCode}`);
    }
    const regex = /(\d+\.)(\d+\.)(\d)/g;
    // Java prints version to stderr
    const versionString = result.stderr ? result.stderr.split(/\r?\n/)[0] : '';
    const version = versionString.match(regex);
    if (version == null && !semver.satisfies(version[0], minJavaVersion)) {
        context.print.warning(`Update java to 8+`);
    }
});
//# sourceMappingURL=index.js.map