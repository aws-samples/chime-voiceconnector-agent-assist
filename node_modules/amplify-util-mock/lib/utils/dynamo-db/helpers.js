"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitTillTableStateIsActive = void 0;
const MILLI_SECONDS = 1000;
function waitTillTableStateIsActive(dynamoDBClient, tableName, maximumWait = 15 * MILLI_SECONDS) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            let intervalHandle;
            let timeoutHandle;
            const checkStatus = () => __awaiter(this, void 0, void 0, function* () {
                const tableDescription = yield dynamoDBClient.describeTable({ TableName: tableName }).promise();
                if (tableDescription.Table.TableStatus === 'ACTIVE') {
                    clearTimeout(timeoutHandle);
                    clearInterval(intervalHandle);
                    resolve();
                }
            });
            intervalHandle = setInterval(checkStatus, 1000);
            timeoutHandle = setTimeout(() => {
                clearTimeout(timeoutHandle);
                clearInterval(intervalHandle);
                reject(new Error('Waiting for table status to turn ACTIVE timed out'));
            }, maximumWait);
            checkStatus();
        });
    });
}
exports.waitTillTableStateIsActive = waitTillTableStateIsActive;
//# sourceMappingURL=helpers.js.map