"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUpdateTableInput = exports.describeTables = exports.updateTables = exports.createTables = void 0;
const helpers_1 = require("./helpers");
function createTables(dynamoDbClient, tables) {
    return __awaiter(this, void 0, void 0, function* () {
        for (let table of tables) {
            console.log(`Creating new table ${table.TableName}`);
            yield dynamoDbClient.createTable(table).promise();
        }
    });
}
exports.createTables = createTables;
function updateTables(dynamoDbClient, tables) {
    return __awaiter(this, void 0, void 0, function* () {
        for (let table of tables) {
            const updateType = table.GlobalSecondaryIndexUpdates[0].Delete ? 'Deleting' : 'Creating';
            const indexName = updateType == 'Deleting'
                ? table.GlobalSecondaryIndexUpdates[0].Delete.IndexName
                : table.GlobalSecondaryIndexUpdates[0].Create.IndexName;
            yield helpers_1.waitTillTableStateIsActive(dynamoDbClient, table.TableName);
            console.log(`${updateType} index ${indexName} on ${table.TableName}`);
            yield dynamoDbClient.updateTable(table).promise();
        }
    });
}
exports.updateTables = updateTables;
function describeTables(dynamoDbClient, tableNames) {
    return __awaiter(this, void 0, void 0, function* () {
        const tableDetails = {};
        for (let tableName of tableNames) {
            const tableDescription = yield dynamoDbClient.describeTable({ TableName: tableName }).promise();
            if (tableDescription.Table) {
                tableDetails[tableName] = tableDescription.Table;
            }
        }
        return tableDetails;
    });
}
exports.describeTables = describeTables;
function getUpdateTableInput(createInput, existingTableConfig) {
    if (createInput.TableName !== existingTableConfig.TableName) {
        throw new Error('Invalid input, table name mismatch');
    }
    const inputGSINames = (createInput.GlobalSecondaryIndexes || []).map(index => index.IndexName);
    const existingGSINames = (existingTableConfig.GlobalSecondaryIndexes || []).map(index => index.IndexName);
    const indexNamesToAdd = inputGSINames.filter(indexName => !existingGSINames.includes(indexName));
    const indexNamesToRemove = existingGSINames.filter(indexName => !inputGSINames.includes(indexName));
    const indicesToAdd = indexNamesToAdd.map(indexName => {
        const idx = createInput.GlobalSecondaryIndexes.find(index => index.IndexName === indexName);
        return {
            Create: idx,
        };
    });
    const indicesToRemove = indexNamesToRemove.map(indexName => {
        return {
            Delete: {
                IndexName: indexName,
            },
        };
    });
    return [
        ...(indicesToRemove.length
            ? indicesToRemove.map(index => {
                return {
                    TableName: existingTableConfig.TableName,
                    GlobalSecondaryIndexUpdates: [index],
                };
            })
            : []),
        ...(indicesToAdd.length
            ? indicesToAdd.map(index => {
                return {
                    TableName: existingTableConfig.TableName,
                    AttributeDefinitions: createInput.AttributeDefinitions,
                    GlobalSecondaryIndexUpdates: [index],
                };
            })
            : []),
    ];
}
exports.getUpdateTableInput = getUpdateTableInput;
//# sourceMappingURL=utils.js.map