"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadMinimalLambdaConfig = void 0;
const lambda_resource_processor_1 = require("../../CFNParser/lambda-resource-processor");
const path = require("path");
// Performs a minimal parsing of a lambda CFN.
function loadMinimalLambdaConfig(context, resourceName, params = {}) {
    const resourcePath = path.join(context.amplify.pathManager.getBackendDirPath(), 'function', resourceName);
    const cfn = context.amplify.readJsonFile(path.join(resourcePath, `${resourceName}-cloudformation-template.json`));
    const projectMeta = context.amplify.getProjectMeta();
    let extendedParams = {};
    if (projectMeta.function[resourceName].dependsOn) {
        extendedParams = projectMeta.function[resourceName].dependsOn.reduce((ini, depend) => {
            depend.attributes.forEach(attribute => {
                const val = projectMeta[depend.category][depend.resourceName].output[attribute];
                ini[depend.category + depend.resourceName + attribute] = val;
            });
            return ini;
        }, {});
    }
    return lambda_resource_processor_1.processResources(cfn.Resources, {}, Object.assign(Object.assign({}, params), extendedParams));
}
exports.loadMinimalLambdaConfig = loadMinimalLambdaConfig;
//# sourceMappingURL=loadMinimal.js.map