"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hydrateAllEnvVars = void 0;
function hydrateAllEnvVars(resources, sourceEnvVars, apiDetails) {
    const outputMap = resources.reduce((acc, r) => {
        const category = r.category;
        const resourceName = r.resourceName.toLowerCase();
        const outputs = Object.entries(r.output || {}).reduce((sum, [name, value]) => {
            return Object.assign(Object.assign({}, sum), { [name.toLowerCase()]: value });
        }, {});
        return Object.assign(Object.assign({}, acc), { [category]: Object.assign(Object.assign({}, acc.category), { [resourceName]: outputs }) });
    }, {});
    if (apiDetails) {
        outputMap.api = Object.assign(Object.assign({}, outputMap.api), { [apiDetails.apiName]: Object.assign({ graphqlapiendpointoutput: apiDetails.url, graphqlapikeyoutput: apiDetails.apiKey, graphqlapiidoutput: apiDetails.apiId }, apiDetails.dataSources
                .filter(ds => ds.type === 'AMAZON_DYNAMODB')
                .reduce((acc, ds) => {
                return Object.assign(Object.assign({}, acc), { [`${ds.name}_NAME`.toLowerCase()]: ds.name, [`${ds.name}_ARN`.toLowerCase()]: ds.Arn });
            }, {})) });
    }
    return Object.entries(sourceEnvVars).reduce((acc, [name, value]) => {
        const [category, resourceName, ...outputName] = name.split('_').map(f => f.toLowerCase());
        let computedValue = value;
        if (category && resourceName && outputName) {
            if (outputMap[category] && outputMap[category][resourceName] && outputMap[category][resourceName][outputName.join('_')]) {
                computedValue = outputMap[category][resourceName][outputName.join('_')];
            }
        }
        return Object.assign(Object.assign({}, acc), { [name]: computedValue });
    }, {});
}
exports.hydrateAllEnvVars = hydrateAllEnvVars;
//# sourceMappingURL=hydrate-env-vars.js.map