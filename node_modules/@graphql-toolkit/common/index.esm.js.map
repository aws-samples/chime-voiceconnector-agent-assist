{"version":3,"file":"index.esm.js","sources":["../../../dist/common/src/helpers.js","../../../dist/common/src/debug-log.js","../../../dist/common/src/extract-field-resolvers-from-object-type.js","../../../dist/common/src/extract-resolvers-from-schema.js","../../../dist/common/src/fix-windows-path.js","../../../dist/common/src/flatten-array.js","../../../dist/common/src/get-directives.js","../../../dist/common/src/get-fields-with-directives.js","../../../dist/common/src/get-implementing-types.js","../../../dist/common/src/get-schema-directive-from-directive-resolver.js","../../../dist/common/src/create-schema-definition.js","../../../dist/common/src/print-schema-with-directives.js","../../../dist/common/src/validate-documents.js","../../../dist/common/src/resolvers-composition.js","../../../dist/common/src/fix-schema-ast.js","../../../dist/common/src/parse-graphql-json.js","../../../dist/common/src/parse-graphql-sdl.js","../../../dist/common/src/get-user-types-from-schema.js","../../../dist/common/src/build-operation-for-field.js"],"sourcesContent":["import { parse } from 'graphql';\nexport const asArray = (fns) => (Array.isArray(fns) ? fns : fns ? [fns] : []);\nexport function chainFunctions(funcs) {\n    if (funcs.length === 1) {\n        return funcs[0];\n    }\n    return funcs.reduce((a, b) => (...args) => a(b(...args)));\n}\nexport function isEqual(a, b) {\n    if (Array.isArray(a) && Array.isArray(b)) {\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (var index = 0; index < a.length; index++) {\n            if (a[index] !== b[index]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return a === b || (!a && !b);\n}\nexport function isNotEqual(a, b) {\n    return !isEqual(a, b);\n}\nexport function isDocumentString(str) {\n    // XXX: is-valid-path or is-glob treat SDL as a valid path\n    // (`scalar Date` for example)\n    // this why checking the extension is fast enough\n    // and prevent from parsing the string in order to find out\n    // if the string is a SDL\n    if (/\\.[a-z0-9]+$/i.test(str)) {\n        return false;\n    }\n    try {\n        parse(str);\n        return true;\n    }\n    catch (e) { }\n    return false;\n}\nconst invalidPathRegex = /[‘“!$%&^<=>`]/;\nexport function isValidPath(str) {\n    return typeof str === 'string' && !invalidPathRegex.test(str);\n}\nexport async function resolveBuiltinModule(moduleName, option) {\n    if (typeof option === 'object') {\n        return option;\n    }\n    try {\n        if (typeof option === 'string') {\n            return await import(option);\n        }\n        return await import(moduleName);\n    }\n    catch (e) {\n        // tslint:disable-next-line: no-console\n        console.warn(`\n      ${option || moduleName} module couldn't be found for built-in ${moduleName}.\n      Please provide a working module in your loader options!\n    `);\n        return null;\n    }\n}\nexport function resolveBuiltinModuleSync(moduleName, option) {\n    if (typeof option === 'object') {\n        return option;\n    }\n    try {\n        if (typeof option === 'string') {\n            return require(option);\n        }\n        return require(moduleName);\n    }\n    catch (e) {\n        // tslint:disable-next-line: no-console\n        console.warn(`\n      ${option || moduleName} module couldn't be found for built-in ${moduleName}.\n      Please provide a working module in your loader options!\n    `);\n        return null;\n    }\n}\nexport function compareStrings(a, b) {\n    if (a.toString() < b.toString()) {\n        return -1;\n    }\n    if (a.toString() > b.toString()) {\n        return 1;\n    }\n    return 0;\n}\nexport function nodeToString(a) {\n    if ('alias' in a) {\n        return a.alias.value;\n    }\n    if ('name' in a) {\n        return a.name.value;\n    }\n    return a.kind;\n}\nexport function compareNodes(a, b, customFn) {\n    const aStr = nodeToString(a);\n    const bStr = nodeToString(b);\n    if (typeof customFn === 'function') {\n        return customFn(aStr, bStr);\n    }\n    return compareStrings(aStr, bStr);\n}\n//# sourceMappingURL=helpers.js.map","export function debugLog(...args) {\n    if (process && process.env && process.env.DEBUG && !process.env.GQL_TOOLKIT_NODEBUG) {\n        // tslint:disable-next-line: no-console\n        console.log(...args);\n    }\n}\n//# sourceMappingURL=debug-log.js.map","import { buildASTSchema } from 'graphql';\nexport function extractFieldResolversFromObjectType(objectType, options) {\n    const fieldResolvers = {};\n    const fieldMap = objectType.getFields();\n    let selectedFieldNames;\n    if (options && options.selectedTypeDefs) {\n        const invalidSchema = buildASTSchema(options.selectedTypeDefs);\n        const typeMap = invalidSchema.getTypeMap();\n        if (!(objectType.name in typeMap)) {\n            return {};\n        }\n        const selectedObjectType = typeMap[objectType.name];\n        selectedFieldNames = Object.keys(selectedObjectType.getFields());\n    }\n    for (const fieldName in fieldMap) {\n        if (selectedFieldNames && !selectedFieldNames.includes(fieldName)) {\n            continue;\n        }\n        const fieldDefinition = fieldMap[fieldName];\n        fieldResolvers[fieldName] = {\n            subscribe: fieldDefinition.subscribe,\n            resolve: fieldDefinition.resolve,\n        };\n    }\n    if ('resolveType' in objectType) {\n        fieldResolvers['__resolveType'] = objectType.resolveType;\n    }\n    if ('isTypeOf' in objectType) {\n        fieldResolvers['__isTypeOf'] = objectType.isTypeOf;\n    }\n    return fieldResolvers;\n}\n//# sourceMappingURL=extract-field-resolvers-from-object-type.js.map","import { buildASTSchema, isScalarType, isInterfaceType, isObjectType, isEnumType, isUnionType, } from 'graphql';\nimport { extractFieldResolversFromObjectType } from './extract-field-resolvers-from-object-type';\nexport function extractResolversFromSchema(schema, options) {\n    let selectedTypeNames;\n    const resolvers = {};\n    const typeMap = schema.getTypeMap();\n    if (options && options.selectedTypeDefs) {\n        const invalidSchema = buildASTSchema(options.selectedTypeDefs);\n        selectedTypeNames = Object.keys(invalidSchema.getTypeMap());\n    }\n    for (const typeName in typeMap) {\n        if (!typeName.startsWith('__')) {\n            const typeDef = typeMap[typeName];\n            if (selectedTypeNames && !selectedTypeNames.includes(typeName)) {\n                continue;\n            }\n            if (isScalarType(typeDef)) {\n                resolvers[typeName] = typeDef;\n            }\n            else if (isObjectType(typeDef) || isInterfaceType(typeDef)) {\n                resolvers[typeName] = extractFieldResolversFromObjectType(typeDef, {\n                    selectedTypeDefs: options && options.selectedTypeDefs,\n                });\n            }\n            else if (isEnumType(typeDef)) {\n                const enumValues = typeDef.getValues();\n                resolvers[typeName] = {};\n                for (const { name, value } of enumValues) {\n                    resolvers[typeName][name] = value;\n                }\n            }\n            else if (isUnionType(typeDef)) {\n                resolvers[typeName] = {\n                    __resolveType: typeDef.resolveType,\n                };\n            }\n        }\n    }\n    return resolvers;\n}\n//# sourceMappingURL=extract-resolvers-from-schema.js.map","export const fixWindowsPath = (path) => path.replace(/\\\\/g, '/');\n//# sourceMappingURL=fix-windows-path.js.map","export const flattenArray = (arr) => arr.reduce((acc, next) => acc.concat(Array.isArray(next) ? flattenArray(next) : next), []);\n//# sourceMappingURL=flatten-array.js.map","import { getDirectiveValues } from 'graphql';\nexport function getDirectives(schema, node) {\n    const schemaDirectives = schema && schema.getDirectives ? schema.getDirectives() : [];\n    const astNode = node && node['astNode'];\n    let result = {};\n    if (astNode) {\n        schemaDirectives.forEach((directive) => {\n            const directiveValue = getDirectiveValues(directive, astNode);\n            if (directiveValue !== undefined) {\n                result[directive.name] = directiveValue || {};\n            }\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=get-directives.js.map","import { Kind } from 'graphql';\nfunction isObjectTypeDefinitionOrExtension(obj) {\n    return obj && (obj.kind === 'ObjectTypeDefinition' || obj.kind === 'ObjectTypeExtension');\n}\nfunction parseDirectiveValue(value) {\n    switch (value.kind) {\n        case Kind.INT:\n            return parseInt(value.value);\n        case Kind.FLOAT:\n            return parseFloat(value.value);\n        case Kind.BOOLEAN:\n            return Boolean(value.value);\n        case Kind.STRING:\n        case Kind.ENUM:\n            return value.value;\n        case Kind.LIST:\n            return value.values.map(v => parseDirectiveValue(v));\n        case Kind.OBJECT:\n            return value.fields.reduce((prev, v) => ({ ...prev, [v.name.value]: parseDirectiveValue(v.value) }), {});\n        case Kind.NULL:\n            return null;\n        default:\n            return null;\n    }\n}\nexport function getFieldsWithDirectives(documentNode) {\n    const result = {};\n    const allTypes = documentNode.definitions.filter(isObjectTypeDefinitionOrExtension);\n    for (const type of allTypes) {\n        const typeName = type.name.value;\n        for (const field of type.fields) {\n            if (field.directives && field.directives.length > 0) {\n                const fieldName = field.name.value;\n                const key = `${typeName}.${fieldName}`;\n                const directives = field.directives.map(d => ({\n                    name: d.name.value,\n                    args: (d.arguments || []).reduce((prev, arg) => ({ ...prev, [arg.name.value]: parseDirectiveValue(arg.value) }), {}),\n                }));\n                result[key] = directives;\n            }\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=get-fields-with-directives.js.map","import { isObjectType } from 'graphql';\nexport function getImplementingTypes(interfaceName, schema) {\n    const allTypesMap = schema.getTypeMap();\n    const result = [];\n    for (const graphqlTypeName in allTypesMap) {\n        const graphqlType = allTypesMap[graphqlTypeName];\n        if (isObjectType(graphqlType)) {\n            const allInterfaces = graphqlType.getInterfaces();\n            if (allInterfaces.find((int) => int.name === interfaceName)) {\n                result.push(graphqlType.name);\n            }\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=get-implementing-types.js.map","import { SchemaDirectiveVisitor } from 'graphql-tools';\nimport { defaultFieldResolver } from 'graphql';\nexport function getSchemaDirectiveFromDirectiveResolver(directiveResolver) {\n    return class extends SchemaDirectiveVisitor {\n        visitFieldDefinition(field) {\n            const resolver = directiveResolver;\n            const originalResolver = field.resolve || defaultFieldResolver;\n            const directiveArgs = this.args;\n            field.resolve = (...args) => {\n                const [source /* original args */, , context, info] = args;\n                return resolver(async () => originalResolver.apply(field, args), source, directiveArgs, context, info);\n            };\n        }\n    };\n}\n//# sourceMappingURL=get-schema-directive-from-directive-resolver.js.map","export function createSchemaDefinition(def, config) {\n    const schemaRoot = {};\n    if (def.query) {\n        schemaRoot.query = def.query.toString();\n    }\n    if (def.mutation) {\n        schemaRoot.mutation = def.mutation.toString();\n    }\n    if (def.subscription) {\n        schemaRoot.subscription = def.subscription.toString();\n    }\n    const fields = Object.keys(schemaRoot)\n        .map(rootType => (schemaRoot[rootType] ? `${rootType}: ${schemaRoot[rootType]}` : null))\n        .filter(a => a);\n    if (fields.length) {\n        return `schema { ${fields.join('\\n')} }`;\n    }\n    if (config && config.force) {\n        return ` schema { query: Query } `;\n    }\n    return undefined;\n}\n//# sourceMappingURL=create-schema-definition.js.map","import { print, printType, Kind, isSpecifiedScalarType, isIntrospectionType, isScalarType, parse, } from 'graphql';\nimport { createSchemaDefinition } from './create-schema-definition';\nexport function printSchemaWithDirectives(schema, _options = {}) {\n    var _a;\n    const typesMap = schema.getTypeMap();\n    const result = [\n        createSchemaDefinition({\n            query: schema.getQueryType(),\n            mutation: schema.getMutationType(),\n            subscription: schema.getSubscriptionType(),\n        }),\n    ];\n    for (const typeName in typesMap) {\n        const type = typesMap[typeName];\n        const isPredefinedScalar = isScalarType(type) && isSpecifiedScalarType(type);\n        const isIntrospection = isIntrospectionType(type);\n        if (isPredefinedScalar || isIntrospection) {\n            continue;\n        }\n        // KAMIL: we might want to turn on descriptions in future\n        result.push(print((_a = correctType(typeName, typesMap)) === null || _a === void 0 ? void 0 : _a.astNode));\n    }\n    const directives = schema.getDirectives();\n    for (const directive of directives) {\n        if (directive.astNode) {\n            result.push(print(directive.astNode));\n        }\n    }\n    return result.join('\\n');\n}\nfunction extendDefinition(type) {\n    switch (type.astNode.kind) {\n        case Kind.OBJECT_TYPE_DEFINITION:\n            return {\n                ...type.astNode,\n                fields: type.astNode.fields.concat(type.extensionASTNodes.reduce((fields, node) => fields.concat(node.fields), [])),\n            };\n        case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n            return {\n                ...type.astNode,\n                fields: type.astNode.fields.concat(type.extensionASTNodes.reduce((fields, node) => fields.concat(node.fields), [])),\n            };\n        default:\n            return type.astNode;\n    }\n}\nfunction correctType(typeName, typesMap) {\n    const type = typesMap[typeName];\n    type.name = typeName.toString();\n    if (type.astNode && type.extensionASTNodes) {\n        type.astNode = type.extensionASTNodes ? extendDefinition(type) : type.astNode;\n    }\n    const doc = parse(printType(type));\n    const fixedAstNode = doc.definitions[0];\n    const originalAstNode = type === null || type === void 0 ? void 0 : type.astNode;\n    if (originalAstNode) {\n        fixedAstNode.directives = originalAstNode === null || originalAstNode === void 0 ? void 0 : originalAstNode.directives;\n        if ('fields' in fixedAstNode && 'fields' in originalAstNode) {\n            for (const fieldDefinitionNode of fixedAstNode.fields) {\n                const originalFieldDefinitionNode = originalAstNode.fields.find((field) => field.name.value === fieldDefinitionNode.name.value);\n                fieldDefinitionNode.directives =\n                    originalFieldDefinitionNode === null || originalFieldDefinitionNode === void 0 ? void 0 : originalFieldDefinitionNode.directives;\n            }\n        }\n    }\n    type.astNode = fixedAstNode;\n    return type;\n}\n//# sourceMappingURL=print-schema-with-directives.js.map","import AggregateError from 'aggregate-error';\nimport { Kind, validate, specifiedRules, } from 'graphql';\nconst DEFAULT_EFFECTIVE_RULES = createDefaultRules();\nexport async function validateGraphQlDocuments(schema, documentFiles, effectiveRules = DEFAULT_EFFECTIVE_RULES) {\n    const allFragments = [];\n    documentFiles.forEach((documentFile) => {\n        if (documentFile.document) {\n            for (const definitionNode of documentFile.document.definitions) {\n                if (definitionNode.kind === Kind.FRAGMENT_DEFINITION) {\n                    allFragments.push(definitionNode);\n                }\n            }\n        }\n    });\n    const allErrors = [];\n    await Promise.all(documentFiles.map(async (documentFile) => {\n        const documentToValidate = {\n            kind: Kind.DOCUMENT,\n            definitions: [...allFragments, ...documentFile.document.definitions].filter((definition, index, list) => {\n                if (definition.kind === Kind.FRAGMENT_DEFINITION) {\n                    const firstIndex = list.findIndex((def) => def.kind === Kind.FRAGMENT_DEFINITION && def.name.value === definition.name.value);\n                    const isDuplicated = firstIndex !== index;\n                    if (isDuplicated) {\n                        return false;\n                    }\n                }\n                return true;\n            }),\n        };\n        const errors = validate(schema, documentToValidate, effectiveRules);\n        if (errors.length > 0) {\n            allErrors.push({\n                filePath: documentFile.location,\n                errors,\n            });\n        }\n    }));\n    return allErrors;\n}\nexport function checkValidationErrors(loadDocumentErrors) {\n    if (loadDocumentErrors.length > 0) {\n        const errors = [];\n        for (const loadDocumentError of loadDocumentErrors) {\n            for (const graphQLError of loadDocumentError.errors) {\n                const error = new Error();\n                error.name = 'GraphQLDocumentError';\n                error.message = `${error.name}: ${graphQLError.message}`;\n                error.stack = error.message;\n                graphQLError.locations.forEach((location) => (error.stack += `\\n    at ${loadDocumentError.filePath}:${location.line}:${location.column}`));\n                errors.push(error);\n            }\n        }\n        throw new AggregateError(errors);\n    }\n}\nfunction createDefaultRules() {\n    const ignored = ['NoUnusedFragmentsRule', 'NoUnusedVariablesRule', 'KnownDirectivesRule'];\n    // GraphQL v14 has no Rule suffix in function names\n    // Adding `*Rule` makes validation backwards compatible\n    ignored.forEach((rule) => {\n        ignored.push(rule.replace(/Rule$/, ''));\n    });\n    return specifiedRules.filter((f) => !ignored.includes(f.name));\n}\n//# sourceMappingURL=validate-documents.js.map","import { chainFunctions, asArray } from './helpers';\nimport { flattenArray } from './flatten-array';\nimport { get, set } from 'lodash';\nimport { isScalarType } from 'graphql';\nfunction resolveRelevantMappings(resolvers, path, allMappings) {\n    const splitted = path.split('.');\n    if (splitted.length === 2) {\n        const typeName = splitted[0];\n        if (isScalarType(resolvers[typeName])) {\n            return [];\n        }\n        const fieldName = splitted[1];\n        if (typeName === '*') {\n            return flattenArray(Object.keys(resolvers).map((typeName) => resolveRelevantMappings(resolvers, `${typeName}.${fieldName}`, allMappings)));\n        }\n        if (fieldName === '*') {\n            return flattenArray(Object.keys(resolvers[typeName]).map((field) => resolveRelevantMappings(resolvers, `${typeName}.${field}`, allMappings))).filter((mapItem) => !allMappings[mapItem]);\n        }\n        else {\n            const paths = [];\n            if (resolvers[typeName] && resolvers[typeName][fieldName]) {\n                if (resolvers[typeName][fieldName]['subscribe']) {\n                    paths.push(path + '.subscribe');\n                }\n                if (resolvers[typeName][fieldName]['resolve']) {\n                    paths.push(path + '.resolve');\n                }\n                if (typeof resolvers[typeName][fieldName] === 'function') {\n                    paths.push(path);\n                }\n            }\n            return paths;\n        }\n    }\n    else if (splitted.length === 1) {\n        const typeName = splitted[0];\n        return flattenArray(Object.keys(resolvers[typeName]).map((fieldName) => resolveRelevantMappings(resolvers, `${typeName}.${fieldName}`, allMappings)));\n    }\n    return [];\n}\n/**\n * Wraps the resolvers object with the resolvers composition objects.\n * Implemented as a simple and basic middleware mechanism.\n *\n * @param resolvers - resolvers object\n * @param mapping - resolvers composition mapping\n * @hidden\n */\nexport function composeResolvers(resolvers, mapping = {}) {\n    const mappingResult = {};\n    Object.keys(mapping).map((resolverPath) => {\n        if (mapping[resolverPath] instanceof Array || typeof mapping[resolverPath] === 'function') {\n            const composeFns = mapping[resolverPath];\n            const relevantFields = resolveRelevantMappings(resolvers, resolverPath, mapping);\n            relevantFields.forEach((path) => {\n                mappingResult[path] = asArray(composeFns);\n            });\n        }\n        else {\n            Object.keys(mapping[resolverPath]).forEach((fieldName) => {\n                const composeFns = mapping[resolverPath][fieldName];\n                const relevantFields = resolveRelevantMappings(resolvers, resolverPath + '.' + fieldName, mapping);\n                relevantFields.forEach((path) => {\n                    mappingResult[path] = asArray(composeFns);\n                });\n            });\n        }\n    });\n    Object.keys(mappingResult).forEach((path) => {\n        const fns = chainFunctions([...asArray(mappingResult[path]), () => get(resolvers, path)]);\n        set(resolvers, path, fns());\n    });\n    return resolvers;\n}\n//# sourceMappingURL=resolvers-composition.js.map","import { buildSchema } from 'graphql';\nimport { printSchemaWithDirectives } from './print-schema-with-directives';\nfunction buildFixedSchema(schema, options) {\n    return buildSchema(printSchemaWithDirectives(schema, options), {\n        noLocation: true,\n        ...(options || {}),\n    });\n}\nexport function fixSchemaAst(schema, options) {\n    let schemaWithValidAst;\n    if (!schema.astNode) {\n        Object.defineProperty(schema, 'astNode', {\n            get() {\n                if (!schemaWithValidAst) {\n                    schemaWithValidAst = buildFixedSchema(schema, options);\n                }\n                return schemaWithValidAst.astNode;\n            },\n        });\n    }\n    if (!schema.extensionASTNodes) {\n        Object.defineProperty(schema, 'extensionASTNodes', {\n            get() {\n                if (!schemaWithValidAst) {\n                    schemaWithValidAst = buildFixedSchema(schema, options);\n                }\n                return schemaWithValidAst.extensionASTNodes;\n            },\n        });\n    }\n    return schema;\n}\n//# sourceMappingURL=fix-schema-ast.js.map","import { buildClientSchema, parse } from 'graphql';\nimport { printSchemaWithDirectives } from './print-schema-with-directives';\nfunction stripBOM(content) {\n    content = content.toString();\n    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n    // because the buffer-to-string conversion in `fs.readFileSync()`\n    // translates it to FEFF, the UTF-16 BOM.\n    if (content.charCodeAt(0) === 0xfeff) {\n        content = content.slice(1);\n    }\n    return content;\n}\nfunction parseBOM(content) {\n    return JSON.parse(stripBOM(content));\n}\nexport function parseGraphQLJSON(location, jsonContent, options) {\n    let parsedJson = parseBOM(jsonContent);\n    if (parsedJson['data']) {\n        parsedJson = parsedJson['data'];\n    }\n    if (parsedJson.kind === 'Document') {\n        const document = parsedJson;\n        return {\n            location,\n            document,\n        };\n    }\n    else if (parsedJson.__schema) {\n        const schema = buildClientSchema(parsedJson, options);\n        const rawSDL = printSchemaWithDirectives(schema, options);\n        return {\n            location,\n            document: parse(rawSDL, options),\n            rawSDL,\n            schema,\n        };\n    }\n    throw new Error(`Not valid JSON content`);\n}\n//# sourceMappingURL=parse-graphql-json.js.map","import { parse, Kind, Source as GraphQLSource } from 'graphql';\nexport function parseGraphQLSDL(location, rawSDL, options) {\n    let document;\n    try {\n        document = parse(new GraphQLSource(rawSDL, location), options);\n    }\n    catch (e) {\n        if (e.message.includes('EOF')) {\n            document = {\n                kind: Kind.DOCUMENT,\n                definitions: [],\n            };\n        }\n        else {\n            throw e;\n        }\n    }\n    return {\n        location,\n        document,\n        rawSDL,\n    };\n}\n//# sourceMappingURL=parse-graphql-sdl.js.map","import { isObjectType } from 'graphql';\n/**\n * Get all GraphQL types from schema without:\n *\n * - Query, Mutation, Subscription objects\n * - Internal scalars added by parser\n *\n * @param schema\n */\nexport function getUserTypesFromSchema(schema) {\n    const allTypesMap = schema.getTypeMap();\n    // tslint:disable-next-line: no-unnecessary-local-variable\n    const modelTypes = Object.values(allTypesMap).filter((graphqlType) => {\n        if (isObjectType(graphqlType)) {\n            // Filter out private types\n            if (graphqlType.name.startsWith('__')) {\n                return false;\n            }\n            if (schema.getMutationType() && graphqlType.name === schema.getMutationType().name) {\n                return false;\n            }\n            if (schema.getQueryType() && graphqlType.name === schema.getQueryType().name) {\n                return false;\n            }\n            if (schema.getSubscriptionType() && graphqlType.name === schema.getSubscriptionType().name) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    });\n    return modelTypes;\n}\n//# sourceMappingURL=get-user-types-from-schema.js.map","import { isObjectType, getNamedType, isUnionType, isNonNullType, isScalarType, isListType, isInterfaceType, Kind, } from 'graphql';\nimport { camelCase } from 'camel-case';\nlet operationVariables = [];\nlet fieldTypeMap = new Map();\nfunction addOperationVariable(variable) {\n    operationVariables.push(variable);\n}\nfunction resetOperationVariables() {\n    operationVariables = [];\n}\nfunction resetFieldMap() {\n    fieldTypeMap = new Map();\n}\nfunction buildOperationName(name) {\n    return camelCase(name);\n}\nexport function buildOperationNodeForField({ schema, kind, field, models, ignore, depthLimit, circularReferenceDepth, argNames, }) {\n    resetOperationVariables();\n    resetFieldMap();\n    const operationNode = buildOperationAndCollectVariables({\n        schema,\n        fieldName: field,\n        kind,\n        models: models || [],\n        ignore: ignore || [],\n        depthLimit: depthLimit || Infinity,\n        circularReferenceDepth: circularReferenceDepth || 1,\n        argNames,\n    });\n    // attach variables\n    operationNode.variableDefinitions = [...operationVariables];\n    resetOperationVariables();\n    resetFieldMap();\n    return operationNode;\n}\nfunction buildOperationAndCollectVariables({ schema, fieldName, kind, models, ignore, depthLimit, circularReferenceDepth, argNames, }) {\n    const typeMap = {\n        query: schema.getQueryType(),\n        mutation: schema.getMutationType(),\n        subscription: schema.getSubscriptionType(),\n    };\n    const type = typeMap[kind];\n    const field = type.getFields()[fieldName];\n    const operationName = buildOperationName(`${fieldName}_${kind}`);\n    if (field.args) {\n        field.args.forEach((arg) => {\n            const argName = arg.name;\n            if (!argNames || argNames.includes(argName)) {\n                addOperationVariable(resolveVariable(arg, argName));\n            }\n        });\n    }\n    return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: kind,\n        name: {\n            kind: 'Name',\n            value: operationName,\n        },\n        variableDefinitions: [],\n        selectionSet: {\n            kind: Kind.SELECTION_SET,\n            selections: [\n                resolveField({\n                    type,\n                    field,\n                    models,\n                    firstCall: true,\n                    path: [],\n                    ancestors: [],\n                    ignore,\n                    depthLimit,\n                    circularReferenceDepth,\n                    schema,\n                    depth: 0,\n                    argNames,\n                }),\n            ],\n        },\n    };\n}\nfunction resolveSelectionSet({ parent, type, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, }) {\n    if (depth > depthLimit) {\n        return;\n    }\n    if (isUnionType(type)) {\n        const types = type.getTypes();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter((t) => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map((t) => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                    }),\n                };\n            })\n                .filter((f) => {\n                var _a, _b;\n                if (f) {\n                    if ('selectionSet' in f) {\n                        return (_b = (_a = f.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length;\n                    }\n                    else {\n                        return true;\n                    }\n                }\n                return false;\n            }),\n        };\n    }\n    if (isInterfaceType(type)) {\n        const types = Object.values(schema.getTypeMap()).filter((t) => isObjectType(t) && t.getInterfaces().includes(type));\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: types\n                .filter((t) => !hasCircularRef([...ancestors, t], {\n                depth: circularReferenceDepth,\n            }))\n                .map((t) => {\n                return {\n                    kind: Kind.INLINE_FRAGMENT,\n                    typeCondition: {\n                        kind: Kind.NAMED_TYPE,\n                        name: {\n                            kind: Kind.NAME,\n                            value: t.name,\n                        },\n                    },\n                    selectionSet: resolveSelectionSet({\n                        parent: type,\n                        type: t,\n                        models,\n                        path,\n                        ancestors,\n                        ignore,\n                        depthLimit,\n                        circularReferenceDepth,\n                        schema,\n                        depth,\n                        argNames,\n                    }),\n                };\n            }),\n        };\n    }\n    if (isObjectType(type)) {\n        const isIgnored = ignore.includes(type.name) || ignore.includes(`${parent.name}.${path[path.length - 1]}`);\n        const isModel = models.includes(type.name);\n        if (!firstCall && isModel && !isIgnored) {\n            return {\n                kind: Kind.SELECTION_SET,\n                selections: [\n                    {\n                        kind: Kind.FIELD,\n                        name: {\n                            kind: Kind.NAME,\n                            value: 'id',\n                        },\n                    },\n                ],\n            };\n        }\n        const fields = type.getFields();\n        return {\n            kind: Kind.SELECTION_SET,\n            selections: Object.keys(fields)\n                .filter((fieldName) => {\n                return !hasCircularRef([...ancestors, getNamedType(fields[fieldName].type)], {\n                    depth: circularReferenceDepth,\n                });\n            })\n                .map((fieldName) => {\n                return resolveField({\n                    type: type,\n                    field: fields[fieldName],\n                    models,\n                    path: [...path, fieldName],\n                    ancestors,\n                    ignore,\n                    depthLimit,\n                    circularReferenceDepth,\n                    schema,\n                    depth,\n                    argNames,\n                });\n            })\n                .filter((f) => {\n                var _a, _b;\n                if (f) {\n                    if ('selectionSet' in f) {\n                        return (_b = (_a = f.selectionSet) === null || _a === void 0 ? void 0 : _a.selections) === null || _b === void 0 ? void 0 : _b.length;\n                    }\n                    else {\n                        return true;\n                    }\n                }\n                return false;\n            }),\n        };\n    }\n}\nfunction resolveVariable(arg, name) {\n    function resolveVariableType(type) {\n        if (isListType(type)) {\n            return {\n                kind: Kind.LIST_TYPE,\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        if (isNonNullType(type)) {\n            return {\n                kind: Kind.NON_NULL_TYPE,\n                type: resolveVariableType(type.ofType),\n            };\n        }\n        return {\n            kind: Kind.NAMED_TYPE,\n            name: {\n                kind: Kind.NAME,\n                value: type.name,\n            },\n        };\n    }\n    return {\n        kind: Kind.VARIABLE_DEFINITION,\n        variable: {\n            kind: Kind.VARIABLE,\n            name: {\n                kind: Kind.NAME,\n                value: name || arg.name,\n            },\n        },\n        type: resolveVariableType(arg.type),\n    };\n}\nfunction getArgumentName(name, path) {\n    return camelCase([...path, name].join('_'));\n}\nfunction resolveField({ type, field, models, firstCall, path, ancestors, ignore, depthLimit, circularReferenceDepth, schema, depth, argNames, }) {\n    const namedType = getNamedType(field.type);\n    let args = [];\n    let removeField = false;\n    if (field.args && field.args.length) {\n        args = field.args\n            .map((arg) => {\n            const argumentName = getArgumentName(arg.name, path);\n            if (argNames && !argNames.includes(argumentName)) {\n                if (isNonNullType(arg.type)) {\n                    removeField = true;\n                }\n                return null;\n            }\n            if (!firstCall) {\n                addOperationVariable(resolveVariable(arg, argumentName));\n            }\n            return {\n                kind: Kind.ARGUMENT,\n                name: {\n                    kind: Kind.NAME,\n                    value: arg.name,\n                },\n                value: {\n                    kind: Kind.VARIABLE,\n                    name: {\n                        kind: Kind.NAME,\n                        value: getArgumentName(arg.name, path),\n                    },\n                },\n            };\n        })\n            .filter(Boolean);\n    }\n    if (removeField) {\n        return null;\n    }\n    let fieldName = field.name;\n    if (fieldTypeMap.has(fieldName) && fieldTypeMap.get(fieldName) !== field.type.toString()) {\n        fieldName += field.type.toString().replace('!', 'NonNull');\n    }\n    fieldTypeMap.set(fieldName, field.type.toString());\n    if (!isScalarType(namedType)) {\n        return {\n            kind: Kind.FIELD,\n            name: {\n                kind: Kind.NAME,\n                value: field.name,\n            },\n            ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n            selectionSet: resolveSelectionSet({\n                parent: type,\n                type: namedType,\n                models,\n                firstCall,\n                path: [...path, field.name],\n                ancestors: [...ancestors, type],\n                ignore,\n                depthLimit,\n                circularReferenceDepth,\n                schema,\n                depth: depth + 1,\n                argNames,\n            }) || undefined,\n            arguments: args,\n        };\n    }\n    return {\n        kind: Kind.FIELD,\n        name: {\n            kind: Kind.NAME,\n            value: field.name,\n        },\n        ...(fieldName !== field.name && { alias: { kind: Kind.NAME, value: fieldName } }),\n        arguments: args,\n    };\n}\nfunction hasCircularRef(types, config = {\n    depth: 1,\n}) {\n    const type = types[types.length - 1];\n    if (isScalarType(type)) {\n        return false;\n    }\n    const size = types.filter((t) => t.name === type.name).length;\n    return size > config.depth;\n}\n//# sourceMappingURL=build-operation-for-field.js.map"],"names":["GraphQLSource"],"mappings":"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"}