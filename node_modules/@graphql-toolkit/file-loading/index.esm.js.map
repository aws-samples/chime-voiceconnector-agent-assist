{"version":3,"file":"index.esm.js","sources":["../../../dist/file-loading/src/index.js"],"sourcesContent":["const DEFAULT_IGNORED_EXTENSIONS = ['spec', 'test', 'd', 'map'];\nconst DEFAULT_EXTENSIONS = ['gql', 'graphql', 'graphqls', 'ts', 'js'];\nconst DEFAULT_EXPORT_NAMES = ['typeDefs', 'schema'];\nfunction asArray(obj) {\n    if (obj instanceof Array) {\n        return obj;\n    }\n    else {\n        return [obj];\n    }\n}\nfunction isDirectory(path) {\n    const { existsSync, statSync } = require('fs');\n    return existsSync(path) && statSync(path).isDirectory();\n}\nfunction scanForFiles(globStr, globOptions = {}) {\n    const globby = require('globby');\n    return globby.sync(globStr, { absolute: true, ...globOptions });\n}\nfunction buildGlob(basePath, extensions, ignoredExtensions = [], recursive) {\n    const ignored = ignoredExtensions.length > 0 ? `!(${ignoredExtensions.map((e) => '*.' + e).join('|')})` : '*';\n    const ext = extensions.map((e) => '*.' + e).join('|');\n    return `${basePath}${recursive ? '/**' : ''}/${ignored}+(${ext})`;\n}\nfunction extractExports(fileExport, exportNames) {\n    if (!fileExport) {\n        return null;\n    }\n    if (fileExport.default) {\n        for (const exportName of exportNames) {\n            if (fileExport.default[exportName]) {\n                return fileExport.default[exportName];\n            }\n        }\n        return fileExport.default;\n    }\n    for (const exportName of exportNames) {\n        if (fileExport[exportName]) {\n            return fileExport[exportName];\n        }\n    }\n    return fileExport;\n}\nconst LoadFilesDefaultOptions = {\n    ignoredExtensions: DEFAULT_IGNORED_EXTENSIONS,\n    extensions: DEFAULT_EXTENSIONS,\n    useRequire: false,\n    requireMethod: null,\n    globOptions: {\n        absolute: true,\n    },\n    exportNames: DEFAULT_EXPORT_NAMES,\n    recursive: true,\n    ignoreIndex: false,\n};\nexport function loadFiles(pattern, options = LoadFilesDefaultOptions) {\n    const execOptions = { ...LoadFilesDefaultOptions, ...options };\n    const unixify = require('unixify');\n    const relevantPaths = scanForFiles(asArray(pattern).map((path) => isDirectory(path)\n        ? buildGlob(unixify(path), execOptions.extensions, execOptions.ignoredExtensions, execOptions.recursive)\n        : unixify(path)), options.globOptions);\n    return relevantPaths\n        .map((path) => {\n        if (!checkExtension(path, options)) {\n            return;\n        }\n        if (isIndex(path, execOptions.extensions) && options.ignoreIndex) {\n            return false;\n        }\n        const { extname } = require('path');\n        const extension = extname(path);\n        if (extension.endsWith('.js') || extension.endsWith('.ts') || execOptions.useRequire) {\n            const fileExports = (execOptions.requireMethod ? execOptions.requireMethod : require)(path);\n            const extractedExport = extractExports(fileExports, execOptions.exportNames);\n            if (extractedExport.typeDefs && extractedExport.resolvers) {\n                return extractedExport;\n            }\n            if (extractedExport.schema) {\n                return extractedExport.schema;\n            }\n            if (extractedExport.typeDef) {\n                return extractedExport.typeDef;\n            }\n            if (extractedExport.typeDefs) {\n                return extractedExport.typeDefs;\n            }\n            if (extractedExport.resolver) {\n                return extractedExport.resolver;\n            }\n            if (extractedExport.resolvers) {\n                return extractedExport.resolvers;\n            }\n            return extractedExport;\n        }\n        else {\n            const { readFileSync } = require('fs');\n            return readFileSync(path, { encoding: 'utf-8' });\n        }\n    })\n        .filter((v) => v);\n}\nasync function scanForFilesAsync(globStr, globOptions = {}) {\n    const { default: globby } = await import('globby');\n    return globby(globStr, { absolute: true, ...globOptions });\n}\nconst checkExtension = (path, { extensions, ignoredExtensions }) => {\n    if (ignoredExtensions) {\n        for (const ignoredExtension of ignoredExtensions) {\n            if (path.endsWith(ignoredExtension)) {\n                return false;\n            }\n        }\n    }\n    if (!extensions) {\n        return true;\n    }\n    for (const extension of extensions) {\n        if (path.endsWith(extension)) {\n            return true;\n        }\n    }\n    return false;\n};\nexport async function loadFilesAsync(pattern, options = LoadFilesDefaultOptions) {\n    const execOptions = { ...LoadFilesDefaultOptions, ...options };\n    const unixify = await import('unixify').then((m) => m.default || m);\n    const relevantPaths = await scanForFilesAsync(asArray(pattern).map((path) => isDirectory(path)\n        ? buildGlob(unixify(path), execOptions.extensions, execOptions.ignoredExtensions, execOptions.recursive)\n        : unixify(path)), options.globOptions);\n    const require$ = (path) => import(path).catch(async () => require(path));\n    const { extname } = await import('path');\n    return Promise.all(relevantPaths\n        .filter((path) => checkExtension(path, options) && !(isIndex(path, execOptions.extensions) && options.ignoreIndex))\n        .map(async (path) => {\n        const extension = extname(path);\n        if (extension.endsWith('.js') || extension.endsWith('.ts') || execOptions.useRequire) {\n            const fileExports = await (execOptions.requireMethod ? execOptions.requireMethod : require$)(path);\n            const extractedExport = extractExports(fileExports, execOptions.exportNames);\n            if (extractedExport.resolver) {\n                return extractedExport.resolver;\n            }\n            if (extractedExport.resolvers) {\n                return extractedExport.resolvers;\n            }\n            return extractedExport;\n        }\n        else {\n            const { promises: { readFile }, } = await import('fs');\n            return readFile(path, { encoding: 'utf-8' });\n        }\n    }));\n}\nfunction isIndex(path, extensions = []) {\n    const IS_INDEX = /(\\/|\\\\)index\\.[^\\/\\\\]+$/i; // (/ or \\) AND `index.` AND (everything except \\ and /)(end of line)\n    return IS_INDEX.test(path) && extensions.some((ext) => path.endsWith('.' + ext));\n}\nexport { loadFilesAsync as loadSchemaFilesAsync, loadFiles as loadSchemaFiles };\nexport { loadFilesAsync as loadResolversFilesAsync, loadFiles as loadResolversFiles };\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}