{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { validateSchema } from './type/validate';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n\n  return new Promise(function (resolve) {\n    return resolve( // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver); // Assert that the execution was synchronous.\n\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  var document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  var validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/graphql.mjs"],"names":["validateSchema","parse","validate","execute","graphql","argsOrSchema","source","rootValue","contextValue","variableValues","operationName","fieldResolver","_arguments","arguments","Promise","resolve","length","graphqlImpl","schema","graphqlSync","result","then","Error","schemaValidationErrors","errors","document","syntaxError","validationErrors"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { validateSchema } from './type/validate';\nimport { parse } from './language/parser';\nimport { validate } from './validation/validate';\nimport { execute } from './execution/execute';\nexport function graphql(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  var _arguments = arguments;\n\n  /* eslint-enable no-redeclare */\n  // Always return a Promise for a consistent API.\n  return new Promise(function (resolve) {\n    return resolve( // Extract arguments from object args if provided.\n    _arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver));\n  });\n}\n/**\n * The graphqlSync function also fulfills GraphQL operations by parsing,\n * validating, and executing a GraphQL document along side a GraphQL schema.\n * However, it guarantees to complete synchronously (or throw an error) assuming\n * that all field resolvers are also synchronous.\n */\n\nexport function graphqlSync(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  var result = arguments.length === 1 ? graphqlImpl(argsOrSchema.schema, argsOrSchema.source, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver) : graphqlImpl(argsOrSchema, source, rootValue, contextValue, variableValues, operationName, fieldResolver); // Assert that the execution was synchronous.\n\n  if (result.then) {\n    throw new Error('GraphQL execution failed to complete synchronously.');\n  }\n\n  return result;\n}\n\nfunction graphqlImpl(schema, source, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // Validate Schema\n  var schemaValidationErrors = validateSchema(schema);\n\n  if (schemaValidationErrors.length > 0) {\n    return {\n      errors: schemaValidationErrors\n    };\n  } // Parse\n\n\n  var document;\n\n  try {\n    document = parse(source);\n  } catch (syntaxError) {\n    return {\n      errors: [syntaxError]\n    };\n  } // Validate\n\n\n  var validationErrors = validate(schema, document);\n\n  if (validationErrors.length > 0) {\n    return {\n      errors: validationErrors\n    };\n  } // Execute\n\n\n  return execute(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);\n}"]},"metadata":{},"sourceType":"module"}