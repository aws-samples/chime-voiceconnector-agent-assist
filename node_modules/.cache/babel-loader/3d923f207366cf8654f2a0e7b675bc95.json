{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var i;\n  var j;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/jsutils/suggestionList.mjs"],"names":["suggestionList","input","options","optionsByDistance","Object","create","oLength","length","inputThreshold","i","distance","lexicalDistance","threshold","Math","max","keys","sort","a","b","aStr","bStr","j","d","toLowerCase","aLength","bLength","cost","min"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  var optionsByDistance = Object.create(null);\n  var oLength = options.length;\n  var inputThreshold = input.length / 2;\n\n  for (var i = 0; i < oLength; i++) {\n    var distance = lexicalDistance(input, options[i]);\n    var threshold = Math.max(inputThreshold, options[i].length / 2, 1);\n\n    if (distance <= threshold) {\n      optionsByDistance[options[i]] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort(function (a, b) {\n    return optionsByDistance[a] - optionsByDistance[b];\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n *\n * @param {string} a\n * @param {string} b\n * @return {int} distance in number of edits\n */\n\nfunction lexicalDistance(aStr, bStr) {\n  if (aStr === bStr) {\n    return 0;\n  }\n\n  var i;\n  var j;\n  var d = [];\n  var a = aStr.toLowerCase();\n  var b = bStr.toLowerCase();\n  var aLength = a.length;\n  var bLength = b.length; // Any case change counts as a single edit\n\n  if (a === b) {\n    return 1;\n  }\n\n  for (i = 0; i <= aLength; i++) {\n    d[i] = [i];\n  }\n\n  for (j = 1; j <= bLength; j++) {\n    d[0][j] = j;\n  }\n\n  for (i = 1; i <= aLength; i++) {\n    for (j = 1; j <= bLength; j++) {\n      var cost = a[i - 1] === b[j - 1] ? 0 : 1;\n      d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n\n      if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n        d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n      }\n    }\n  }\n\n  return d[aLength][bLength];\n}"]},"metadata":{},"sourceType":"module"}