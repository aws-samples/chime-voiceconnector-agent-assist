{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger, Reachability } from '@aws-amplify/core';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\nvar DataStoreConnectivity =\n/** @class */\nfunction () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n\n    return new Observable(function (observer) {\n      _this.observer = observer; // Will be used to forward socket connection changes, enhancing Reachability\n\n      var subs = new Reachability().networkMonitor().subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        observer.next(observerResult);\n      });\n      return function () {\n        subs.unsubscribe();\n      };\n    });\n  };\n\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n\n      setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n\n  return DataStoreConnectivity;\n}();\n\nexport default DataStoreConnectivity;","map":{"version":3,"sources":["../../src/sync/datastoreConnectivity.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,KAAK,UAAZ,MAA4B,gBAA5B;AACA,SAAS,aAAa,IAAI,MAA1B,EAAkC,YAAlC,QAAsD,mBAAtD;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,WAAX,CAAf;AAEA,IAAM,eAAe,GAAG,IAAxB,C,CAA8B;;AAO9B,IAAA,qBAAA;AAAA;AAAA,YAAA;AAGC,WAAA,qBAAA,GAAA;AACC,SAAK,gBAAL,GAAwB;AACvB,MAAA,MAAM,EAAE;AADe,KAAxB;AAGA;;AAED,EAAA,qBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,KAAK,QAAT,EAAmB;AAClB,YAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACA;;AACD,WAAO,IAAI,UAAJ,CAAe,UAAA,QAAA,EAAQ;AAC7B,MAAA,KAAI,CAAC,QAAL,GAAgB,QAAhB,CAD6B,CAE7B;;AAEA,UAAM,IAAI,GAAG,IAAI,YAAJ,GACX,cADW,GAEX,SAFW,CAED,UAAC,EAAD,EAAW;YAAR,MAAA,GAAA,EAAA,CAAA,M;AACb,QAAA,KAAI,CAAC,gBAAL,CAAsB,MAAtB,GAA+B,MAA/B;;AAEA,YAAM,cAAc,GAAA,QAAA,CAAA,EAAA,EAAQ,KAAI,CAAC,gBAAb,CAApB,CAHqB,CAGgC;;;AAErD,QAAA,QAAQ,CAAC,IAAT,CAAc,cAAd;AACA,OARW,CAAb;AAUA,aAAO,YAAA;AACN,QAAA,IAAI,CAAC,WAAL;AACA,OAFD;AAGA,KAjBM,CAAP;AAkBA,GAtBD;;AAwBA,EAAA,qBAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,KAAK,QAAL,IAAiB,OAAO,KAAK,QAAL,CAAc,IAArB,KAA8B,UAAnD,EAA+D;AAC9D,WAAK,QAAL,CAAc,IAAd,CAAmB;AAAE,QAAA,MAAM,EAAE;AAAV,OAAnB,EAD8D,CACvB;;AAEvC,MAAA,UAAU,CAAC,YAAA;AACV,YAAM,cAAc,GAAA,QAAA,CAAA,EAAA,EAAQ,KAAI,CAAC,gBAAb,CAApB,CADU,CAC2C;;;AACrD,QAAA,KAAI,CAAC,QAAL,CAAc,IAAd,CAAmB,cAAnB;AACA,OAHS,EAGP,eAHO,CAAV,CAH8D,CAMzC;AACrB;AACD,GATD;;AAUD,SAAA,qBAAA;AAAC,CA3CD,EAAA","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger, Reachability } from '@aws-amplify/core';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nvar DataStoreConnectivity = /** @class */ (function () {\n    function DataStoreConnectivity() {\n        this.connectionStatus = {\n            online: false,\n        };\n    }\n    DataStoreConnectivity.prototype.status = function () {\n        var _this = this;\n        if (this.observer) {\n            throw new Error('Subscriber already exists');\n        }\n        return new Observable(function (observer) {\n            _this.observer = observer;\n            // Will be used to forward socket connection changes, enhancing Reachability\n            var subs = new Reachability()\n                .networkMonitor()\n                .subscribe(function (_a) {\n                var online = _a.online;\n                _this.connectionStatus.online = online;\n                var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n                observer.next(observerResult);\n            });\n            return function () {\n                subs.unsubscribe();\n            };\n        });\n    };\n    DataStoreConnectivity.prototype.socketDisconnected = function () {\n        var _this = this;\n        if (this.observer && typeof this.observer.next === 'function') {\n            this.observer.next({ online: false }); // Notify network issue from the socket\n            setTimeout(function () {\n                var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n                _this.observer.next(observerResult);\n            }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n        }\n    };\n    return DataStoreConnectivity;\n}());\nexport default DataStoreConnectivity;\n//# sourceMappingURL=datastoreConnectivity.js.map"]},"metadata":{},"sourceType":"module"}