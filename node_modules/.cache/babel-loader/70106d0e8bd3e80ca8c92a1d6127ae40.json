{"ast":null,"code":"/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar Mutex =\n/** @class */\nfunction () {\n  function Mutex() {\n    this._queue = [];\n    this._pending = false;\n  }\n\n  Mutex.prototype.isLocked = function () {\n    return this._pending;\n  };\n\n  Mutex.prototype.acquire = function () {\n    var _this = this;\n\n    var ticket = new Promise(function (resolve) {\n      return _this._queue.push(resolve);\n    });\n\n    if (!this._pending) {\n      this._dispatchNext();\n    }\n\n    return ticket;\n  };\n\n  Mutex.prototype.runExclusive = function (callback) {\n    return this.acquire().then(function (release) {\n      var result;\n\n      try {\n        result = callback();\n      } catch (e) {\n        release();\n        throw e;\n      }\n\n      return Promise.resolve(result).then(function (x) {\n        return release(), x;\n      }, function (e) {\n        release();\n        throw e;\n      });\n    });\n  };\n\n  Mutex.prototype._dispatchNext = function () {\n    if (this._queue.length > 0) {\n      this._pending = true;\n\n      this._queue.shift()(this._dispatchNext.bind(this));\n    } else {\n      this._pending = false;\n    }\n  };\n\n  return Mutex;\n}();\n\nexport default Mutex;","map":{"version":3,"sources":["../../src/Util/Mutex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AA0CA,IAAA,KAAA;AAAA;AAAA,YAAA;AAAA,WAAA,KAAA,GAAA;AA+CS,SAAA,MAAA,GAA4D,EAA5D;AACA,SAAA,QAAA,GAAW,KAAX;AACR;;AAhDA,EAAA,KAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACC,WAAO,KAAK,QAAZ;AACA,GAFD;;AAIA,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,QAAM,MAAM,GAAG,IAAI,OAAJ,CAAqC,UAAA,OAAA,EAAO;AAC1D,aAAA,KAAI,CAAC,MAAL,CAAY,IAAZ,CAAiB,OAAjB,CAAA;AAAyB,KADX,CAAf;;AAIA,QAAI,CAAC,KAAK,QAAV,EAAoB;AACnB,WAAK,aAAL;AACA;;AAED,WAAO,MAAP;AACA,GAVD;;AAYA,EAAA,KAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAgB,QAAhB,EAAkD;AACjD,WAAO,KAAK,OAAL,GAAe,IAAf,CAAoB,UAAA,OAAA,EAAO;AACjC,UAAI,MAAJ;;AAEA,UAAI;AACH,QAAA,MAAM,GAAG,QAAQ,EAAjB;AACA,OAFD,CAEE,OAAO,CAAP,EAAU;AACX,QAAA,OAAO;AACP,cAAM,CAAN;AACA;;AAED,aAAO,OAAO,CAAC,OAAR,CAAgB,MAAhB,EAAwB,IAAxB,CACN,UAAC,CAAD,EAAK;AAAK,eAAC,OAAO,IAAR,CAAA;AAAc,OADlB,EAEN,UAAA,CAAA,EAAC;AACA,QAAA,OAAO;AACP,cAAM,CAAN;AACA,OALK,CAAP;AAOA,KAjBM,CAAP;AAkBA,GAnBD;;AAqBQ,EAAA,KAAA,CAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AACC,QAAI,KAAK,MAAL,CAAY,MAAZ,GAAqB,CAAzB,EAA4B;AAC3B,WAAK,QAAL,GAAgB,IAAhB;;AACA,WAAK,MAAL,CAAY,KAAZ,GAAqB,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAArB;AACA,KAHD,MAGO;AACN,WAAK,QAAL,GAAgB,KAAhB;AACA;AACD,GAPO;;AAWT,SAAA,KAAA;AAAC,CAjDD,EAAA;;AAmDA,eAAe,KAAf","sourceRoot":"","sourcesContent":["/*!\n * The MIT License (MIT)\n *\n * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nvar Mutex = /** @class */ (function () {\n    function Mutex() {\n        this._queue = [];\n        this._pending = false;\n    }\n    Mutex.prototype.isLocked = function () {\n        return this._pending;\n    };\n    Mutex.prototype.acquire = function () {\n        var _this = this;\n        var ticket = new Promise(function (resolve) {\n            return _this._queue.push(resolve);\n        });\n        if (!this._pending) {\n            this._dispatchNext();\n        }\n        return ticket;\n    };\n    Mutex.prototype.runExclusive = function (callback) {\n        return this.acquire().then(function (release) {\n            var result;\n            try {\n                result = callback();\n            }\n            catch (e) {\n                release();\n                throw e;\n            }\n            return Promise.resolve(result).then(function (x) { return (release(), x); }, function (e) {\n                release();\n                throw e;\n            });\n        });\n    };\n    Mutex.prototype._dispatchNext = function () {\n        if (this._queue.length > 0) {\n            this._pending = true;\n            this._queue.shift()(this._dispatchNext.bind(this));\n        }\n        else {\n            this._pending = false;\n        }\n    };\n    return Mutex;\n}());\nexport default Mutex;\n//# sourceMappingURL=Mutex.js.map"]},"metadata":{},"sourceType":"module"}