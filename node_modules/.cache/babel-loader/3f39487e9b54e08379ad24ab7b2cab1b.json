{"ast":null,"code":"var util = require('../core').util;\n\nvar typeOf = require('./types').typeOf;\n/**\n * @api private\n */\n\n\nvar memberTypeToSetType = {\n  'String': 'String',\n  'Number': 'Number',\n  'NumberValue': 'Number',\n  'Binary': 'Binary'\n};\n/**\n * @api private\n */\n\nvar DynamoDBSet = util.inherit({\n  constructor: function Set(list, options) {\n    options = options || {};\n    this.wrapperName = 'Set';\n    this.initialize(list, options.validate);\n  },\n  initialize: function initialize(list, validate) {\n    var self = this;\n    self.values = [].concat(list);\n    self.detectType();\n\n    if (validate) {\n      self.validate();\n    }\n  },\n  detectType: function detectType() {\n    this.type = memberTypeToSetType[typeOf(this.values[0])];\n\n    if (!this.type) {\n      throw util.error(new Error(), {\n        code: 'InvalidSetType',\n        message: 'Sets can contain string, number, or binary values'\n      });\n    }\n  },\n  validate: function validate() {\n    var self = this;\n    var length = self.values.length;\n    var values = self.values;\n\n    for (var i = 0; i < length; i++) {\n      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {\n        throw util.error(new Error(), {\n          code: 'InvalidType',\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n        });\n      }\n    }\n  },\n\n  /**\n   * Render the underlying values only when converting to JSON.\n   */\n  toJSON: function toJSON() {\n    var self = this;\n    return self.values;\n  }\n});\n/**\n * @api private\n */\n\nmodule.exports = DynamoDBSet;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/dynamodb/set.js"],"names":["util","require","typeOf","memberTypeToSetType","DynamoDBSet","inherit","constructor","Set","list","options","wrapperName","initialize","validate","self","values","concat","detectType","type","error","Error","code","message","length","i","toJSON","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,IAA9B;;AACA,IAAIE,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAP,CAAmBC,MAAhC;AAEA;;;;;AAGA,IAAIC,mBAAmB,GAAG;AACxB,YAAU,QADc;AAExB,YAAU,QAFc;AAGxB,iBAAe,QAHS;AAIxB,YAAU;AAJc,CAA1B;AAOA;;;;AAGA,IAAIC,WAAW,GAAGJ,IAAI,CAACK,OAAL,CAAa;AAE7BC,EAAAA,WAAW,EAAE,SAASC,GAAT,CAAaC,IAAb,EAAmBC,OAAnB,EAA4B;AACvCA,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,SAAKC,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL,CAAgBH,IAAhB,EAAsBC,OAAO,CAACG,QAA9B;AACD,GAN4B;AAQ7BD,EAAAA,UAAU,EAAE,oBAASH,IAAT,EAAeI,QAAf,EAAyB;AACnC,QAAIC,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,CAACC,MAAL,GAAc,GAAGC,MAAH,CAAUP,IAAV,CAAd;AACAK,IAAAA,IAAI,CAACG,UAAL;;AACA,QAAIJ,QAAJ,EAAc;AACZC,MAAAA,IAAI,CAACD,QAAL;AACD;AACF,GAf4B;AAiB7BI,EAAAA,UAAU,EAAE,sBAAW;AACrB,SAAKC,IAAL,GAAYd,mBAAmB,CAACD,MAAM,CAAC,KAAKY,MAAL,CAAY,CAAZ,CAAD,CAAP,CAA/B;;AACA,QAAI,CAAC,KAAKG,IAAV,EAAgB;AACd,YAAMjB,IAAI,CAACkB,KAAL,CAAW,IAAIC,KAAJ,EAAX,EAAwB;AAC5BC,QAAAA,IAAI,EAAE,gBADsB;AAE5BC,QAAAA,OAAO,EAAE;AAFmB,OAAxB,CAAN;AAID;AACF,GAzB4B;AA2B7BT,EAAAA,QAAQ,EAAE,oBAAW;AACnB,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIS,MAAM,GAAGT,IAAI,CAACC,MAAL,CAAYQ,MAAzB;AACA,QAAIR,MAAM,GAAGD,IAAI,CAACC,MAAlB;;AACA,SAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAApB,EAA4BC,CAAC,EAA7B,EAAiC;AAC/B,UAAIpB,mBAAmB,CAACD,MAAM,CAACY,MAAM,CAACS,CAAD,CAAP,CAAP,CAAnB,KAA2CV,IAAI,CAACI,IAApD,EAA0D;AACxD,cAAMjB,IAAI,CAACkB,KAAL,CAAW,IAAIC,KAAJ,EAAX,EAAwB;AAC5BC,UAAAA,IAAI,EAAE,aADsB;AAE5BC,UAAAA,OAAO,EAAER,IAAI,CAACI,IAAL,GAAY,gBAAZ,GAA+Bf,MAAM,CAACY,MAAM,CAACS,CAAD,CAAP,CAArC,GAAmD;AAFhC,SAAxB,CAAN;AAID;AACF;AACF,GAvC4B;;AAyC7B;;;AAGAC,EAAAA,MAAM,EAAE,kBAAW;AACjB,QAAIX,IAAI,GAAG,IAAX;AACA,WAAOA,IAAI,CAACC,MAAZ;AACD;AA/C4B,CAAb,CAAlB;AAmDA;;;;AAGAW,MAAM,CAACC,OAAP,GAAiBtB,WAAjB","sourcesContent":["var util = require('../core').util;\nvar typeOf = require('./types').typeOf;\n\n/**\n * @api private\n */\nvar memberTypeToSetType = {\n  'String': 'String',\n  'Number': 'Number',\n  'NumberValue': 'Number',\n  'Binary': 'Binary'\n};\n\n/**\n * @api private\n */\nvar DynamoDBSet = util.inherit({\n\n  constructor: function Set(list, options) {\n    options = options || {};\n    this.wrapperName = 'Set';\n    this.initialize(list, options.validate);\n  },\n\n  initialize: function(list, validate) {\n    var self = this;\n    self.values = [].concat(list);\n    self.detectType();\n    if (validate) {\n      self.validate();\n    }\n  },\n\n  detectType: function() {\n    this.type = memberTypeToSetType[typeOf(this.values[0])];\n    if (!this.type) {\n      throw util.error(new Error(), {\n        code: 'InvalidSetType',\n        message: 'Sets can contain string, number, or binary values'\n      });\n    }\n  },\n\n  validate: function() {\n    var self = this;\n    var length = self.values.length;\n    var values = self.values;\n    for (var i = 0; i < length; i++) {\n      if (memberTypeToSetType[typeOf(values[i])] !== self.type) {\n        throw util.error(new Error(), {\n          code: 'InvalidType',\n          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'\n        });\n      }\n    }\n  },\n\n  /**\n   * Render the underlying values only when converting to JSON.\n   */\n  toJSON: function() {\n    var self = this;\n    return self.values;\n  }\n\n});\n\n/**\n * @api private\n */\nmodule.exports = DynamoDBSet;\n"]},"metadata":{},"sourceType":"script"}