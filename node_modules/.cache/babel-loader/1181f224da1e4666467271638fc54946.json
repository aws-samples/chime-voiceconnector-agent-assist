{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType } from '../../types';\nimport { exhaustiveCheck, USER } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, TransformerMutationType } from '../utils';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\n\nvar MutationProcessor =\n/** @class */\nfunction () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, conflictHandler, errorHandler) {\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.conflictHandler = conflictHandler;\n    this.errorHandler = errorHandler;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.generateQueries();\n  }\n\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var createMutation = buildGraphQLOperation(namespace, model, 'CREATE')[0];\n        var updateMutation = buildGraphQLOperation(namespace, model, 'UPDATE')[0];\n        var deleteMutation = buildGraphQLOperation(namespace, model, 'DELETE')[0];\n\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n\n      _this.resume();\n\n      return function () {\n        _this.pause();\n      };\n    });\n    return observable;\n  };\n\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var head, namespaceName, _a, model, operation, data, condition, modelConstructor, result, opName, modelDefinition, error_1, record;\n\n      var _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (this.processing || !this.isReady()) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            this.processing = true;\n            namespaceName = USER;\n            _c.label = 1;\n\n          case 1:\n            _a = this.processing;\n            if (!_a) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.outbox.peek(this.storage)];\n\n          case 2:\n            _a = head = _c.sent();\n            _c.label = 3;\n\n          case 3:\n            if (!_a) return [3\n            /*break*/\n            , 11];\n            model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n            modelConstructor = this.userClasses[model];\n            result = void 0;\n            opName = void 0;\n            modelDefinition = void 0;\n            _c.label = 4;\n\n          case 4:\n            _c.trys.push([4, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head)];\n\n          case 5:\n            _b = _c.sent(), result = _b[0], opName = _b[1], modelDefinition = _b[2];\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            error_1 = _c.sent();\n\n            if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n              return [3\n              /*break*/\n              , 1];\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            if (!(result === undefined)) return [3\n            /*break*/\n            , 9];\n            logger.debug('done retrying');\n            return [4\n            /*yield*/\n            , this.outbox.dequeue(this.storage)];\n\n          case 8:\n            _c.sent();\n\n            return [3\n            /*break*/\n            , 1];\n\n          case 9:\n            record = result.data[opName];\n            return [4\n            /*yield*/\n            , this.outbox.dequeue(this.storage)];\n\n          case 10:\n            _c.sent();\n\n            this.observer.next([operation, modelDefinition, record]);\n            return [3\n            /*break*/\n            , 1];\n\n          case 11:\n            // pauses itself\n            this.pause();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, tryWith, attempt, opType, result, err_1, error, retryWith, err_2, _b, opName_1, query_1, serverData, namespace, updatedMutation;\n\n                var _c;\n\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      _a = this.createQueryVariables(namespaceName, model, operation, data, condition), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      tryWith = {\n                        query: query,\n                        variables: variables\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      _d.label = 1;\n\n                    case 1:\n                      _d.trys.push([1, 3,, 13]);\n\n                      return [4\n                      /*yield*/\n                      , API.graphql(tryWith)];\n\n                    case 2:\n                      result = _d.sent();\n                      return [2\n                      /*return*/\n                      , [result, opName, modelDefinition]];\n\n                    case 3:\n                      err_1 = _d.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3\n                      /*break*/\n                      , 12];\n                      error = err_1.errors[0];\n\n                      if (error.message === 'Network Error') {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        } // TODO: Check errors on different env (react-native or other browsers)\n\n\n                        throw new Error('Network Error');\n                      }\n\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3\n                      /*break*/\n                      , 11];\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3\n                      /*break*/\n                      , 4];\n                      retryWith = DISCARD;\n                      return [3\n                      /*break*/\n                      , 7];\n\n                    case 4:\n                      _d.trys.push([4, 6,, 7]);\n\n                      return [4\n                      /*yield*/\n                      , this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n\n                    case 5:\n                      retryWith = _d.sent();\n                      return [3\n                      /*break*/\n                      , 7];\n\n                    case 6:\n                      err_2 = _d.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3\n                      /*break*/\n                      , 13];\n\n                    case 7:\n                      if (!(retryWith === DISCARD)) return [3\n                      /*break*/\n                      , 9];\n                      _b = buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET')[0], opName_1 = _b[1], query_1 = _b[2];\n                      return [4\n                      /*yield*/\n                      , API.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        }\n                      })];\n\n                    case 8:\n                      serverData = _d.sent();\n                      return [2\n                      /*return*/\n                      , [serverData, opName_1, modelDefinition]];\n\n                    case 9:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4\n                      /*yield*/\n                      , this.storage.save(updatedMutation)];\n\n                    case 10:\n                      _d.sent();\n\n                      throw new NonRetryableError('RetryMutation');\n\n                    case 11:\n                      try {\n                        this.errorHandler({\n                          localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                          message: error.message,\n                          operation: operation,\n                          errorType: error.errorType,\n                          errorInfo: error.errorInfo,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn({\n                          _err: err\n                        });\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2\n                        /*return*/\n                        , error.data ? [{\n                          data: (_c = {}, _c[opName] = error.data, _c)\n                        }, opName, modelDefinition] : []];\n                      }\n\n                      _d.label = 12;\n\n                    case 12:\n                      return [3\n                      /*break*/\n                      , 13];\n\n                    case 13:\n                      if (tryWith) return [3\n                      /*break*/\n                      , 1];\n                      _d.label = 14;\n\n                    case 14:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent])];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n\n    var _a = queriesTuples.find(function (_a) {\n      var transformerMutationType = _a[0];\n      return transformerMutationType === operation;\n    }),\n        opName = _a[1],\n        query = _a[2];\n\n    var _b = JSON.parse(data),\n        _version = _b._version,\n        parsedData = __rest(_b, [\"_version\"]);\n\n    var filteredData = operation === TransformerMutationType.DELETE ? {\n      id: parsedData.id\n    } // For DELETE mutations, only ID is sent\n    : Object.values(modelDefinition.fields).filter(function (_a) {\n      var type = _a.type,\n          association = _a.association; // connections\n\n      if (isModelFieldType(type)) {\n        // BELONGS_TO\n        if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n          return true;\n        } // All other connections\n\n\n        return false;\n      } // scalars and non-model types\n\n\n      return true;\n    }).map(function (_a) {\n      var name = _a.name,\n          type = _a.type,\n          association = _a.association;\n      var fieldName = name;\n      var val = parsedData[name];\n\n      if (isModelFieldType(type) && isTargetNameAssociation(association)) {\n        fieldName = association.targetName;\n        val = parsedData[fieldName];\n      }\n\n      return [fieldName, val];\n    }).reduce(function (acc, _a) {\n      var k = _a[0],\n          v = _a[1];\n      acc[k] = v;\n      return acc;\n    }, {}); // Build mutation variables input object\n\n    var input = __assign(__assign({}, filteredData), {\n      _version: _version\n    });\n\n    var graphQLCondition = JSON.parse(condition);\n\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n\n      default:\n        exhaustiveCheck(operation);\n    }\n  };\n\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n\n  return MutationProcessor;\n}();\n\nexport { MutationProcessor };","map":{"version":3,"sources":["../../../src/sync/processors/mutation.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport API from '@aws-amplify/api';\nimport { ConsoleLogger as Logger, jitteredExponentialRetry, NonRetryableError, } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, } from '../../types';\nimport { exhaustiveCheck, USER } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, TransformerMutationType, } from '../utils';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */ (function () {\n    function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, conflictHandler, errorHandler) {\n        this.schema = schema;\n        this.storage = storage;\n        this.userClasses = userClasses;\n        this.outbox = outbox;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.MutationEvent = MutationEvent;\n        this.conflictHandler = conflictHandler;\n        this.errorHandler = errorHandler;\n        this.typeQuery = new WeakMap();\n        this.processing = false;\n        this.generateQueries();\n    }\n    MutationProcessor.prototype.generateQueries = function () {\n        var _this = this;\n        Object.values(this.schema.namespaces).forEach(function (namespace) {\n            Object.values(namespace.models)\n                .filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n            })\n                .forEach(function (model) {\n                var createMutation = buildGraphQLOperation(namespace, model, 'CREATE')[0];\n                var updateMutation = buildGraphQLOperation(namespace, model, 'UPDATE')[0];\n                var deleteMutation = buildGraphQLOperation(namespace, model, 'DELETE')[0];\n                _this.typeQuery.set(model, [\n                    createMutation,\n                    updateMutation,\n                    deleteMutation,\n                ]);\n            });\n        });\n    };\n    MutationProcessor.prototype.isReady = function () {\n        return this.observer !== undefined;\n    };\n    MutationProcessor.prototype.start = function () {\n        var _this = this;\n        var observable = new Observable(function (observer) {\n            _this.observer = observer;\n            _this.resume();\n            return function () {\n                _this.pause();\n            };\n        });\n        return observable;\n    };\n    MutationProcessor.prototype.resume = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var head, namespaceName, _a, model, operation, data, condition, modelConstructor, result, opName, modelDefinition, error_1, record;\n            var _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (this.processing || !this.isReady()) {\n                            return [2 /*return*/];\n                        }\n                        this.processing = true;\n                        namespaceName = USER;\n                        _c.label = 1;\n                    case 1:\n                        _a = this.processing;\n                        if (!_a) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.outbox.peek(this.storage)];\n                    case 2:\n                        _a = (head = _c.sent());\n                        _c.label = 3;\n                    case 3:\n                        if (!_a) return [3 /*break*/, 11];\n                        model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                        modelConstructor = this.userClasses[model];\n                        result = void 0;\n                        opName = void 0;\n                        modelDefinition = void 0;\n                        _c.label = 4;\n                    case 4:\n                        _c.trys.push([4, 6, , 7]);\n                        return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head)];\n                    case 5:\n                        _b = _c.sent(), result = _b[0], opName = _b[1], modelDefinition = _b[2];\n                        return [3 /*break*/, 7];\n                    case 6:\n                        error_1 = _c.sent();\n                        if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                            return [3 /*break*/, 1];\n                        }\n                        return [3 /*break*/, 7];\n                    case 7:\n                        if (!(result === undefined)) return [3 /*break*/, 9];\n                        logger.debug('done retrying');\n                        return [4 /*yield*/, this.outbox.dequeue(this.storage)];\n                    case 8:\n                        _c.sent();\n                        return [3 /*break*/, 1];\n                    case 9:\n                        record = result.data[opName];\n                        return [4 /*yield*/, this.outbox.dequeue(this.storage)];\n                    case 10:\n                        _c.sent();\n                        this.observer.next([operation, modelDefinition, record]);\n                        return [3 /*break*/, 1];\n                    case 11:\n                        // pauses itself\n                        this.pause();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, jitteredExponentialRetry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, query, variables, graphQLCondition, opName, modelDefinition, tryWith, attempt, opType, result, err_1, error, retryWith, err_2, _b, opName_1, query_1, serverData, namespace, updatedMutation;\n                            var _c;\n                            return __generator(this, function (_d) {\n                                switch (_d.label) {\n                                    case 0:\n                                        _a = this.createQueryVariables(namespaceName, model, operation, data, condition), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                                        tryWith = { query: query, variables: variables };\n                                        attempt = 0;\n                                        opType = this.opTypeFromTransformerOperation(operation);\n                                        _d.label = 1;\n                                    case 1:\n                                        _d.trys.push([1, 3, , 13]);\n                                        return [4 /*yield*/, API.graphql(tryWith)];\n                                    case 2:\n                                        result = (_d.sent());\n                                        return [2 /*return*/, [result, opName, modelDefinition]];\n                                    case 3:\n                                        err_1 = _d.sent();\n                                        if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 12];\n                                        error = err_1.errors[0];\n                                        if (error.message === 'Network Error') {\n                                            if (!this.processing) {\n                                                throw new NonRetryableError('Offline');\n                                            }\n                                            // TODO: Check errors on different env (react-native or other browsers)\n                                            throw new Error('Network Error');\n                                        }\n                                        if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 11];\n                                        attempt++;\n                                        retryWith = void 0;\n                                        if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 4];\n                                        retryWith = DISCARD;\n                                        return [3 /*break*/, 7];\n                                    case 4:\n                                        _d.trys.push([4, 6, , 7]);\n                                        return [4 /*yield*/, this.conflictHandler({\n                                                modelConstructor: modelConstructor,\n                                                localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                                                remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                                                operation: opType,\n                                                attempts: attempt,\n                                            })];\n                                    case 5:\n                                        retryWith = _d.sent();\n                                        return [3 /*break*/, 7];\n                                    case 6:\n                                        err_2 = _d.sent();\n                                        logger.warn('conflict trycatch', err_2);\n                                        return [3 /*break*/, 13];\n                                    case 7:\n                                        if (!(retryWith === DISCARD)) return [3 /*break*/, 9];\n                                        _b = buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET')[0], opName_1 = _b[1], query_1 = _b[2];\n                                        return [4 /*yield*/, API.graphql({\n                                                query: query_1,\n                                                variables: { id: variables.input.id },\n                                            })];\n                                    case 8:\n                                        serverData = _d.sent();\n                                        return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                                    case 9:\n                                        namespace = this.schema.namespaces[namespaceName];\n                                        updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                                        return [4 /*yield*/, this.storage.save(updatedMutation)];\n                                    case 10:\n                                        _d.sent();\n                                        throw new NonRetryableError('RetryMutation');\n                                    case 11:\n                                        try {\n                                            this.errorHandler({\n                                                localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                                                message: error.message,\n                                                operation: operation,\n                                                errorType: error.errorType,\n                                                errorInfo: error.errorInfo,\n                                                remoteModel: error.data\n                                                    ? this.modelInstanceCreator(modelConstructor, error.data)\n                                                    : null,\n                                            });\n                                        }\n                                        catch (err) {\n                                            logger.warn({ _err: err });\n                                        }\n                                        finally {\n                                            // Return empty tuple, dequeues the mutation\n                                            return [2 /*return*/, error.data\n                                                    ? [\n                                                        { data: (_c = {}, _c[opName] = error.data, _c) },\n                                                        opName,\n                                                        modelDefinition,\n                                                    ]\n                                                    : []];\n                                        }\n                                        _d.label = 12;\n                                    case 12: return [3 /*break*/, 13];\n                                    case 13:\n                                        if (tryWith) return [3 /*break*/, 1];\n                                        _d.label = 14;\n                                    case 14: return [2 /*return*/];\n                                }\n                            });\n                        }); }, [\n                            model,\n                            operation,\n                            data,\n                            condition,\n                            modelConstructor,\n                            MutationEvent,\n                            mutationEvent,\n                        ])];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n        var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n        var queriesTuples = this.typeQuery.get(modelDefinition);\n        var _a = queriesTuples.find(function (_a) {\n            var transformerMutationType = _a[0];\n            return transformerMutationType === operation;\n        }), opName = _a[1], query = _a[2];\n        var _b = JSON.parse(data), _version = _b._version, parsedData = __rest(_b, [\"_version\"]);\n        var filteredData = operation === TransformerMutationType.DELETE\n            ? { id: parsedData.id } // For DELETE mutations, only ID is sent\n            : Object.values(modelDefinition.fields)\n                .filter(function (_a) {\n                var type = _a.type, association = _a.association;\n                // connections\n                if (isModelFieldType(type)) {\n                    // BELONGS_TO\n                    if (isTargetNameAssociation(association) &&\n                        association.connectionType === 'BELONGS_TO') {\n                        return true;\n                    }\n                    // All other connections\n                    return false;\n                }\n                // scalars and non-model types\n                return true;\n            })\n                .map(function (_a) {\n                var name = _a.name, type = _a.type, association = _a.association;\n                var fieldName = name;\n                var val = parsedData[name];\n                if (isModelFieldType(type) &&\n                    isTargetNameAssociation(association)) {\n                    fieldName = association.targetName;\n                    val = parsedData[fieldName];\n                }\n                return [fieldName, val];\n            })\n                .reduce(function (acc, _a) {\n                var k = _a[0], v = _a[1];\n                acc[k] = v;\n                return acc;\n            }, {});\n        // Build mutation variables input object\n        var input = __assign(__assign({}, filteredData), { _version: _version });\n        var graphQLCondition = JSON.parse(condition);\n        var variables = __assign({ input: input }, (operation === TransformerMutationType.CREATE\n            ? {}\n            : {\n                condition: Object.keys(graphQLCondition).length > 0\n                    ? graphQLCondition\n                    : null,\n            }));\n        return [query, variables, graphQLCondition, opName, modelDefinition];\n    };\n    MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n        switch (operation) {\n            case TransformerMutationType.CREATE:\n                return OpType.INSERT;\n            case TransformerMutationType.DELETE:\n                return OpType.DELETE;\n            case TransformerMutationType.UPDATE:\n                return OpType.UPDATE;\n            case TransformerMutationType.GET: // Intentionally blank\n                break;\n            default:\n                exhaustiveCheck(operation);\n        }\n    };\n    MutationProcessor.prototype.pause = function () {\n        this.processing = false;\n    };\n    return MutationProcessor;\n}());\nexport { MutationProcessor };\n//# sourceMappingURL=mutation.js.map"]},"metadata":{},"sourceType":"module"}