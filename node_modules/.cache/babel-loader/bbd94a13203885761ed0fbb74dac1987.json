{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport * as Translate from 'aws-sdk/clients/translate';\nimport * as TextToSpeech from 'aws-sdk/clients/polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\n\nvar AmazonAIConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n\n    _this.inputSampleRate = 44100;\n    _this.outputSampleRate = 16000;\n    return _this;\n  }\n\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    var _this = this;\n\n    logger.debug('Starting translation');\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('region not configured for transcription')];\n              }\n\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _h.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n              targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n\n              if (!sourceLanguageCode || !targetLanguageCode) {\n                return [2\n                /*return*/\n                , rej('Please provide both source and target language')];\n              }\n\n              this.translate = new Translate({\n                region: region,\n                credentials: credentials\n              });\n              this.translate.translateText({\n                SourceLanguageCode: sourceLanguageCode,\n                TargetLanguageCode: targetLanguageCode,\n                Text: input.translateText.source.text\n              }, function (err, data) {\n                logger.debug({\n                  err: err,\n                  data: data\n                });\n\n                if (err) {\n                  return rej(err);\n                } else {\n                  return res({\n                    text: data.TranslatedText,\n                    language: data.TargetLanguageCode\n                  });\n                }\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _f.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n              if (!input.textToSpeech.source) {\n                return [2\n                /*return*/\n                , rej('Source needs to be provided in the input')];\n              }\n\n              voiceId = input.textToSpeech.voiceId || VoiceId;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('Region was undefined. Did you enable speech generator using amplify CLI?')];\n              }\n\n              if (!voiceId) {\n                return [2\n                /*return*/\n                , rej('VoiceId was undefined.')];\n              }\n\n              this.textToSpeech = new TextToSpeech({\n                region: region,\n                credentials: credentials\n              });\n              this.textToSpeech.synthesizeSpeech({\n                OutputFormat: 'mp3',\n                Text: input.textToSpeech.source.text,\n                VoiceId: voiceId,\n                TextType: 'text',\n                SampleRate: '24000'\n              }, function (err, data) {\n                if (err) {\n                  rej(err);\n                } else {\n                  var blob = new Blob([data.AudioStream], {\n                    type: data.ContentType\n                  });\n                  var url = URL.createObjectURL(blob);\n                  res({\n                    speech: {\n                      url: url\n                    },\n                    audioStream: data.AudioStream.buffer,\n                    text: input.textToSpeech.source.text\n                  });\n                }\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_1, err_2;\n\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _h.trys.push([0, 7,, 8]);\n\n              logger.debug('starting transcription..');\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _h.sent();\n\n              if (!credentials) {\n                return [2\n                /*return*/\n                , rej('No credentials')];\n              }\n\n              _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n              if (!region) {\n                return [2\n                /*return*/\n                , rej('region not configured for transcription')];\n              }\n\n              if (!languageCode) {\n                return [2\n                /*return*/\n                , rej('languageCode not configured or provided for transcription')];\n              }\n\n              _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n              if (!isBytesSource(source)) return [3\n              /*break*/\n              , 6];\n              return [4\n              /*yield*/\n              , this.openConnectionWithTranscribe({\n                credentials: credentials,\n                region: region,\n                languageCode: language\n              })];\n\n            case 2:\n              connection = _h.sent();\n              _h.label = 3;\n\n            case 3:\n              _h.trys.push([3, 5,, 6]);\n\n              return [4\n              /*yield*/\n              , this.sendDataToTranscribe({\n                connection: connection,\n                raw: source.bytes\n              })];\n\n            case 4:\n              fullText = _h.sent();\n              return [2\n              /*return*/\n              , res({\n                transcription: {\n                  fullText: fullText\n                }\n              })];\n\n            case 5:\n              err_1 = _h.sent();\n              rej(err_1);\n              return [3\n              /*break*/\n              , 6];\n\n            case 6:\n              return [2\n              /*return*/\n              , rej('Source types other than byte source are not supported.')];\n\n            case 7:\n              err_2 = _h.sent();\n              return [2\n              /*return*/\n              , rej(err_2.name + ': ' + err_2.message)];\n\n            case 8:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(String.fromCharCode.apply(String, transcribeMessage.body));\n\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return decodedMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n\n    var connection = _a.connection,\n        raw = _a.raw;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n\n      logger.debug({\n        raw: raw\n      });\n\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n\n          _this.sendEncodedDataToTranscribe(connection, data);\n        }\n      } // sending end frame\n\n\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n\n    return buffer;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer;\n\n    if (this.outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n\n    var sampleRateRatio = this.inputSampleRate / this.outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n          count = 0;\n\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n\n    return result;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n\n    var userCredentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=16000&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\n\nexport default AmazonAIConvertPredictionsProvider;","map":{"version":3,"sources":["../../src/Providers/AmazonAIConvertPredictionsProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport * as Translate from 'aws-sdk/clients/translate';\nimport * as TextToSpeech from 'aws-sdk/clients/polly';\nimport { isBytesSource, } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, } from '@aws-amplify/core';\nimport { EventStreamMarshaller, } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar AmazonAIConvertPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIConvertPredictionsProvider, _super);\n    function AmazonAIConvertPredictionsProvider() {\n        var _this = _super.call(this) || this;\n        _this.inputSampleRate = 44100;\n        _this.outputSampleRate = 16000;\n        return _this;\n    }\n    AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIConvertPredictionsProvider';\n    };\n    AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n        var _this = this;\n        logger.debug('Starting translation');\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n                        if (!region) {\n                            return [2 /*return*/, rej('region not configured for transcription')];\n                        }\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _h.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, rej('No credentials')];\n                        }\n                        sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n                        targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n                        if (!sourceLanguageCode || !targetLanguageCode) {\n                            return [2 /*return*/, rej('Please provide both source and target language')];\n                        }\n                        this.translate = new Translate({ region: region, credentials: credentials });\n                        this.translate.translateText({\n                            SourceLanguageCode: sourceLanguageCode,\n                            TargetLanguageCode: targetLanguageCode,\n                            Text: input.translateText.source.text,\n                        }, function (err, data) {\n                            logger.debug({ err: err, data: data });\n                            if (err) {\n                                return rej(err);\n                            }\n                            else {\n                                return res({\n                                    text: data.TranslatedText,\n                                    language: data.TargetLanguageCode,\n                                });\n                            }\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, rej('No credentials')];\n                        }\n                        _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n                        if (!input.textToSpeech.source) {\n                            return [2 /*return*/, rej('Source needs to be provided in the input')];\n                        }\n                        voiceId = input.textToSpeech.voiceId || VoiceId;\n                        if (!region) {\n                            return [2 /*return*/, rej('Region was undefined. Did you enable speech generator using amplify CLI?')];\n                        }\n                        if (!voiceId) {\n                            return [2 /*return*/, rej('VoiceId was undefined.')];\n                        }\n                        this.textToSpeech = new TextToSpeech({ region: region, credentials: credentials });\n                        this.textToSpeech.synthesizeSpeech({\n                            OutputFormat: 'mp3',\n                            Text: input.textToSpeech.source.text,\n                            VoiceId: voiceId,\n                            TextType: 'text',\n                            SampleRate: '24000',\n                        }, function (err, data) {\n                            if (err) {\n                                rej(err);\n                            }\n                            else {\n                                var blob = new Blob([data.AudioStream], {\n                                    type: data.ContentType,\n                                });\n                                var url = URL.createObjectURL(blob);\n                                res({\n                                    speech: { url: url },\n                                    audioStream: data.AudioStream.buffer,\n                                    text: input.textToSpeech.source.text,\n                                });\n                            }\n                        });\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_1, err_2;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        _h.trys.push([0, 7, , 8]);\n                        logger.debug('starting transcription..');\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _h.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, rej('No credentials')];\n                        }\n                        _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n                        if (!region) {\n                            return [2 /*return*/, rej('region not configured for transcription')];\n                        }\n                        if (!languageCode) {\n                            return [2 /*return*/, rej('languageCode not configured or provided for transcription')];\n                        }\n                        _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n                        if (!isBytesSource(source)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.openConnectionWithTranscribe({\n                                credentials: credentials,\n                                region: region,\n                                languageCode: language,\n                            })];\n                    case 2:\n                        connection = _h.sent();\n                        _h.label = 3;\n                    case 3:\n                        _h.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this.sendDataToTranscribe({\n                                connection: connection,\n                                raw: source.bytes,\n                            })];\n                    case 4:\n                        fullText = _h.sent();\n                        return [2 /*return*/, res({\n                                transcription: {\n                                    fullText: fullText,\n                                },\n                            })];\n                    case 5:\n                        err_1 = _h.sent();\n                        rej(err_1);\n                        return [3 /*break*/, 6];\n                    case 6: return [2 /*return*/, rej('Source types other than byte source are not supported.')];\n                    case 7:\n                        err_2 = _h.sent();\n                        return [2 /*return*/, rej(err_2.name + ': ' + err_2.message)];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n        var decodedMessage = '';\n        var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n        var transcribeMessageJson = JSON.parse(String.fromCharCode.apply(String, transcribeMessage.body));\n        if (transcribeMessage.headers[':message-type'].value === 'exception') {\n            logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n            throw new Error(transcribeMessageJson.Message);\n        }\n        else if (transcribeMessage.headers[':message-type'].value === 'event') {\n            if (transcribeMessageJson.Transcript.Results.length > 0) {\n                if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n                    if (transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                        .Transcript.length > 0) {\n                        if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n                            decodedMessage =\n                                transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                                    .Transcript + '\\n';\n                            logger.debug({ decodedMessage: decodedMessage });\n                        }\n                        else {\n                            logger.debug({\n                                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0],\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return decodedMessage;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n        var _this = this;\n        var connection = _a.connection, raw = _a.raw;\n        return new Promise(function (res, rej) {\n            var fullText = '';\n            connection.onmessage = function (message) {\n                try {\n                    var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n                    if (decodedMessage) {\n                        fullText += decodedMessage + ' ';\n                    }\n                }\n                catch (err) {\n                    logger.debug(err);\n                    rej(err.message);\n                }\n            };\n            connection.onerror = function (errorEvent) {\n                logger.debug({ errorEvent: errorEvent });\n                rej('failed to transcribe, network error');\n            };\n            connection.onclose = function (closeEvent) {\n                logger.debug({ closeEvent: closeEvent });\n                return res(fullText.trim());\n            };\n            logger.debug({ raw: raw });\n            if (Array.isArray(raw)) {\n                for (var i = 0; i < raw.length - 1023; i += 1024) {\n                    var data = raw.slice(i, i + 1024);\n                    _this.sendEncodedDataToTranscribe(connection, data);\n                }\n            }\n            // sending end frame\n            var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n            var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n            connection.send(endFrameBinary);\n        });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data) {\n        var downsampledBuffer = this.downsampleBuffer({ buffer: data });\n        var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n        var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n        var binary = eventBuilder.marshall(audioEventMessage);\n        connection.send(binary);\n    };\n    AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n        var audioEventMessage = {\n            body: buffer,\n            headers: {\n                ':message-type': {\n                    type: 'string',\n                    value: 'event',\n                },\n                ':event-type': {\n                    type: 'string',\n                    value: 'AudioEvent',\n                },\n            },\n        };\n        return audioEventMessage;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n        var offset = 0;\n        var buffer = new ArrayBuffer(input.length * 2);\n        var view = new DataView(buffer);\n        for (var i = 0; i < input.length; i++, offset += 2) {\n            var s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n        }\n        return buffer;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n        var buffer = _a.buffer;\n        if (this.outputSampleRate === this.inputSampleRate) {\n            return buffer;\n        }\n        var sampleRateRatio = this.inputSampleRate / this.outputSampleRate;\n        var newLength = Math.round(buffer.length / sampleRateRatio);\n        var result = new Float32Array(newLength);\n        var offsetResult = 0;\n        var offsetBuffer = 0;\n        while (offsetResult < result.length) {\n            var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n            var accum = 0, count = 0;\n            for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n                accum += buffer[i];\n                count++;\n            }\n            result[offsetResult] = accum / count;\n            offsetResult++;\n            offsetBuffer = nextOffsetBuffer;\n        }\n        return result;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n        var _this = this;\n        var userCredentials = _a.credentials, region = _a.region, languageCode = _a.languageCode;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var access_key, secret_key, session_token, credentials, signedUrl, connection;\n            return __generator(this, function (_a) {\n                access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n                credentials = {\n                    access_key: access_key,\n                    secret_key: secret_key,\n                    session_token: session_token,\n                };\n                signedUrl = this.generateTranscribeUrl({\n                    credentials: credentials,\n                    region: region,\n                    languageCode: languageCode,\n                });\n                logger.debug('connecting...');\n                connection = new WebSocket(signedUrl);\n                connection.binaryType = 'arraybuffer';\n                connection.onopen = function () {\n                    logger.debug('connected');\n                    res(connection);\n                };\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n        var credentials = _a.credentials, region = _a.region, languageCode = _a.languageCode;\n        var url = [\n            \"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\",\n            '/stream-transcription-websocket?',\n            \"media-encoding=pcm&\",\n            \"sample-rate=16000&\",\n            \"language-code=\" + languageCode,\n        ].join('');\n        var signedUrl = Signer.signUrl(url, credentials, { region: region, service: 'transcribe' }, 300);\n        return signedUrl;\n    };\n    return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider));\nexport default AmazonAIConvertPredictionsProvider;\n//# sourceMappingURL=AmazonAIConvertPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}