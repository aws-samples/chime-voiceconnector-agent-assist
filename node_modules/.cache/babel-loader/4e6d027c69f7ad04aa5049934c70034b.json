{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\n\nvar Predictions =\n/** @class */\nfunction () {\n  /**\n   * Initialize Predictions with AWS configurations\n   * @param {PredictionsOptions} options - Configuration object for Predictions\n   */\n  function Predictions(options) {\n    this._options = options;\n    this._convertPluggables = [];\n    this._identifyPluggables = [];\n    this._interpretPluggables = [];\n  }\n\n  Predictions.prototype.getModuleName = function () {\n    return 'Predictions';\n  };\n  /**\n   * add plugin/pluggable into Predictions category\n   * @param {Object} pluggable - an instance of the plugin/pluggable\n   **/\n\n\n  Predictions.prototype.addPluggable = function (pluggable) {\n    if (this.getPluggable(pluggable.getProviderName())) {\n      throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n    }\n\n    var pluggableAdded = false;\n\n    if (this.implementsConvertPluggable(pluggable)) {\n      this._convertPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsIdentifyPluggable(pluggable)) {\n      this._identifyPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (this.implementsInterpretPluggable(pluggable)) {\n      this._interpretPluggables.push(pluggable);\n\n      pluggableAdded = true;\n    }\n\n    if (pluggableAdded) {\n      this.configurePluggable(pluggable);\n    }\n  };\n  /**\n   * Get the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Predictions.prototype.getPluggable = function (providerName) {\n    var pluggable = this.getAllProviders().find(function (pluggable) {\n      return pluggable.getProviderName() === providerName;\n    });\n\n    if (pluggable === undefined) {\n      logger.debug('No plugin found with providerName=>', providerName);\n      return null;\n    } else return pluggable;\n  };\n  /**\n   * Remove the plugin object\n   * @param providerName - the name of the plugin\n   */\n\n\n  Predictions.prototype.removePluggable = function (providerName) {\n    this._convertPluggables = this._convertPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) {\n      return pluggable.getProviderName() !== providerName;\n    });\n    return;\n  };\n  /**\n   * To make both top level providers and category level providers work with same interface and configuration\n   * this method duplicates Predictions config into parent level config (for top level provider) and\n   * category level config (such as convert, identify etc) and pass both to each provider.\n   */\n\n\n  Predictions.prototype.configure = function (options) {\n    var _this = this;\n\n    var predictionsConfig = options ? options.predictions || options : {};\n    predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n    this._options = Object.assign({}, this._options, predictionsConfig);\n    logger.debug('configure Predictions', this._options);\n    this.getAllProviders().forEach(function (pluggable) {\n      return _this.configurePluggable(pluggable);\n    });\n  };\n\n  Predictions.prototype.interpret = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n    return pluggableToExecute.interpret(input);\n  };\n\n  Predictions.prototype.convert = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n    return pluggableToExecute.convert(input);\n  };\n\n  Predictions.prototype.identify = function (input, options) {\n    var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n    return pluggableToExecute.identify(input);\n  }; // tslint:disable-next-line: max-line-length\n\n\n  Predictions.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n    // Give preference to provider name first since it is more specific to this call, even if\n    // there is only one provider configured to error out if the name provided is not the one matched.\n    if (providerOptions && providerOptions.providerName) {\n      return __spreadArrays(pluggables).find(function (pluggable) {\n        return pluggable.getProviderName() === providerOptions.providerName;\n      });\n    } else {\n      if (pluggables.length === 1) {\n        return pluggables[0];\n      } else {\n        throw new Error('More than one or no providers are configured, ' + 'Either specify a provider name or configure exactly one provider');\n      }\n    }\n  };\n\n  Predictions.prototype.getAllProviders = function () {\n    return __spreadArrays(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n  };\n\n  Predictions.prototype.configurePluggable = function (pluggable) {\n    var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\n    this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n    );\n    pluggable.configure(categoryConfig);\n  };\n\n  Predictions.prototype.implementsConvertPluggable = function (obj) {\n    return obj && typeof obj.convert === 'function';\n  };\n\n  Predictions.prototype.implementsIdentifyPluggable = function (obj) {\n    return obj && typeof obj.identify === 'function';\n  };\n\n  Predictions.prototype.implementsInterpretPluggable = function (obj) {\n    return obj && typeof obj.interpret === 'function';\n  };\n\n  return Predictions;\n}();\n\nexport default Predictions;","map":{"version":3,"sources":["../src/Predictions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AA+BA,SAAS,aAAa,IAAI,MAA1B,QAAwC,mBAAxC;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,aAAX,CAAf;;AAEA,IAAA,WAAA;AAAA;AAAA,YAAA;AAOC;;;;AAIA,WAAA,WAAA,CAAY,OAAZ,EAAuC;AACtC,SAAK,QAAL,GAAgB,OAAhB;AACA,SAAK,kBAAL,GAA0B,EAA1B;AACA,SAAK,mBAAL,GAA2B,EAA3B;AACA,SAAK,oBAAL,GAA4B,EAA5B;AACA;;AAEM,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACC,WAAO,aAAP;AACA,GAFM;AAIP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,SAApB,EAA0D;AACzD,QAAI,KAAK,YAAL,CAAkB,SAAS,CAAC,eAAV,EAAlB,CAAJ,EAAoD;AACnD,YAAM,IAAI,KAAJ,CACL,yBAAuB,SAAS,CAAC,eAAV,EAAvB,GAAkD,0BAD7C,CAAN;AAGA;;AACD,QAAI,cAAc,GAAY,KAA9B;;AACA,QAAI,KAAK,0BAAL,CAAgC,SAAhC,CAAJ,EAAgD;AAC/C,WAAK,kBAAL,CAAwB,IAAxB,CAA6B,SAA7B;;AACA,MAAA,cAAc,GAAG,IAAjB;AACA;;AACD,QAAI,KAAK,2BAAL,CAAiC,SAAjC,CAAJ,EAAiD;AAChD,WAAK,mBAAL,CAAyB,IAAzB,CAA8B,SAA9B;;AACA,MAAA,cAAc,GAAG,IAAjB;AACA;;AACD,QAAI,KAAK,4BAAL,CAAkC,SAAlC,CAAJ,EAAkD;AACjD,WAAK,oBAAL,CAA0B,IAA1B,CAA+B,SAA/B;;AACA,MAAA,cAAc,GAAG,IAAjB;AACA;;AACD,QAAI,cAAJ,EAAoB;AACnB,WAAK,kBAAL,CAAwB,SAAxB;AACA;AACD,GAtBM;AAwBP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAP,UAAoB,YAApB,EAAwC;AACvC,QAAM,SAAS,GAAG,KAAK,eAAL,GAAuB,IAAvB,CACjB,UAAA,SAAA,EAAS;AAAI,aAAA,SAAS,CAAC,eAAV,OAAA,YAAA;AAA4C,KADxC,CAAlB;;AAGA,QAAI,SAAS,KAAK,SAAlB,EAA6B;AAC5B,MAAA,MAAM,CAAC,KAAP,CAAa,qCAAb,EAAoD,YAApD;AACA,aAAO,IAAP;AACA,KAHD,MAGO,OAAO,SAAP;AACP,GARM;AAUP;;;;;;AAIO,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,YAAvB,EAA2C;AAC1C,SAAK,kBAAL,GAA0B,KAAK,kBAAL,CAAwB,MAAxB,CACzB,UAAA,SAAA,EAAS;AAAI,aAAA,SAAS,CAAC,eAAV,OAAA,YAAA;AAA4C,KADhC,CAA1B;AAGA,SAAK,mBAAL,GAA2B,KAAK,mBAAL,CAAyB,MAAzB,CAC1B,UAAA,SAAA,EAAS;AAAI,aAAA,SAAS,CAAC,eAAV,OAAA,YAAA;AAA4C,KAD/B,CAA3B;AAGA,SAAK,oBAAL,GAA4B,KAAK,oBAAL,CAA0B,MAA1B,CAC3B,UAAA,SAAA,EAAS;AAAI,aAAA,SAAS,CAAC,eAAV,OAAA,YAAA;AAA4C,KAD9B,CAA5B;AAGA;AACA,GAXM;AAaP;;;;;;;AAKA,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,OAAV,EAAqC;AAArC,QAAA,KAAA,GAAA,IAAA;;AACC,QAAI,iBAAiB,GAAG,OAAO,GAAG,OAAO,CAAC,WAAR,IAAuB,OAA1B,GAAoC,EAAnE;AACA,IAAA,iBAAiB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,iBAAR,CAAA,EAA8B,OAA9B,CAAjB;AACA,SAAK,QAAL,GAAgB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,QAAvB,EAAiC,iBAAjC,CAAhB;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,uBAAb,EAAsC,KAAK,QAA3C;AACA,SAAK,eAAL,GAAuB,OAAvB,CAA+B,UAAA,SAAA,EAAS;AACvC,aAAA,KAAI,CAAC,kBAAL,CAAwB,SAAxB,CAAA;AAAkC,KADnC;AAGA,GARD;;AAcO,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UACC,KADD,EAEC,OAFD,EAE0B;AAEzB,QAAM,kBAAkB,GAAG,KAAK,qBAAL,CAC1B,KAAK,oBADqB,EAE1B,OAF0B,CAA3B;AAIA,WAAO,kBAAkB,CAAC,SAAnB,CAA6B,KAA7B,CAAP;AACA,GATM;;AAuBA,EAAA,WAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UACC,KADD,EAEC,OAFD,EAE0B;AAEzB,QAAM,kBAAkB,GAAG,KAAK,qBAAL,CAC1B,KAAK,kBADqB,EAE1B,OAF0B,CAA3B;AAIA,WAAO,kBAAkB,CAAC,OAAnB,CAA2B,KAA3B,CAAP;AACA,GATM;;AAuBA,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UACC,KADD,EAEC,OAFD,EAEyB;AAIxB,QAAM,kBAAkB,GAAG,KAAK,qBAAL,CAC1B,KAAK,mBADqB,EAE1B,OAF0B,CAA3B;AAIA,WAAO,kBAAkB,CAAC,QAAnB,CAA4B,KAA5B,CAAP;AACA,GAXM,CAlJR,CA+JC;;;AACQ,EAAA,WAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,UACC,UADD,EAEC,eAFD,EAEiC;AAEhC;AACA;AACA,QAAI,eAAe,IAAI,eAAe,CAAC,YAAvC,EAAqD;AACpD,aAAO,cAAA,CAAI,UAAJ,CAAA,CAAgB,IAAhB,CACN,UAAA,SAAA,EAAS;AACR,eAAA,SAAS,CAAC,eAAV,OAAgC,eAAe,CAAC,YAAhD;AAA4D,OAFvD,CAAP;AAIA,KALD,MAKO;AACN,UAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,EAA6B;AAC5B,eAAO,UAAU,CAAC,CAAD,CAAjB;AACA,OAFD,MAEO;AACN,cAAM,IAAI,KAAJ,CACL,mDACC,kEAFI,CAAN;AAIA;AACD;AACD,GArBO;;AAuBA,EAAA,WAAA,CAAA,SAAA,CAAA,eAAA,GAAR,YAAA;AACC,WAAA,cAAA,CACI,KAAK,kBADT,EAEI,KAAK,mBAFT,EAGI,KAAK,oBAHT,CAAA;AAKA,GANO;;AAQA,EAAA,WAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,SAA3B,EAAiE;AAChE,QAAM,cAAc,GAAG,MAAM,CAAC,MAAP,CACtB,EADsB,EAEtB,KAAK,QAAL,CAAc,aAAd,CAFsB,EAEQ;AAC9B,SAAK,QAAL,CAAc,SAAS,CAAC,WAAV,GAAwB,WAAxB,EAAd,CAHsB,CAG+B;AAH/B,KAAvB;AAKA,IAAA,SAAS,CAAC,SAAV,CAAoB,cAApB;AACA,GAPO;;AASA,EAAA,WAAA,CAAA,SAAA,CAAA,0BAAA,GAAR,UACC,GADD,EACS;AAER,WAAO,GAAG,IAAI,OAAO,GAAG,CAAC,OAAX,KAAuB,UAArC;AACA,GAJO;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,2BAAA,GAAR,UACC,GADD,EACS;AAER,WAAO,GAAG,IAAI,OAAO,GAAG,CAAC,QAAX,KAAwB,UAAtC;AACA,GAJO;;AAMA,EAAA,WAAA,CAAA,SAAA,CAAA,4BAAA,GAAR,UACC,GADD,EACS;AAER,WAAO,GAAG,IAAI,OAAO,GAAG,CAAC,SAAX,KAAyB,UAAvC;AACA,GAJO;;AAKT,SAAA,WAAA;AAAC,CAzND,EAAA","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('Predictions');\nvar Predictions = /** @class */ (function () {\n    /**\n     * Initialize Predictions with AWS configurations\n     * @param {PredictionsOptions} options - Configuration object for Predictions\n     */\n    function Predictions(options) {\n        this._options = options;\n        this._convertPluggables = [];\n        this._identifyPluggables = [];\n        this._interpretPluggables = [];\n    }\n    Predictions.prototype.getModuleName = function () {\n        return 'Predictions';\n    };\n    /**\n     * add plugin/pluggable into Predictions category\n     * @param {Object} pluggable - an instance of the plugin/pluggable\n     **/\n    Predictions.prototype.addPluggable = function (pluggable) {\n        if (this.getPluggable(pluggable.getProviderName())) {\n            throw new Error(\"Pluggable with name \" + pluggable.getProviderName() + \" has already been added.\");\n        }\n        var pluggableAdded = false;\n        if (this.implementsConvertPluggable(pluggable)) {\n            this._convertPluggables.push(pluggable);\n            pluggableAdded = true;\n        }\n        if (this.implementsIdentifyPluggable(pluggable)) {\n            this._identifyPluggables.push(pluggable);\n            pluggableAdded = true;\n        }\n        if (this.implementsInterpretPluggable(pluggable)) {\n            this._interpretPluggables.push(pluggable);\n            pluggableAdded = true;\n        }\n        if (pluggableAdded) {\n            this.configurePluggable(pluggable);\n        }\n    };\n    /**\n     * Get the plugin object\n     * @param providerName - the name of the plugin\n     */\n    Predictions.prototype.getPluggable = function (providerName) {\n        var pluggable = this.getAllProviders().find(function (pluggable) { return pluggable.getProviderName() === providerName; });\n        if (pluggable === undefined) {\n            logger.debug('No plugin found with providerName=>', providerName);\n            return null;\n        }\n        else\n            return pluggable;\n    };\n    /**\n     * Remove the plugin object\n     * @param providerName - the name of the plugin\n     */\n    Predictions.prototype.removePluggable = function (providerName) {\n        this._convertPluggables = this._convertPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\n        this._identifyPluggables = this._identifyPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\n        this._interpretPluggables = this._interpretPluggables.filter(function (pluggable) { return pluggable.getProviderName() !== providerName; });\n        return;\n    };\n    /**\n     * To make both top level providers and category level providers work with same interface and configuration\n     * this method duplicates Predictions config into parent level config (for top level provider) and\n     * category level config (such as convert, identify etc) and pass both to each provider.\n     */\n    Predictions.prototype.configure = function (options) {\n        var _this = this;\n        var predictionsConfig = options ? options.predictions || options : {};\n        predictionsConfig = __assign(__assign({}, predictionsConfig), options);\n        this._options = Object.assign({}, this._options, predictionsConfig);\n        logger.debug('configure Predictions', this._options);\n        this.getAllProviders().forEach(function (pluggable) {\n            return _this.configurePluggable(pluggable);\n        });\n    };\n    Predictions.prototype.interpret = function (input, options) {\n        var pluggableToExecute = this.getPluggableToExecute(this._interpretPluggables, options);\n        return pluggableToExecute.interpret(input);\n    };\n    Predictions.prototype.convert = function (input, options) {\n        var pluggableToExecute = this.getPluggableToExecute(this._convertPluggables, options);\n        return pluggableToExecute.convert(input);\n    };\n    Predictions.prototype.identify = function (input, options) {\n        var pluggableToExecute = this.getPluggableToExecute(this._identifyPluggables, options);\n        return pluggableToExecute.identify(input);\n    };\n    // tslint:disable-next-line: max-line-length\n    Predictions.prototype.getPluggableToExecute = function (pluggables, providerOptions) {\n        // Give preference to provider name first since it is more specific to this call, even if\n        // there is only one provider configured to error out if the name provided is not the one matched.\n        if (providerOptions && providerOptions.providerName) {\n            return __spreadArrays(pluggables).find(function (pluggable) {\n                return pluggable.getProviderName() === providerOptions.providerName;\n            });\n        }\n        else {\n            if (pluggables.length === 1) {\n                return pluggables[0];\n            }\n            else {\n                throw new Error('More than one or no providers are configured, ' +\n                    'Either specify a provider name or configure exactly one provider');\n            }\n        }\n    };\n    Predictions.prototype.getAllProviders = function () {\n        return __spreadArrays(this._convertPluggables, this._identifyPluggables, this._interpretPluggables);\n    };\n    Predictions.prototype.configurePluggable = function (pluggable) {\n        var categoryConfig = Object.assign({}, this._options['predictions'], // Parent predictions config for the top level provider\n        this._options[pluggable.getCategory().toLowerCase()] // Actual category level config\n        );\n        pluggable.configure(categoryConfig);\n    };\n    Predictions.prototype.implementsConvertPluggable = function (obj) {\n        return obj && typeof obj.convert === 'function';\n    };\n    Predictions.prototype.implementsIdentifyPluggable = function (obj) {\n        return obj && typeof obj.identify === 'function';\n    };\n    Predictions.prototype.implementsInterpretPluggable = function (obj) {\n        return obj && typeof obj.interpret === 'function';\n    };\n    return Predictions;\n}());\nexport default Predictions;\n//# sourceMappingURL=Predictions.js.map"]},"metadata":{},"sourceType":"module"}