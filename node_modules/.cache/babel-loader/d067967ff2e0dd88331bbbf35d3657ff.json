{"ast":null,"code":"import { exhaustiveCheck } from '../util';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n} // This symbol is not used at runtime, only its type (unique symbol)\n\nexport var PredicateAll = Symbol('A predicate that matches all records');\n\nvar Predicates =\n/** @class */\nfunction () {\n  function Predicates() {}\n\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function get() {\n      var predicate = function predicate(c) {\n        return c;\n      };\n\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\n\nexport { Predicates };\n\nvar ModelPredicateCreator =\n/** @class */\nfunction () {\n  function ModelPredicateCreator() {}\n\n  ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n    var modelName = modelDefinition.name;\n    var fieldNames = new Set(Object.keys(modelDefinition.fields));\n    var handler;\n    var predicate = new Proxy({}, handler = {\n      get: function get(_target, propertyKey, receiver) {\n        var groupType = propertyKey;\n\n        switch (groupType) {\n          case 'and':\n          case 'or':\n          case 'not':\n            var result_1 = function result_1(newPredicate) {\n              var group = {\n                type: groupType,\n                predicates: []\n              }; // Create a new recorder\n\n              var tmpPredicateRecorder = new Proxy({}, handler); // Set the recorder group\n\n              ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group); // Apply the predicates to the recorder (this is the step that records the changes)\n\n              newPredicate(tmpPredicateRecorder); // Push the group to the top-level recorder\n\n              ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push(group);\n              return receiver;\n            };\n\n            return result_1;\n\n          default:\n            exhaustiveCheck(groupType, false);\n        }\n\n        var field = propertyKey;\n\n        if (!fieldNames.has(field)) {\n          throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n        }\n\n        var result = function result(operator, operand) {\n          ModelPredicateCreator.predicateGroupsMap.get(receiver).predicates.push({\n            field: field,\n            operator: operator,\n            operand: operand\n          });\n          return receiver;\n        };\n\n        return result;\n      }\n    });\n    var group = {\n      type: 'and',\n      predicates: []\n    };\n    ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n    return predicate;\n  };\n\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n\n  ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n    if (!existing || !modelDefinition) {\n      return undefined;\n    }\n\n    return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n  };\n\n  ModelPredicateCreator.createForId = function (modelDefinition, id) {\n    return ModelPredicateCreator.createPredicateBuilder(modelDefinition).id('eq', id);\n  };\n\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\n\nexport { ModelPredicateCreator };","map":{"version":3,"sources":["../../src/predicates/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { exhaustiveCheck } from '../util';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n    return predicatesAllSet.has(predicate);\n}\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */ (function () {\n    function Predicates() {\n    }\n    Object.defineProperty(Predicates, \"ALL\", {\n        get: function () {\n            var predicate = (function (c) { return c; });\n            predicatesAllSet.add(predicate);\n            return predicate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Predicates;\n}());\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */ (function () {\n    function ModelPredicateCreator() {\n    }\n    ModelPredicateCreator.createPredicateBuilder = function (modelDefinition) {\n        var modelName = modelDefinition.name;\n        var fieldNames = new Set(Object.keys(modelDefinition.fields));\n        var handler;\n        var predicate = new Proxy({}, (handler = {\n            get: function (_target, propertyKey, receiver) {\n                var groupType = propertyKey;\n                switch (groupType) {\n                    case 'and':\n                    case 'or':\n                    case 'not':\n                        var result_1 = function (newPredicate) {\n                            var group = {\n                                type: groupType,\n                                predicates: [],\n                            };\n                            // Create a new recorder\n                            var tmpPredicateRecorder = new Proxy({}, handler);\n                            // Set the recorder group\n                            ModelPredicateCreator.predicateGroupsMap.set(tmpPredicateRecorder, group);\n                            // Apply the predicates to the recorder (this is the step that records the changes)\n                            newPredicate(tmpPredicateRecorder);\n                            // Push the group to the top-level recorder\n                            ModelPredicateCreator.predicateGroupsMap\n                                .get(receiver)\n                                .predicates.push(group);\n                            return receiver;\n                        };\n                        return result_1;\n                    default:\n                        exhaustiveCheck(groupType, false);\n                }\n                var field = propertyKey;\n                if (!fieldNames.has(field)) {\n                    throw new Error(\"Invalid field for model. field: \" + field + \", model: \" + modelName);\n                }\n                var result = function (operator, operand) {\n                    ModelPredicateCreator.predicateGroupsMap\n                        .get(receiver)\n                        .predicates.push({ field: field, operator: operator, operand: operand });\n                    return receiver;\n                };\n                return result;\n            },\n        }));\n        var group = {\n            type: 'and',\n            predicates: [],\n        };\n        ModelPredicateCreator.predicateGroupsMap.set(predicate, group);\n        return predicate;\n    };\n    ModelPredicateCreator.isValidPredicate = function (predicate) {\n        return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n    };\n    ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n        if (throwOnInvalid === void 0) { throwOnInvalid = true; }\n        if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n            throw new Error('The predicate is not valid');\n        }\n        return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n    };\n    ModelPredicateCreator.createFromExisting = function (modelDefinition, existing) {\n        if (!existing || !modelDefinition) {\n            return undefined;\n        }\n        return existing(ModelPredicateCreator.createPredicateBuilder(modelDefinition));\n    };\n    ModelPredicateCreator.createForId = function (modelDefinition, id) {\n        return ModelPredicateCreator.createPredicateBuilder(modelDefinition).id('eq', id);\n    };\n    ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n    return ModelPredicateCreator;\n}());\nexport { ModelPredicateCreator };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}