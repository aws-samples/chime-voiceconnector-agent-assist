{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport default function blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/language/blockStringValue.mjs"],"names":["blockStringValue","rawString","lines","split","commonIndent","i","length","line","indent","leadingWhitespace","_i","slice","isBlank","shift","pop","join","str"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;AAMA,eAAe,SAASA,gBAAT,CAA0BC,SAA1B,EAAqC;AAClD;AACA,MAAIC,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgB,cAAhB,CAAZ,CAFkD,CAEL;;AAE7C,MAAIC,YAAY,GAAG,IAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,IAAI,GAAGL,KAAK,CAACG,CAAD,CAAhB;AACA,QAAIG,MAAM,GAAGC,iBAAiB,CAACF,IAAD,CAA9B;;AAEA,QAAIC,MAAM,GAAGD,IAAI,CAACD,MAAd,KAAyBF,YAAY,KAAK,IAAjB,IAAyBI,MAAM,GAAGJ,YAA3D,CAAJ,EAA8E;AAC5EA,MAAAA,YAAY,GAAGI,MAAf;;AAEA,UAAIJ,YAAY,KAAK,CAArB,EAAwB;AACtB;AACD;AACF;AACF;;AAED,MAAIA,YAAJ,EAAkB;AAChB,SAAK,IAAIM,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGR,KAAK,CAACI,MAA5B,EAAoCI,EAAE,EAAtC,EAA0C;AACxCR,MAAAA,KAAK,CAACQ,EAAD,CAAL,GAAYR,KAAK,CAACQ,EAAD,CAAL,CAAUC,KAAV,CAAgBP,YAAhB,CAAZ;AACD;AACF,GAvBiD,CAuBhD;;;AAGF,SAAOF,KAAK,CAACI,MAAN,GAAe,CAAf,IAAoBM,OAAO,CAACV,KAAK,CAAC,CAAD,CAAN,CAAlC,EAA8C;AAC5CA,IAAAA,KAAK,CAACW,KAAN;AACD;;AAED,SAAOX,KAAK,CAACI,MAAN,GAAe,CAAf,IAAoBM,OAAO,CAACV,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAAN,CAAlC,EAA6D;AAC3DJ,IAAAA,KAAK,CAACY,GAAN;AACD,GAhCiD,CAgChD;;;AAGF,SAAOZ,KAAK,CAACa,IAAN,CAAW,IAAX,CAAP;AACD;;AAED,SAASN,iBAAT,CAA2BO,GAA3B,EAAgC;AAC9B,MAAIX,CAAC,GAAG,CAAR;;AAEA,SAAOA,CAAC,GAAGW,GAAG,CAACV,MAAR,KAAmBU,GAAG,CAACX,CAAD,CAAH,KAAW,GAAX,IAAkBW,GAAG,CAACX,CAAD,CAAH,KAAW,IAAhD,CAAP,EAA8D;AAC5DA,IAAAA,CAAC;AACF;;AAED,SAAOA,CAAP;AACD;;AAED,SAASO,OAAT,CAAiBI,GAAjB,EAAsB;AACpB,SAAOP,iBAAiB,CAACO,GAAD,CAAjB,KAA2BA,GAAG,CAACV,MAAtC;AACD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * Coffeescript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport default function blockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent < line.length && (commonIndent === null || indent < commonIndent)) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  if (commonIndent) {\n    for (var _i = 1; _i < lines.length; _i++) {\n      lines[_i] = lines[_i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}"]},"metadata":{},"sourceType":"module"}