{"ast":null,"code":"var util = require('../core').util;\n\nvar toBuffer = util.buffer.toBuffer;\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n * @param {Buffer} bytes\n *\n * @api private\n */\n\nfunction Int64(bytes) {\n  if (bytes.length !== 8) {\n    throw new Error('Int64 buffers must be exactly 8 bytes');\n  }\n\n  if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\n  this.bytes = bytes;\n}\n/**\n * @param {number} number\n * @returns {Int64}\n *\n * @api private\n */\n\n\nInt64.fromNumber = function (number) {\n  if (number > 9223372036854775807 || number < -9223372036854775808) {\n    throw new Error(number + ' is too large (or, if negative, too small) to represent as an Int64');\n  }\n\n  var bytes = new Uint8Array(8);\n\n  for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n    bytes[i] = remaining;\n  }\n\n  if (number < 0) {\n    negate(bytes);\n  }\n\n  return new Int64(bytes);\n};\n/**\n * @returns {number}\n *\n * @api private\n */\n\n\nInt64.prototype.valueOf = function () {\n  var bytes = this.bytes.slice(0);\n  var negative = bytes[0] & 128;\n\n  if (negative) {\n    negate(bytes);\n  }\n\n  return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\n};\n\nInt64.prototype.toString = function () {\n  return String(this.valueOf());\n};\n/**\n * @param {Buffer} bytes\n *\n * @api private\n */\n\n\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xFF;\n  }\n\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n\n    if (bytes[i] !== 0) {\n      break;\n    }\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  Int64: Int64\n};","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/@aws-amplify/core/node_modules/aws-sdk/lib/event-stream/int64.js"],"names":["util","require","toBuffer","buffer","Int64","bytes","length","Error","Buffer","isBuffer","fromNumber","number","Uint8Array","i","remaining","Math","abs","round","negate","prototype","valueOf","slice","negative","parseInt","toString","String","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBD,IAA9B;;AACA,IAAIE,QAAQ,GAAGF,IAAI,CAACG,MAAL,CAAYD,QAA3B;AAEA;;;;;;;;;;;AAUA,SAASE,KAAT,CAAeC,KAAf,EAAsB;AAClB,MAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACpB,UAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AACD,MAAI,CAACP,IAAI,CAACQ,MAAL,CAAYC,QAAZ,CAAqBJ,KAArB,CAAL,EAAkCA,KAAK,GAAGH,QAAQ,CAACG,KAAD,CAAhB;AAElC,OAAKA,KAAL,GAAaA,KAAb;AACH;AAED;;;;;;;;AAMAD,KAAK,CAACM,UAAN,GAAmB,UAASC,MAAT,EAAiB;AAChC,MAAIA,MAAM,GAAG,mBAAT,IAAgCA,MAAM,GAAG,CAAC,mBAA9C,EAAmE;AAC/D,UAAM,IAAIJ,KAAJ,CACFI,MAAM,GAAG,qEADP,CAAN;AAGH;;AAED,MAAIN,KAAK,GAAG,IAAIO,UAAJ,CAAe,CAAf,CAAZ;;AACA,OACI,IAAIC,CAAC,GAAG,CAAR,EAAWC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWN,MAAX,CAAT,CAD3B,EAEIE,CAAC,GAAG,CAAC,CAAL,IAAUC,SAAS,GAAG,CAF1B,EAGID,CAAC,IAAIC,SAAS,IAAI,GAHtB,EAIE;AACET,IAAAA,KAAK,CAACQ,CAAD,CAAL,GAAWC,SAAX;AACH;;AAED,MAAIH,MAAM,GAAG,CAAb,EAAgB;AACZO,IAAAA,MAAM,CAACb,KAAD,CAAN;AACH;;AAED,SAAO,IAAID,KAAJ,CAAUC,KAAV,CAAP;AACH,CArBD;AAuBA;;;;;;;AAKAD,KAAK,CAACe,SAAN,CAAgBC,OAAhB,GAA0B,YAAW;AACjC,MAAIf,KAAK,GAAG,KAAKA,KAAL,CAAWgB,KAAX,CAAiB,CAAjB,CAAZ;AACA,MAAIC,QAAQ,GAAGjB,KAAK,CAAC,CAAD,CAAL,GAAW,GAA1B;;AACA,MAAIiB,QAAJ,EAAc;AACVJ,IAAAA,MAAM,CAACb,KAAD,CAAN;AACH;;AAED,SAAOkB,QAAQ,CAAClB,KAAK,CAACmB,QAAN,CAAe,KAAf,CAAD,EAAwB,EAAxB,CAAR,IAAuCF,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAAvD,CAAP;AACH,CARD;;AAUAlB,KAAK,CAACe,SAAN,CAAgBK,QAAhB,GAA2B,YAAW;AAClC,SAAOC,MAAM,CAAC,KAAKL,OAAL,EAAD,CAAb;AACH,CAFD;AAIA;;;;;;;AAKA,SAASF,MAAT,CAAgBb,KAAhB,EAAuB;AACnB,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBR,IAAAA,KAAK,CAACQ,CAAD,CAAL,IAAY,IAAZ;AACH;;AACD,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAAC,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBR,IAAAA,KAAK,CAACQ,CAAD,CAAL;;AACA,QAAIR,KAAK,CAACQ,CAAD,CAAL,KAAa,CAAjB,EAAoB;AAChB;AACH;AACJ;AACJ;AAED;;;;;AAGAa,MAAM,CAACC,OAAP,GAAiB;AACbvB,EAAAA,KAAK,EAAEA;AADM,CAAjB","sourcesContent":["var util = require('../core').util;\nvar toBuffer = util.buffer.toBuffer;\n\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n * @param {Buffer} bytes\n *\n * @api private\n */\nfunction Int64(bytes) {\n    if (bytes.length !== 8) {\n        throw new Error('Int64 buffers must be exactly 8 bytes');\n    }\n    if (!util.Buffer.isBuffer(bytes)) bytes = toBuffer(bytes);\n\n    this.bytes = bytes;\n}\n\n/**\n * @param {number} number\n * @returns {Int64}\n *\n * @api private\n */\nInt64.fromNumber = function(number) {\n    if (number > 9223372036854775807 || number < -9223372036854775808) {\n        throw new Error(\n            number + ' is too large (or, if negative, too small) to represent as an Int64'\n        );\n    }\n\n    var bytes = new Uint8Array(8);\n    for (\n        var i = 7, remaining = Math.abs(Math.round(number));\n        i > -1 && remaining > 0;\n        i--, remaining /= 256\n    ) {\n        bytes[i] = remaining;\n    }\n\n    if (number < 0) {\n        negate(bytes);\n    }\n\n    return new Int64(bytes);\n};\n\n/**\n * @returns {number}\n *\n * @api private\n */\nInt64.prototype.valueOf = function() {\n    var bytes = this.bytes.slice(0);\n    var negative = bytes[0] & 128;\n    if (negative) {\n        negate(bytes);\n    }\n\n    return parseInt(bytes.toString('hex'), 16) * (negative ? -1 : 1);\n};\n\nInt64.prototype.toString = function() {\n    return String(this.valueOf());\n};\n\n/**\n * @param {Buffer} bytes\n *\n * @api private\n */\nfunction negate(bytes) {\n    for (var i = 0; i < 8; i++) {\n        bytes[i] ^= 0xFF;\n    }\n    for (var i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0) {\n            break;\n        }\n    }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n    Int64: Int64\n};\n"]},"metadata":{},"sourceType":"script"}