{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return \"Cannot spread fragment \\\"\".concat(fragName, \"\\\" within itself\").concat(via, \".\");\n}\nexport function NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var fragmentNames = cyclePath.slice(0, -1).map(function (s) {\n          return s.name.value;\n        });\n        context.reportError(new GraphQLError(cycleErrorMessage(spreadName, fragmentNames), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/validation/rules/NoFragmentCycles.mjs"],"names":["GraphQLError","cycleErrorMessage","fragName","spreadNames","via","length","join","concat","NoFragmentCycles","context","visitedFrags","Object","create","spreadPath","spreadPathIndexByName","OperationDefinition","FragmentDefinition","node","detectCycleRecursive","fragment","name","value","fragmentName","spreadNodes","getFragmentSpreads","selectionSet","i","spreadNode","spreadName","cycleIndex","push","undefined","spreadFragment","getFragment","cyclePath","slice","fragmentNames","map","s","reportError","pop"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function cycleErrorMessage(fragName, spreadNames) {\n  var via = spreadNames.length ? ' via ' + spreadNames.join(', ') : '';\n  return \"Cannot spread fragment \\\"\".concat(fragName, \"\\\" within itself\").concat(via, \".\");\n}\nexport function NoFragmentCycles(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  var visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  var spreadPath = []; // Position in the spread path\n\n  var spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    var fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    var spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (var i = 0; i < spreadNodes.length; i++) {\n      var spreadNode = spreadNodes[i];\n      var spreadName = spreadNode.name.value;\n      var cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        var spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        var cyclePath = spreadPath.slice(cycleIndex);\n        var fragmentNames = cyclePath.slice(0, -1).map(function (s) {\n          return s.name.value;\n        });\n        context.reportError(new GraphQLError(cycleErrorMessage(spreadName, fragmentNames), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}"]},"metadata":{},"sourceType":"module"}