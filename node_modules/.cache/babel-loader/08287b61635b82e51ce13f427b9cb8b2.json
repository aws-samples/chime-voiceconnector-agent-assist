{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\n\n\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/language/lexer.mjs"],"names":["syntaxError","blockStringValue","createLexer","source","options","startOfFileToken","Tok","TokenKind","SOF","lexer","lastToken","token","line","lineStart","advance","advanceLexer","lookahead","kind","EOF","next","readToken","COMMENT","Object","freeze","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","getTokenDesc","value","concat","charCodeAt","String","prototype","slice","start","end","column","prev","toJSON","inspect","printCharCode","code","isNaN","JSON","stringify","fromCharCode","toString","toUpperCase","body","bodyLength","length","pos","positionAfterWhitespace","col","call","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","firstCode","isFloat","readDigits","chunkStart","charCode","uniCharCode","rawValue","a","b","c","d","char2hex"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { syntaxError } from '../error';\nimport blockStringValue from './blockStringValue';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n/**\n * A helper function to describe a token as a string for debugging\n */\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\nvar charCodeAt = String.prototype.charCodeAt;\nvar slice = String.prototype.slice;\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\nTok.prototype.toJSON = Tok.prototype.inspect = function toJSON() {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n};\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace and comments until it finds the next lexable\n * token, then lexes punctuators immediately or calls the appropriate helper\n * function for more complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = charCodeAt.call(body, pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (charCodeAt.call(body, pos + 1) === 46 && charCodeAt.call(body, pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (charCodeAt.call(body, pos + 1) === 34 && charCodeAt.call(body, pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * or commented character, then returns the position of that character for\n * lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = charCodeAt.call(body, position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (charCodeAt.call(body, position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = charCodeAt.call(body, ++position);\n  } while (code !== null && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, slice.call(body, start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = charCodeAt.call(body, ++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = charCodeAt.call(body, ++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n    position = readDigits(source, position, code);\n    code = charCodeAt.call(body, position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = charCodeAt.call(body, ++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = charCodeAt.call(body, ++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, slice.call(body, start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = charCodeAt.call(body, ++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += slice.call(body, chunkStart, position - 1);\n      code = charCodeAt.call(body, position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(charCodeAt.call(body, position + 1), charCodeAt.call(body, position + 2), charCodeAt.call(body, position + 3), charCodeAt.call(body, position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && (code = charCodeAt.call(body, position)) !== null) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34) {\n      rawValue += slice.call(body, chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, blockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    } // Escape Triple-Quote (\\\"\"\")\n\n\n    if (code === 92 && charCodeAt.call(body, position + 1) === 34 && charCodeAt.call(body, position + 2) === 34 && charCodeAt.call(body, position + 3) === 34) {\n      rawValue += slice.call(body, chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexidecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && (code = charCodeAt.call(body, position)) !== null && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, slice.call(body, start, position));\n}"]},"metadata":{},"sourceType":"module"}