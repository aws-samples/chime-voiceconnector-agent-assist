{"ast":null,"code":"/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\nexport var DateUtils = {\n  /**\n   * Milliseconds to offset the date to compensate for clock skew between device & services\n   */\n  clockOffset: 0,\n  getDateWithClockOffset: function getDateWithClockOffset() {\n    if (DateUtils.clockOffset) {\n      return new Date(new Date().getTime() + DateUtils.clockOffset);\n    } else {\n      return new Date();\n    }\n  },\n\n  /**\n   * @returns {number} Clock offset in milliseconds\n   */\n  getClockOffset: function getClockOffset() {\n    return DateUtils.clockOffset;\n  },\n\n  /**\n   * @param {number} offset Clock offset in milliseconds\n   */\n  setClockOffset: function setClockOffset(offset) {\n    DateUtils.clockOffset = offset;\n  }\n};","map":{"version":3,"sources":["../../src/Util/DateUtils.ts"],"names":[],"mappings":"AAAA;;;;;;AAOA,OAAO,IAAM,SAAS,GAAG;AACxB;;;AAGA,EAAA,WAAW,EAAE,CAJW;AAMxB,EAAA,sBAAsB,EAAA,kCAAA;AACrB,QAAI,SAAS,CAAC,WAAd,EAA2B;AAC1B,aAAO,IAAI,IAAJ,CAAS,IAAI,IAAJ,GAAW,OAAX,KAAuB,SAAS,CAAC,WAA1C,CAAP;AACA,KAFD,MAEO;AACN,aAAO,IAAI,IAAJ,EAAP;AACA;AACD,GAZuB;;AAcxB;;;AAGA,EAAA,cAAc,EAAA,0BAAA;AACb,WAAO,SAAS,CAAC,WAAjB;AACA,GAnBuB;;AAqBxB;;;AAGA,EAAA,cAAc,EAAd,wBAAe,MAAf,EAA6B;AAC5B,IAAA,SAAS,CAAC,WAAV,GAAwB,MAAxB;AACA;AA1BuB,CAAlB","sourceRoot":"","sourcesContent":["/**\n * Date & time utility functions to abstract the `aws-sdk` away from users.\n * (v2 => v3 modularization is a breaking change)\n *\n * @see https://github.com/aws/aws-sdk-js/blob/6edf586dcc1de7fe8fbfbbd9a0d2b1847921e6e1/lib/util.js#L262\n */\nexport var DateUtils = {\n    /**\n     * Milliseconds to offset the date to compensate for clock skew between device & services\n     */\n    clockOffset: 0,\n    getDateWithClockOffset: function () {\n        if (DateUtils.clockOffset) {\n            return new Date(new Date().getTime() + DateUtils.clockOffset);\n        }\n        else {\n            return new Date();\n        }\n    },\n    /**\n     * @returns {number} Clock offset in milliseconds\n     */\n    getClockOffset: function () {\n        return DateUtils.clockOffset;\n    },\n    /**\n     * @param {number} offset Clock offset in milliseconds\n     */\n    setClockOffset: function (offset) {\n        DateUtils.clockOffset = offset;\n    },\n};\n//# sourceMappingURL=DateUtils.js.map"]},"metadata":{},"sourceType":"module"}