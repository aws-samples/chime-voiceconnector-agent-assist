{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\n\nvar EventsBuffer =\n/** @class */\nfunction () {\n  function EventsBuffer(client, config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._client = client;\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n\n    this._startLoop();\n  }\n\n  EventsBuffer.prototype.push = function (event) {\n    var _a;\n\n    if (this._buffer > this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n\n    this._buffer.push(bufferElement);\n  };\n\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n\n  EventsBuffer.prototype.updateClient = function (client) {\n    this._client = client;\n  };\n\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    }\n\n    if (this._pause || !bufferLength) {\n      return;\n    }\n\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n\n    var bufferSubset = this._buffer.splice(0, batchSize);\n\n    this._putEvents(bufferSubset);\n  };\n\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, data, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._client.putEvents(batchEventParams).promise()];\n\n          case 2:\n            data = _a.sent();\n\n            this._processPutEventsSuccessResponse(data, eventMap);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , this._handlePutEventsFailure(err_1, eventMap)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n          timestamp = params.timestamp,\n          config = params.config;\n      var name = event.name,\n          attributes = event.attributes,\n          metrics = event.metrics,\n          eventId = event.eventId,\n          session = event.session;\n      var appId = config.appId,\n          endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed:', err);\n    var statusCode = err.statusCode;\n\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n\n      this._retry(retryableEvents);\n\n      return;\n    }\n  };\n\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var Results = data.EventsResponse.Results;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var endpointId = _a[0],\n          endpointValues = _a[1];\n      var responses = endpointValues.EventsItemResponse;\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n\n        var eventId = _a[0],\n            _d = _a[1],\n            StatusCode = _d.StatusCode,\n            Message = _d.Message;\n        var eventObject = eventMap[eventId]; // manually crafting handlers response to keep API consistant\n\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n\n        if (ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n\n        if (RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a; // retryable events that haven't reached the resendLimit\n\n\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n\n      var params = event.params;\n      var _b = params.event,\n          eventId = _b.eventId,\n          name = _b.name;\n\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    }); // add the events to the front of the buffer\n\n    (_a = this._buffer).unshift.apply(_a, eligibleEvents);\n  }; // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n\n\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = Object.entries(curVal)[0],\n          key = _a[0],\n          value = _a[1];\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n\n  return EventsBuffer;\n}();\n\nexport default EventsBuffer;","map":{"version":3,"sources":["../../src/Providers/EventBuffer.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */ (function () {\n    function EventsBuffer(client, config) {\n        this._pause = false;\n        this._flush = false;\n        logger.debug('Instantiating buffer with config:', config);\n        this._buffer = [];\n        this._client = client;\n        this._config = config;\n        this._sendBatch = this._sendBatch.bind(this);\n        this._startLoop();\n    }\n    EventsBuffer.prototype.push = function (event) {\n        var _a;\n        if (this._buffer > this._config.bufferSize) {\n            logger.debug('Exceeded analytics events buffer size');\n            return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n        }\n        var eventId = event.params.event.eventId;\n        var bufferElement = (_a = {}, _a[eventId] = event, _a);\n        this._buffer.push(bufferElement);\n    };\n    EventsBuffer.prototype.pause = function () {\n        this._pause = true;\n    };\n    EventsBuffer.prototype.resume = function () {\n        this._pause = false;\n    };\n    EventsBuffer.prototype.updateClient = function (client) {\n        this._client = client;\n    };\n    EventsBuffer.prototype.flush = function () {\n        this._flush = true;\n    };\n    EventsBuffer.prototype._startLoop = function () {\n        if (this._interval) {\n            clearInterval(this._interval);\n        }\n        var flushInterval = this._config.flushInterval;\n        this._interval = setInterval(this._sendBatch, flushInterval);\n    };\n    EventsBuffer.prototype._sendBatch = function () {\n        var bufferLength = this._buffer.length;\n        if (this._flush && !bufferLength) {\n            clearInterval(this._interval);\n        }\n        if (this._pause || !bufferLength) {\n            return;\n        }\n        var flushSize = this._config.flushSize;\n        var batchSize = Math.min(flushSize, bufferLength);\n        var bufferSubset = this._buffer.splice(0, batchSize);\n        this._putEvents(bufferSubset);\n    };\n    EventsBuffer.prototype._putEvents = function (buffer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var eventMap, batchEventParams, data, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        eventMap = this._bufferToMap(buffer);\n                        batchEventParams = this._generateBatchEventParams(eventMap);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._client.putEvents(batchEventParams).promise()];\n                    case 2:\n                        data = _a.sent();\n                        this._processPutEventsSuccessResponse(data, eventMap);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _a.sent();\n                        return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n        var batchEventParams = {\n            ApplicationId: '',\n            EventsRequest: {\n                BatchItem: {},\n            },\n        };\n        Object.values(eventMap).forEach(function (item) {\n            var params = item.params;\n            var event = params.event, timestamp = params.timestamp, config = params.config;\n            var name = event.name, attributes = event.attributes, metrics = event.metrics, eventId = event.eventId, session = event.session;\n            var appId = config.appId, endpointId = config.endpointId;\n            var batchItem = batchEventParams.EventsRequest.BatchItem;\n            batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n            if (!batchItem[endpointId]) {\n                batchItem[endpointId] = {\n                    Endpoint: {},\n                    Events: {},\n                };\n            }\n            batchItem[endpointId].Events[eventId] = {\n                EventType: name,\n                Timestamp: new Date(timestamp).toISOString(),\n                Attributes: attributes,\n                Metrics: metrics,\n                Session: session,\n            };\n        });\n        return batchEventParams;\n    };\n    EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n        logger.debug('_putEvents Failed:', err);\n        var statusCode = err.statusCode;\n        if (RETRYABLE_CODES.includes(statusCode)) {\n            var retryableEvents = Object.values(eventMap);\n            this._retry(retryableEvents);\n            return;\n        }\n    };\n    EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n        var Results = data.EventsResponse.Results;\n        var retryableEvents = [];\n        Object.entries(Results).forEach(function (_a) {\n            var endpointId = _a[0], endpointValues = _a[1];\n            var responses = endpointValues.EventsItemResponse;\n            Object.entries(responses).forEach(function (_a) {\n                var _b, _c;\n                var eventId = _a[0], _d = _a[1], StatusCode = _d.StatusCode, Message = _d.Message;\n                var eventObject = eventMap[eventId];\n                // manually crafting handlers response to keep API consistant\n                var response = {\n                    EventsResponse: {\n                        Results: (_b = {},\n                            _b[endpointId] = {\n                                EventsItemResponse: (_c = {},\n                                    _c[eventId] = { StatusCode: StatusCode, Message: Message },\n                                    _c),\n                            },\n                            _b),\n                    },\n                };\n                if (ACCEPTED_CODES.includes(StatusCode)) {\n                    eventObject.handlers.resolve(response);\n                    return;\n                }\n                if (RETRYABLE_CODES.includes(StatusCode)) {\n                    retryableEvents.push(eventObject);\n                    return;\n                }\n                var name = eventObject.params.event.name;\n                logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n                return eventObject.handlers.reject(response);\n            });\n        });\n        if (retryableEvents.length) {\n            this._retry(retryableEvents);\n        }\n    };\n    EventsBuffer.prototype._retry = function (retryableEvents) {\n        var _a;\n        // retryable events that haven't reached the resendLimit\n        var eligibleEvents = [];\n        retryableEvents.forEach(function (event) {\n            var _a;\n            var params = event.params;\n            var _b = params.event, eventId = _b.eventId, name = _b.name;\n            if (params.resendLimit-- > 0) {\n                logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n                eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n                return;\n            }\n            logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n        });\n        // add the events to the front of the buffer\n        (_a = this._buffer).unshift.apply(_a, eligibleEvents);\n    };\n    // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n    // this allows us to easily access the handlers after receiving a batch response\n    EventsBuffer.prototype._bufferToMap = function (buffer) {\n        return buffer.reduce(function (acc, curVal) {\n            var _a = Object.entries(curVal)[0], key = _a[0], value = _a[1];\n            acc[key] = value;\n            return acc;\n        }, {});\n    };\n    return EventsBuffer;\n}());\nexport default EventsBuffer;\n//# sourceMappingURL=EventBuffer.js.map"]},"metadata":{},"sourceType":"module"}