{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n// The primary entry point into fulfilling a GraphQL request.\nexport { graphql, graphqlSync } from './graphql'; // Create and operate on GraphQL type definitions and schema.\n\nexport { GraphQLSchema // Definitions\n, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLDirective // \"Enum\" of Type Kinds\n, TypeKind // Scalars\n, specifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID // Built-in Directives defined by the Spec\n, specifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective // Constant Deprecation Reason\n, DEFAULT_DEPRECATION_REASON // Meta-field definitions.\n, SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef // GraphQL Types for introspection.\n, introspectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind // Predicates\n, isSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective // Assertions\n, assertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType // Un-modifiers\n, getNullableType, getNamedType // Validate GraphQL schema.\n, validateSchema, assertValidSchema } from './type'; // Parse and operate on GraphQL language source files.\n\nexport { Source, getLocation // Parse\n, parse, parseValue, parseType // Print\n, print // Visit\n, visit, visitInParallel, visitWithTypeInfo, getVisitFn, Kind, TokenKind, DirectiveLocation, BREAK // Predicates\n, isDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './language'; // Execute GraphQL queries.\n\nexport { execute, defaultFieldResolver, responsePathAsArray, getDirectiveValues } from './execution';\nexport { subscribe, createSourceEventStream } from './subscription'; // Validate GraphQL queries.\n\nexport { validate, ValidationContext // All validation rules in the GraphQL Specification.\n, specifiedRules // Individual validation rules.\n, FieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule } from './validation'; // Create, format, and print GraphQL errors.\n\nexport { GraphQLError, formatError, printError } from './error'; // Utilities for operating on GraphQL type schema and parsed sources.\n\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery // @deprecated: use getIntrospectionQuery - will be removed in v15\n, introspectionQuery // Gets the target Operation from a Document\n, getOperationAST // Gets the Type for the target Operation AST.\n, getOperationRootType // Convert a GraphQLSchema to an IntrospectionQuery\n, introspectionFromSchema // Build a GraphQLSchema from an introspection result.\n, buildClientSchema // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\n, buildASTSchema // Build a GraphQLSchema from a GraphQL schema language document.\n, buildSchema // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16\n, getDescription // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\n, extendSchema // Sort a GraphQLSchema.\n, lexicographicSortSchema // Print a GraphQLSchema to GraphQL Schema language.\n, printSchema // Prints the built-in introspection schema in the Schema Language\n// format.\n, printIntrospectionSchema // Print a GraphQLType to GraphQL Schema language.\n, printType // Create a GraphQLType from a GraphQL language AST.\n, typeFromAST // Create a JavaScript value from a GraphQL language AST with a Type.\n, valueFromAST // Create a JavaScript value from a GraphQL language AST without a Type.\n, valueFromASTUntyped // Create a GraphQL language AST from a JavaScript value.\n, astFromValue // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n, TypeInfo // Coerces a JavaScript value to a GraphQL type, or produces errors.\n, coerceValue // @deprecated use coerceValue - will be removed in v15\n, isValidJSValue // @deprecated use validation - will be removed in v15\n, isValidLiteralValue // Concatenates multiple AST together.\n, concatAST // Separates an AST into an AST per Operation.\n, separateOperations // Comparators for types\n, isEqualType, isTypeSubTypeOf, doTypesOverlap // Asserts a string is a valid GraphQL name.\n, assertValidName // Determine if a string is a valid GraphQL name.\n, isValidNameError // Compares two GraphQLSchemas and detects breaking changes.\n, findBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType // Report all deprecated usage within a GraphQL document.\n, findDeprecatedUsages } from './utilities';","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/index.mjs"],"names":["graphql","graphqlSync","GraphQLSchema","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","GraphQLDirective","TypeKind","specifiedScalarTypes","GraphQLInt","GraphQLFloat","GraphQLString","GraphQLBoolean","GraphQLID","specifiedDirectives","GraphQLIncludeDirective","GraphQLSkipDirective","GraphQLDeprecatedDirective","DEFAULT_DEPRECATION_REASON","SchemaMetaFieldDef","TypeMetaFieldDef","TypeNameMetaFieldDef","introspectionTypes","__Schema","__Directive","__DirectiveLocation","__Type","__Field","__InputValue","__EnumValue","__TypeKind","isSchema","isDirective","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isInputType","isOutputType","isLeafType","isCompositeType","isAbstractType","isWrappingType","isNullableType","isNamedType","isRequiredArgument","isRequiredInputField","isSpecifiedScalarType","isIntrospectionType","isSpecifiedDirective","assertType","assertScalarType","assertObjectType","assertInterfaceType","assertUnionType","assertEnumType","assertInputObjectType","assertListType","assertNonNullType","assertInputType","assertOutputType","assertLeafType","assertCompositeType","assertAbstractType","assertWrappingType","assertNullableType","assertNamedType","getNullableType","getNamedType","validateSchema","assertValidSchema","Source","getLocation","parse","parseValue","parseType","print","visit","visitInParallel","visitWithTypeInfo","getVisitFn","Kind","TokenKind","DirectiveLocation","BREAK","isDefinitionNode","isExecutableDefinitionNode","isSelectionNode","isValueNode","isTypeNode","isTypeSystemDefinitionNode","isTypeDefinitionNode","isTypeSystemExtensionNode","isTypeExtensionNode","execute","defaultFieldResolver","responsePathAsArray","getDirectiveValues","subscribe","createSourceEventStream","validate","ValidationContext","specifiedRules","FieldsOnCorrectTypeRule","FragmentsOnCompositeTypesRule","KnownArgumentNamesRule","KnownDirectivesRule","KnownFragmentNamesRule","KnownTypeNamesRule","LoneAnonymousOperationRule","NoFragmentCyclesRule","NoUndefinedVariablesRule","NoUnusedFragmentsRule","NoUnusedVariablesRule","OverlappingFieldsCanBeMergedRule","PossibleFragmentSpreadsRule","ProvidedRequiredArgumentsRule","ScalarLeafsRule","SingleFieldSubscriptionsRule","UniqueArgumentNamesRule","UniqueDirectivesPerLocationRule","UniqueFragmentNamesRule","UniqueInputFieldNamesRule","UniqueOperationNamesRule","UniqueVariableNamesRule","ValuesOfCorrectTypeRule","VariablesAreInputTypesRule","VariablesInAllowedPositionRule","GraphQLError","formatError","printError","getIntrospectionQuery","introspectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","getDescription","extendSchema","lexicographicSortSchema","printSchema","printIntrospectionSchema","printType","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","coerceValue","isValidJSValue","isValidLiteralValue","concatAST","separateOperations","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","findBreakingChanges","findDangerousChanges","BreakingChangeType","DangerousChangeType","findDeprecatedUsages"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * GraphQL.js provides a reference implementation for the GraphQL specification\n * but is also a useful utility for operating on GraphQL files and building\n * sophisticated tools.\n *\n * This primary module exports a general purpose function for fulfilling all\n * steps of the GraphQL specification in a single operation, but also includes\n * utilities for every part of the GraphQL specification:\n *\n *   - Parsing the GraphQL language.\n *   - Building a GraphQL type schema.\n *   - Validating a GraphQL request against a type schema.\n *   - Executing a GraphQL request against a type schema.\n *\n * This also includes utility functions for operating on GraphQL types and\n * GraphQL documents to facilitate building tools.\n *\n * You may also import from each sub-directory directly. For example, the\n * following two import statements are equivalent:\n *\n *     import { parse } from 'graphql';\n *     import { parse } from 'graphql/language';\n */\n// The primary entry point into fulfilling a GraphQL request.\nexport { graphql, graphqlSync } from './graphql'; // Create and operate on GraphQL type definitions and schema.\n\nexport { GraphQLSchema, // Definitions\nGraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLDirective, // \"Enum\" of Type Kinds\nTypeKind, // Scalars\nspecifiedScalarTypes, GraphQLInt, GraphQLFloat, GraphQLString, GraphQLBoolean, GraphQLID, // Built-in Directives defined by the Spec\nspecifiedDirectives, GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, // Constant Deprecation Reason\nDEFAULT_DEPRECATION_REASON, // Meta-field definitions.\nSchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef, // GraphQL Types for introspection.\nintrospectionTypes, __Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind, // Predicates\nisSchema, isDirective, isType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isInputType, isOutputType, isLeafType, isCompositeType, isAbstractType, isWrappingType, isNullableType, isNamedType, isRequiredArgument, isRequiredInputField, isSpecifiedScalarType, isIntrospectionType, isSpecifiedDirective, // Assertions\nassertType, assertScalarType, assertObjectType, assertInterfaceType, assertUnionType, assertEnumType, assertInputObjectType, assertListType, assertNonNullType, assertInputType, assertOutputType, assertLeafType, assertCompositeType, assertAbstractType, assertWrappingType, assertNullableType, assertNamedType, // Un-modifiers\ngetNullableType, getNamedType, // Validate GraphQL schema.\nvalidateSchema, assertValidSchema } from './type';\n// Parse and operate on GraphQL language source files.\nexport { Source, getLocation, // Parse\nparse, parseValue, parseType, // Print\nprint, // Visit\nvisit, visitInParallel, visitWithTypeInfo, getVisitFn, Kind, TokenKind, DirectiveLocation, BREAK, // Predicates\nisDefinitionNode, isExecutableDefinitionNode, isSelectionNode, isValueNode, isTypeNode, isTypeSystemDefinitionNode, isTypeDefinitionNode, isTypeSystemExtensionNode, isTypeExtensionNode } from './language';\n// Execute GraphQL queries.\nexport { execute, defaultFieldResolver, responsePathAsArray, getDirectiveValues } from './execution';\nexport { subscribe, createSourceEventStream } from './subscription'; // Validate GraphQL queries.\n\nexport { validate, ValidationContext, // All validation rules in the GraphQL Specification.\nspecifiedRules, // Individual validation rules.\nFieldsOnCorrectTypeRule, FragmentsOnCompositeTypesRule, KnownArgumentNamesRule, KnownDirectivesRule, KnownFragmentNamesRule, KnownTypeNamesRule, LoneAnonymousOperationRule, NoFragmentCyclesRule, NoUndefinedVariablesRule, NoUnusedFragmentsRule, NoUnusedVariablesRule, OverlappingFieldsCanBeMergedRule, PossibleFragmentSpreadsRule, ProvidedRequiredArgumentsRule, ScalarLeafsRule, SingleFieldSubscriptionsRule, UniqueArgumentNamesRule, UniqueDirectivesPerLocationRule, UniqueFragmentNamesRule, UniqueInputFieldNamesRule, UniqueOperationNamesRule, UniqueVariableNamesRule, ValuesOfCorrectTypeRule, VariablesAreInputTypesRule, VariablesInAllowedPositionRule } from './validation'; // Create, format, and print GraphQL errors.\n\nexport { GraphQLError, formatError, printError } from './error';\n// Utilities for operating on GraphQL type schema and parsed sources.\nexport { // Produce the GraphQL query recommended for a full schema introspection.\n// Accepts optional IntrospectionOptions.\ngetIntrospectionQuery, // @deprecated: use getIntrospectionQuery - will be removed in v15\nintrospectionQuery, // Gets the target Operation from a Document\ngetOperationAST, // Gets the Type for the target Operation AST.\ngetOperationRootType, // Convert a GraphQLSchema to an IntrospectionQuery\nintrospectionFromSchema, // Build a GraphQLSchema from an introspection result.\nbuildClientSchema, // Build a GraphQLSchema from a parsed GraphQL Schema language AST.\nbuildASTSchema, // Build a GraphQLSchema from a GraphQL schema language document.\nbuildSchema, // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16\ngetDescription, // Extends an existing GraphQLSchema from a parsed GraphQL Schema\n// language AST.\nextendSchema, // Sort a GraphQLSchema.\nlexicographicSortSchema, // Print a GraphQLSchema to GraphQL Schema language.\nprintSchema, // Prints the built-in introspection schema in the Schema Language\n// format.\nprintIntrospectionSchema, // Print a GraphQLType to GraphQL Schema language.\nprintType, // Create a GraphQLType from a GraphQL language AST.\ntypeFromAST, // Create a JavaScript value from a GraphQL language AST with a Type.\nvalueFromAST, // Create a JavaScript value from a GraphQL language AST without a Type.\nvalueFromASTUntyped, // Create a GraphQL language AST from a JavaScript value.\nastFromValue, // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\nTypeInfo, // Coerces a JavaScript value to a GraphQL type, or produces errors.\ncoerceValue, // @deprecated use coerceValue - will be removed in v15\nisValidJSValue, // @deprecated use validation - will be removed in v15\nisValidLiteralValue, // Concatenates multiple AST together.\nconcatAST, // Separates an AST into an AST per Operation.\nseparateOperations, // Comparators for types\nisEqualType, isTypeSubTypeOf, doTypesOverlap, // Asserts a string is a valid GraphQL name.\nassertValidName, // Determine if a string is a valid GraphQL name.\nisValidNameError, // Compares two GraphQLSchemas and detects breaking changes.\nfindBreakingChanges, findDangerousChanges, BreakingChangeType, DangerousChangeType, // Report all deprecated usage within a GraphQL document.\nfindDeprecatedUsages } from './utilities';"]},"metadata":{},"sourceType":"module"}