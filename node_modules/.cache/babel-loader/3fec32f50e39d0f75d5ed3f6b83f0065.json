{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateVariableMessage(variableName) {\n  return \"There can be only one variable named \\\"\".concat(variableName, \"\\\".\");\n}\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\nexport function UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/validation/rules/UniqueVariableNames.mjs"],"names":["GraphQLError","duplicateVariableMessage","variableName","concat","UniqueVariableNames","context","knownVariableNames","Object","create","OperationDefinition","VariableDefinition","node","variable","name","value","reportError"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,wBAAT,CAAkCC,YAAlC,EAAgD;AACrD,SAAO,0CAA0CC,MAA1C,CAAiDD,YAAjD,EAA+D,KAA/D,CAAP;AACD;AACD;;;;;;AAMA,OAAO,SAASE,mBAAT,CAA6BC,OAA7B,EAAsC;AAC3C,MAAIC,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAzB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClDH,MAAAA,kBAAkB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAArB;AACD,KAHI;AAILE,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACpD,UAAIT,YAAY,GAAGS,IAAI,CAACC,QAAL,CAAcC,IAAd,CAAmBC,KAAtC;;AAEA,UAAIR,kBAAkB,CAACJ,YAAD,CAAtB,EAAsC;AACpCG,QAAAA,OAAO,CAACU,WAAR,CAAoB,IAAIf,YAAJ,CAAiBC,wBAAwB,CAACC,YAAD,CAAzC,EAAyD,CAACI,kBAAkB,CAACJ,YAAD,CAAnB,EAAmCS,IAAI,CAACC,QAAL,CAAcC,IAAjD,CAAzD,CAApB;AACD,OAFD,MAEO;AACLP,QAAAA,kBAAkB,CAACJ,YAAD,CAAlB,GAAmCS,IAAI,CAACC,QAAL,CAAcC,IAAjD;AACD;AACF;AAZI,GAAP;AAcD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function duplicateVariableMessage(variableName) {\n  return \"There can be only one variable named \\\"\".concat(variableName, \"\\\".\");\n}\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\n\nexport function UniqueVariableNames(context) {\n  var knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition: function OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n    VariableDefinition: function VariableDefinition(node) {\n      var variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(duplicateVariableMessage(variableName), [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}