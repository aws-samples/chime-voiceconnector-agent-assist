{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport API from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport { buildGraphQLOperation } from '../utils';\nimport { jitteredExponentialRetry } from '@aws-amplify/core';\nvar DEFAULT_PAGINATION_LIMIT = 100;\nvar DEFAULT_MAX_RECORDS_TO_SYNC = 10000;\n\nvar SyncProcessor =\n/** @class */\nfunction () {\n  function SyncProcessor(schema, maxRecordsToSync, syncPageSize) {\n    if (maxRecordsToSync === void 0) {\n      maxRecordsToSync = DEFAULT_MAX_RECORDS_TO_SYNC;\n    }\n\n    if (syncPageSize === void 0) {\n      syncPageSize = DEFAULT_PAGINATION_LIMIT;\n    }\n\n    this.schema = schema;\n    this.maxRecordsToSync = maxRecordsToSync;\n    this.syncPageSize = syncPageSize;\n    this.typeQuery = new WeakMap();\n    this.generateQueries();\n  }\n\n  SyncProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = buildGraphQLOperation(namespace, model, 'LIST')[0],\n            opNameQuery = _a.slice(1);\n\n        _this.typeQuery.set(model, opNameQuery);\n      });\n    });\n  };\n\n  SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit) {\n    if (limit === void 0) {\n      limit = null;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, opName, query, variables, data, _b, opResult, items, newNextToken, startedAt;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _a = this.typeQuery.get(modelDefinition), opName = _a[0], query = _a[1];\n            variables = {\n              limit: limit,\n              nextToken: nextToken,\n              lastSync: lastSync\n            };\n            return [4\n            /*yield*/\n            , this.jitteredRetry(query, variables)];\n\n          case 1:\n            data = _c.sent().data;\n            _b = opName, opResult = data[_b];\n            items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n            return [2\n            /*return*/\n            , {\n              nextToken: newNextToken,\n              startedAt: startedAt,\n              items: items\n            }];\n        }\n      });\n    });\n  };\n\n  SyncProcessor.prototype.jitteredRetry = function (query, variables) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(function (query, variables) {\n              return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , API.graphql({\n                        query: query,\n                        variables: variables\n                      })];\n\n                    case 1:\n                      return [2\n                      /*return*/\n                      , _a.sent()];\n                  }\n                });\n              });\n            }, [query, variables])];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  SyncProcessor.prototype.start = function (typesLastSync) {\n    var _this = this;\n\n    var processing = true;\n    var maxRecordsToSync = this.maxRecordsToSync !== undefined ? this.maxRecordsToSync : DEFAULT_MAX_RECORDS_TO_SYNC;\n    var syncPageSize = this.syncPageSize !== undefined ? this.syncPageSize : DEFAULT_PAGINATION_LIMIT;\n    var parentPromises = new Map();\n    var observable = new Observable(function (observer) {\n      var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n        for (var _i = 0, _a = Array.from(namespace.modelTopologicalOrdering.keys()); _i < _a.length; _i++) {\n          var modelName = _a[_i];\n          var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n          map.set(namespace.models[modelName], typeLastSync);\n        }\n\n        return map;\n      }, new Map());\n      var allModelsReady = Array.from(sortedTypesLastSyncs.entries()).filter(function (_a) {\n        var syncable = _a[0].syncable;\n        return syncable;\n      }).map(function (_a) {\n        var modelDefinition = _a[0],\n            _b = _a[1],\n            namespace = _b[0],\n            lastSync = _b[1];\n        return __awaiter(_this, void 0, void 0, function () {\n          var done, nextToken, startedAt, items, recordsReceived, parents, promises, promise;\n\n          var _this = this;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                done = false;\n                nextToken = null;\n                startedAt = null;\n                items = null;\n                recordsReceived = 0;\n                parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                promises = parents.map(function (parent) {\n                  return parentPromises.get(namespace + \"_\" + parent);\n                });\n                promise = new Promise(function (res) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var limit;\n\n                    var _a;\n\n                    return __generator(this, function (_b) {\n                      switch (_b.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , Promise.all(promises)];\n\n                        case 1:\n                          _b.sent();\n\n                          _b.label = 2;\n\n                        case 2:\n                          if (!processing) {\n                            return [2\n                            /*return*/\n                            ];\n                          }\n\n                          limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                          return [4\n                          /*yield*/\n                          , this.retrievePage(modelDefinition, lastSync, nextToken, limit)];\n\n                        case 3:\n                          _a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt;\n                          recordsReceived += items.length;\n                          done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                          observer.next({\n                            namespace: namespace,\n                            modelDefinition: modelDefinition,\n                            items: items,\n                            done: done,\n                            startedAt: startedAt,\n                            isFullSync: !lastSync\n                          });\n                          _b.label = 4;\n\n                        case 4:\n                          if (!done) return [3\n                          /*break*/\n                          , 2];\n                          _b.label = 5;\n\n                        case 5:\n                          res();\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                });\n                parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                return [4\n                /*yield*/\n                , promise];\n\n              case 1:\n                _c.sent();\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n      Promise.all(allModelsReady).then(function () {\n        observer.complete();\n      });\n      return function () {\n        processing = false;\n      };\n    });\n    return observable;\n  };\n\n  return SyncProcessor;\n}();\n\nexport { SyncProcessor };","map":{"version":3,"sources":["../../../src/sync/processors/sync.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,GAAP,MAAmC,kBAAnC;AACA,OAAO,UAAP,MAAuB,mBAAvB;AAMA,SAAS,qBAAT,QAAsC,UAAtC;AACA,SAAS,wBAAT,QAAyC,mBAAzC;AAEA,IAAM,wBAAwB,GAAG,GAAjC;AACA,IAAM,2BAA2B,GAAG,KAApC;;AAEA,IAAA,aAAA;AAAA;AAAA,YAAA;AAGC,WAAA,aAAA,CACkB,MADlB,EAEkB,gBAFlB,EAGkB,YAHlB,EAGiE;AAD/C,QAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,gBAAA,GAAA,2BAAA;AAAsD;;AACtD,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,wBAAA;AAA+C;;AAF/C,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AACA,SAAA,YAAA,GAAA,YAAA;AALD,SAAA,SAAA,GAAY,IAAI,OAAJ,EAAZ;AAOhB,SAAK,eAAL;AACA;;AAEO,EAAA,aAAA,CAAA,SAAA,CAAA,eAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACC,IAAA,MAAM,CAAC,MAAP,CAAc,KAAK,MAAL,CAAY,UAA1B,EAAsC,OAAtC,CAA8C,UAAA,SAAA,EAAS;AACtD,MAAA,MAAM,CAAC,MAAP,CAAc,SAAS,CAAC,MAAxB,EACE,MADF,CACS,UAAC,EAAD,EAAa;YAAV,QAAA,GAAA,EAAA,CAAA,Q;AAAe,eAAA,QAAA;AAAQ,OADnC,EAEE,OAFF,CAEU,UAAA,KAAA,EAAK;AACN,YAAA,EAAA,GAAA,qBAAA,CAAA,SAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YAAG,WAAA,GAAA,EAAA,CAAA,KAAA,CAAA,CAAA,CAAH;;AAMP,QAAA,KAAI,CAAC,SAAL,CAAe,GAAf,CAAmB,KAAnB,EAA0B,WAA1B;AACA,OAVF;AAWA,KAZD;AAaA,GAdO;;AAgBM,EAAA,aAAA,CAAA,SAAA,CAAA,YAAA,GAAd,UAGC,eAHD,EAIC,QAJD,EAKC,SALD,EAMC,KAND,EAMqB;AAApB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,IAAA;AAAoB;;;;;;;;AAEd,YAAA,EAAA,GAAkB,KAAK,SAAL,CAAe,GAAf,CAAmB,eAAnB,CAAlB,EAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP,EAAS,KAAK,GAAA,EAAA,CAAA,CAAA,CAAd;AAEA,YAAA,SAAS,GAAG;AACjB,cAAA,KAAK,EAAA,KADY;AAEjB,cAAA,SAAS,EAAA,SAFQ;AAGjB,cAAA,QAAQ,EAAA;AAHS,aAAZ;AAeL,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,aAAL,CAAsB,KAAtB,EAA6B,SAA7B,CAAN,CAAA;;;AARO,YAAA,IAAI,GAQX,EAAA,CAAA,IAAA,EARgB,CAAL,IAAJ;AAUA,YAAA,EAAA,GAAC,MAAD,EAAU,QAAQ,GAAK,IAAI,CAAT,EAAS,CAA3B;AAEA,YAAA,KAAK,GAAyC,QAAQ,CAAjD,KAAL,EAAkB,YAAY,GAAgB,QAAQ,CAAxB,SAA9B,EAAgC,SAAS,GAAK,QAAQ,CAAb,SAAzC;AAER,mBAAA,CAAA;AAAA;AAAA,cAAO;AAAE,cAAA,SAAS,EAAE,YAAb;AAA2B,cAAA,SAAS,EAAA,SAApC;AAAsC,cAAA,KAAK,EAAA;AAA3C,aAAP,CAAA;;;;AACA,GAhCa;;AAkCA,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAd,UACC,KADD,EAEC,SAFD,EAEkE;;;;;;;AAU1D,mBAAA,CAAA;AAAA;AAAA,cAAM,wBAAwB,CACpC,UAAO,KAAP,EAAc,SAAd,EAAuB;AAAA,qBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AACf,6BAAA,CAAA;AAAA;AAAA,wBAAM,GAAG,CAAC,OAAJ,CAAY;AACxB,wBAAA,KAAK,EAAA,KADmB;AAExB,wBAAA,SAAS,EAAA;AAFe,uBAAZ,CAAN,CAAA;;;AAAP,6BAAA,CAAA;AAAA;AAAA,wBAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;eADsB,CAAA;AAKtB,aANmC,EAOpC,CAAC,KAAD,EAAQ,SAAR,CAPoC,CAA9B,CAAA;;;AAAP,mBAAA,CAAA;AAAA;AAAA,cAAO,EAAA,CAAA,IAAA,EAAP,CAAA;;;;AASA,GArBa;;AAuBd,EAAA,aAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UACC,aADD,EACkD;AADlD,QAAA,KAAA,GAAA,IAAA;;AAGC,QAAI,UAAU,GAAG,IAAjB;AAEA,QAAM,gBAAgB,GACrB,KAAK,gBAAL,KAA0B,SAA1B,GACG,KAAK,gBADR,GAEG,2BAHJ;AAKA,QAAM,YAAY,GACjB,KAAK,YAAL,KAAsB,SAAtB,GACG,KAAK,YADR,GAEG,wBAHJ;AAKA,QAAM,cAAc,GAAG,IAAI,GAAJ,EAAvB;AAEA,QAAM,UAAU,GAAG,IAAI,UAAJ,CAA8B,UAAA,QAAA,EAAQ;AACxD,UAAM,oBAAoB,GAAG,MAAM,CAAC,MAAP,CAAc,KAAI,CAAC,MAAL,CAAY,UAA1B,EAAsC,MAAtC,CAC5B,UAAC,GAAD,EAAM,SAAN,EAAe;AACd,aAAwB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,CAAC,IAAN,CACvB,SAAS,CAAC,wBAAV,CAAmC,IAAnC,EADuB,CAAxB,EAAwB,EAAA,GAAA,EAAA,CAAA,MAAxB,EAAwB,EAAA,EAAxB,EAEG;AAFE,cAAM,SAAS,GAAA,EAAA,CAAA,EAAA,CAAf;AAGJ,cAAM,YAAY,GAAG,aAAa,CAAC,GAAd,CAAkB,SAAS,CAAC,MAAV,CAAiB,SAAjB,CAAlB,CAArB;AACA,UAAA,GAAG,CAAC,GAAJ,CAAQ,SAAS,CAAC,MAAV,CAAiB,SAAjB,CAAR,EAAqC,YAArC;AACA;;AACD,eAAO,GAAP;AACA,OAT2B,EAU5B,IAAI,GAAJ,EAV4B,CAA7B;AAaA,UAAM,cAAc,GAAG,KAAK,CAAC,IAAN,CAAW,oBAAoB,CAAC,OAArB,EAAX,EACrB,MADqB,CACd,UAAC,EAAD,EAAe;YAAX,QAAA,GAAA,EAAA,CAAA,CAAA,CAAA,CAAA,Q;AAAgB,eAAA,QAAA;AAAQ,OADd,EAErB,GAFqB,CAEjB,UAAO,EAAP,EAA+C;YAAvC,eAAA,GAAA,EAAA,CAAA,CAAA,C;YAAiB,EAAA,GAAA,EAAA,CAAA,CAAA,C;YAAC,SAAA,GAAA,EAAA,CAAA,CAAA,C;YAAW,QAAA,GAAA,EAAA,CAAA,CAAA,C;;;;;;;;;AACrC,gBAAA,IAAI,GAAG,KAAP;AACA,gBAAA,SAAS,GAAW,IAApB;AACA,gBAAA,SAAS,GAAW,IAApB;AACA,gBAAA,KAAK,GAA4B,IAAjC;AAEA,gBAAA,eAAe,GAAG,CAAlB;AAEE,gBAAA,OAAO,GAAG,KAAK,MAAL,CAAY,UAAZ,CACf,SADe,EAEd,wBAFc,CAEW,GAFX,CAEe,eAAe,CAAC,IAF/B,CAAV;AAGA,gBAAA,QAAQ,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,MAAA,EAAM;AAClC,yBAAA,cAAc,CAAC,GAAf,CAAsB,SAAS,GAAA,GAAT,GAAa,MAAnC,CAAA;AAA4C,iBAD5B,CAAX;AAIA,gBAAA,OAAO,GAAG,IAAI,OAAJ,CAAkB,UAAM,GAAN,EAAS;AAAA,yBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AAC1C,iCAAA,CAAA;AAAA;AAAA,4BAAM,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAN,CAAA;;;AAAA,0BAAA,EAAA,CAAA,IAAA;;;;;AAGC,8BAAI,CAAC,UAAL,EAAiB;AAChB,mCAAA,CAAA;AAAA;AAAA,6BAAA;AACA;;AAEK,0BAAA,KAAK,GAAG,IAAI,CAAC,GAAL,CACb,gBAAgB,GAAG,eADN,EAEb,YAFa,CAAR;AAK6B,iCAAA,CAAA;AAAA;AAAA,4BAAM,KAAK,YAAL,CACxC,eADwC,EAExC,QAFwC,EAGxC,SAHwC,EAIxC,KAJwC,CAAN,CAAA;;;AAAlC,0BAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAE,KAAA,GAAA,EAAA,CAAA,KAAF,EAAS,SAAA,GAAA,EAAA,CAAA,SAAT,EAAoB,SAAA,GAAA,EAAA,CAAA,SAArB;AAOA,0BAAA,eAAe,IAAI,KAAK,CAAC,MAAzB;AAEA,0BAAA,IAAI,GAAG,SAAS,KAAK,IAAd,IAAsB,eAAe,IAAI,gBAAhD;AAEA,0BAAA,QAAQ,CAAC,IAAT,CAAc;AACb,4BAAA,SAAS,EAAA,SADI;AAEb,4BAAA,eAAe,EAAA,eAFF;AAGb,4BAAA,KAAK,EAAA,KAHQ;AAIb,4BAAA,IAAI,EAAA,IAJS;AAKb,4BAAA,SAAS,EAAA,SALI;AAMb,4BAAA,UAAU,EAAE,CAAC;AANA,2BAAd;;;;8BAQQ,CAAC,I,EAAI,OAAA,CAAA;AAAA;AAAA,4BAAA,CAAA,CAAA;;;;AAEd,0BAAA,GAAG;;;;;;mBAlCuC,CAAA;AAmC1C,iBAnCe,CAAV;AAqCN,gBAAA,cAAc,CAAC,GAAf,CAAsB,SAAS,GAAA,GAAT,GAAa,eAAe,CAAC,IAAnD,EAA2D,OAA3D;AAEA,uBAAA,CAAA;AAAA;AAAA,kBAAM,OAAN,CAAA;;;AAAA,gBAAA,EAAA,CAAA,IAAA;;;;;;;;AACA,OAzDqB,CAAvB;AA2DA,MAAA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,IAA5B,CAAiC,YAAA;AAChC,QAAA,QAAQ,CAAC,QAAT;AACA,OAFD;AAIA,aAAO,YAAA;AACN,QAAA,UAAU,GAAG,KAAb;AACA,OAFD;AAGA,KAhFkB,CAAnB;AAkFA,WAAO,UAAP;AACA,GApGD;;AAqGD,SAAA,aAAA;AAAC,CAzLD,EAAA;;AAoMA,SAAS,aAAT","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport API from '@aws-amplify/api';\nimport Observable from 'zen-observable-ts';\nimport { buildGraphQLOperation } from '../utils';\nimport { jitteredExponentialRetry } from '@aws-amplify/core';\nvar DEFAULT_PAGINATION_LIMIT = 100;\nvar DEFAULT_MAX_RECORDS_TO_SYNC = 10000;\nvar SyncProcessor = /** @class */ (function () {\n    function SyncProcessor(schema, maxRecordsToSync, syncPageSize) {\n        if (maxRecordsToSync === void 0) { maxRecordsToSync = DEFAULT_MAX_RECORDS_TO_SYNC; }\n        if (syncPageSize === void 0) { syncPageSize = DEFAULT_PAGINATION_LIMIT; }\n        this.schema = schema;\n        this.maxRecordsToSync = maxRecordsToSync;\n        this.syncPageSize = syncPageSize;\n        this.typeQuery = new WeakMap();\n        this.generateQueries();\n    }\n    SyncProcessor.prototype.generateQueries = function () {\n        var _this = this;\n        Object.values(this.schema.namespaces).forEach(function (namespace) {\n            Object.values(namespace.models)\n                .filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n            })\n                .forEach(function (model) {\n                var _a = buildGraphQLOperation(namespace, model, 'LIST')[0], opNameQuery = _a.slice(1);\n                _this.typeQuery.set(model, opNameQuery);\n            });\n        });\n    };\n    SyncProcessor.prototype.retrievePage = function (modelDefinition, lastSync, nextToken, limit) {\n        if (limit === void 0) { limit = null; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, opName, query, variables, data, _b, opResult, items, newNextToken, startedAt;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _a = this.typeQuery.get(modelDefinition), opName = _a[0], query = _a[1];\n                        variables = {\n                            limit: limit,\n                            nextToken: nextToken,\n                            lastSync: lastSync,\n                        };\n                        return [4 /*yield*/, this.jitteredRetry(query, variables)];\n                    case 1:\n                        data = (_c.sent()).data;\n                        _b = opName, opResult = data[_b];\n                        items = opResult.items, newNextToken = opResult.nextToken, startedAt = opResult.startedAt;\n                        return [2 /*return*/, { nextToken: newNextToken, startedAt: startedAt, items: items }];\n                }\n            });\n        });\n    };\n    SyncProcessor.prototype.jitteredRetry = function (query, variables) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, jitteredExponentialRetry(function (query, variables) { return __awaiter(_this, void 0, void 0, function () {\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, API.graphql({\n                                            query: query,\n                                            variables: variables,\n                                        })];\n                                    case 1: return [2 /*return*/, _a.sent()];\n                                }\n                            });\n                        }); }, [query, variables])];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    SyncProcessor.prototype.start = function (typesLastSync) {\n        var _this = this;\n        var processing = true;\n        var maxRecordsToSync = this.maxRecordsToSync !== undefined\n            ? this.maxRecordsToSync\n            : DEFAULT_MAX_RECORDS_TO_SYNC;\n        var syncPageSize = this.syncPageSize !== undefined\n            ? this.syncPageSize\n            : DEFAULT_PAGINATION_LIMIT;\n        var parentPromises = new Map();\n        var observable = new Observable(function (observer) {\n            var sortedTypesLastSyncs = Object.values(_this.schema.namespaces).reduce(function (map, namespace) {\n                for (var _i = 0, _a = Array.from(namespace.modelTopologicalOrdering.keys()); _i < _a.length; _i++) {\n                    var modelName = _a[_i];\n                    var typeLastSync = typesLastSync.get(namespace.models[modelName]);\n                    map.set(namespace.models[modelName], typeLastSync);\n                }\n                return map;\n            }, new Map());\n            var allModelsReady = Array.from(sortedTypesLastSyncs.entries())\n                .filter(function (_a) {\n                var syncable = _a[0].syncable;\n                return syncable;\n            })\n                .map(function (_a) {\n                var modelDefinition = _a[0], _b = _a[1], namespace = _b[0], lastSync = _b[1];\n                return __awaiter(_this, void 0, void 0, function () {\n                    var done, nextToken, startedAt, items, recordsReceived, parents, promises, promise;\n                    var _this = this;\n                    return __generator(this, function (_c) {\n                        switch (_c.label) {\n                            case 0:\n                                done = false;\n                                nextToken = null;\n                                startedAt = null;\n                                items = null;\n                                recordsReceived = 0;\n                                parents = this.schema.namespaces[namespace].modelTopologicalOrdering.get(modelDefinition.name);\n                                promises = parents.map(function (parent) {\n                                    return parentPromises.get(namespace + \"_\" + parent);\n                                });\n                                promise = new Promise(function (res) { return __awaiter(_this, void 0, void 0, function () {\n                                    var limit;\n                                    var _a;\n                                    return __generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0: return [4 /*yield*/, Promise.all(promises)];\n                                            case 1:\n                                                _b.sent();\n                                                _b.label = 2;\n                                            case 2:\n                                                if (!processing) {\n                                                    return [2 /*return*/];\n                                                }\n                                                limit = Math.min(maxRecordsToSync - recordsReceived, syncPageSize);\n                                                return [4 /*yield*/, this.retrievePage(modelDefinition, lastSync, nextToken, limit)];\n                                            case 3:\n                                                (_a = _b.sent(), items = _a.items, nextToken = _a.nextToken, startedAt = _a.startedAt);\n                                                recordsReceived += items.length;\n                                                done = nextToken === null || recordsReceived >= maxRecordsToSync;\n                                                observer.next({\n                                                    namespace: namespace,\n                                                    modelDefinition: modelDefinition,\n                                                    items: items,\n                                                    done: done,\n                                                    startedAt: startedAt,\n                                                    isFullSync: !lastSync,\n                                                });\n                                                _b.label = 4;\n                                            case 4:\n                                                if (!done) return [3 /*break*/, 2];\n                                                _b.label = 5;\n                                            case 5:\n                                                res();\n                                                return [2 /*return*/];\n                                        }\n                                    });\n                                }); });\n                                parentPromises.set(namespace + \"_\" + modelDefinition.name, promise);\n                                return [4 /*yield*/, promise];\n                            case 1:\n                                _c.sent();\n                                return [2 /*return*/];\n                        }\n                    });\n                });\n            });\n            Promise.all(allModelsReady).then(function () {\n                observer.complete();\n            });\n            return function () {\n                processing = false;\n            };\n        });\n        return observable;\n    };\n    return SyncProcessor;\n}());\nexport { SyncProcessor };\n//# sourceMappingURL=sync.js.map"]},"metadata":{},"sourceType":"module"}