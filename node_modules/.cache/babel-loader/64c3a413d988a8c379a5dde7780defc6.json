{"ast":null,"code":"var AWS = require('../core');\n\nvar Translator = require('./translator');\n\nvar DynamoDBSet = require('./set');\n/**\n * The document client simplifies working with items in Amazon DynamoDB\n * by abstracting away the notion of attribute values. This abstraction\n * annotates native JavaScript types supplied as input parameters, as well\n * as converts annotated response data to native JavaScript types.\n *\n * ## Marshalling Input and Unmarshalling Response Data\n *\n * The document client affords developers the use of native JavaScript types\n * instead of `AttributeValue`s to simplify the JavaScript development\n * experience with Amazon DynamoDB. JavaScript objects passed in as parameters\n * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.\n * Responses from DynamoDB are unmarshalled into plain JavaScript objects\n * by the `DocumentClient`. The `DocumentClient`, does not accept\n * `AttributeValue`s in favor of native JavaScript types.\n *\n * |                             JavaScript Type                            | DynamoDB AttributeValue |\n * |:----------------------------------------------------------------------:|-------------------------|\n * | String                                                                 | S                       |\n * | Number                                                                 | N                       |\n * | Boolean                                                                | BOOL                    |\n * | null                                                                   | NULL                    |\n * | Array                                                                  | L                       |\n * | Object                                                                 | M                       |\n * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |\n *\n * ## Support for Sets\n *\n * The `DocumentClient` offers a convenient way to create sets from\n * JavaScript Arrays. The type of set is inferred from the first element\n * in the array. DynamoDB supports string, number, and binary sets. To\n * learn more about supported types see the\n * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n * For more information see {AWS.DynamoDB.DocumentClient.createSet}\n *\n */\n\n\nAWS.DynamoDB.DocumentClient = AWS.util.inherit({\n  /**\n   * Creates a DynamoDB document client with a set of configuration options.\n   *\n   * @option options params [map] An optional map of parameters to bind to every\n   *   request sent by this service object.\n   * @option options service [AWS.DynamoDB] An optional pre-configured instance\n   *  of the AWS.DynamoDB service object to use for requests. The object may\n   *  bound parameters used by the document client.\n   * @option options convertEmptyValues [Boolean] set to true if you would like\n   *  the document client to convert empty values (0-length strings, binary\n   *  buffers, and sets) to be converted to NULL types when persisting to\n   *  DynamoDB.\n   * @see AWS.DynamoDB.constructor\n   *\n   */\n  constructor: function DocumentClient(options) {\n    var self = this;\n    self.options = options || {};\n    self.configure(self.options);\n  },\n\n  /**\n   * @api private\n   */\n  configure: function configure(options) {\n    var self = this;\n    self.service = options.service;\n    self.bindServiceObject(options);\n    self.attrValue = options.attrValue = self.service.api.operations.putItem.input.members.Item.value.shape;\n  },\n\n  /**\n   * @api private\n   */\n  bindServiceObject: function bindServiceObject(options) {\n    var self = this;\n    options = options || {};\n\n    if (!self.service) {\n      self.service = new AWS.DynamoDB(options);\n    } else {\n      var config = AWS.util.copy(self.service.config);\n      self.service = new self.service.constructor.__super__(config);\n      self.service.config.params = AWS.util.merge(self.service.config.params || {}, options.params);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  makeServiceRequest: function makeServiceRequest(operation, params, callback) {\n    var self = this;\n    var request = self.service[operation](params);\n    self.setupRequest(request);\n    self.setupResponse(request);\n\n    if (typeof callback === 'function') {\n      request.send(callback);\n    }\n\n    return request;\n  },\n\n  /**\n   * @api private\n   */\n  serviceClientOperationsMap: {\n    batchGet: 'batchGetItem',\n    batchWrite: 'batchWriteItem',\n    delete: 'deleteItem',\n    get: 'getItem',\n    put: 'putItem',\n    query: 'query',\n    scan: 'scan',\n    update: 'updateItem',\n    transactGet: 'transactGetItems',\n    transactWrite: 'transactWriteItems'\n  },\n\n  /**\n   * Returns the attributes of one or more items from one or more tables\n   * by delegating to `AWS.DynamoDB.batchGetItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchGetItem\n   * @example Get items from multiple tables\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': {\n   *        Keys: [\n   *          {\n   *             HashKey: 'haskey',\n   *             NumberRangeKey: 1\n   *          }\n   *        ]\n   *      },\n   *      'Table-2': {\n   *        Keys: [\n   *          { foo: 'bar' },\n   *        ]\n   *      }\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchGet: function batchGet(params, callback) {\n    var operation = this.serviceClientOperationsMap['batchGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Puts or deletes multiple items in one or more tables by delegating\n   * to `AWS.DynamoDB.batchWriteItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchWriteItem\n   * @example Write to and delete from a table\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': [\n   *        {\n   *          DeleteRequest: {\n   *            Key: { HashKey: 'someKey' }\n   *          }\n   *        },\n   *        {\n   *          PutRequest: {\n   *            Item: {\n   *              HashKey: 'anotherKey',\n   *              NumAttribute: 1,\n   *              BoolAttribute: true,\n   *              ListAttribute: [1, 'two', false],\n   *              MapAttribute: { foo: 'bar' }\n   *            }\n   *          }\n   *        }\n   *      ]\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchWrite: function batchWrite(params, callback) {\n    var operation = this.serviceClientOperationsMap['batchWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Deletes a single item in a table by primary key by delegating to\n   * `AWS.DynamoDB.deleteItem()`\n   *\n   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.deleteItem\n   * @example Delete an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey',\n   *      NumberRangeKey: 1\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.delete(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  delete: function _delete(params, callback) {\n    var operation = this.serviceClientOperationsMap['delete'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Returns a set of attributes for the item with the given primary key\n   * by delegating to `AWS.DynamoDB.getItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.getItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.getItem\n   * @example Get an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey'\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.get(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  get: function get(params, callback) {\n    var operation = this.serviceClientOperationsMap['get'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Creates a new item, or replaces an old item with a new item by\n   * delegating to `AWS.DynamoDB.putItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.putItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.putItem\n   * @example Create a new item in a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Item: {\n   *       HashKey: 'haskey',\n   *       NumAttribute: 1,\n   *       BoolAttribute: true,\n   *       ListAttribute: [1, 'two', false],\n   *       MapAttribute: { foo: 'bar'},\n   *       NullAttribute: null\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  put: function put(params, callback) {\n    var operation = this.serviceClientOperationsMap['put'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Edits an existing item's attributes, or adds a new item to the table if\n   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.updateItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.updateItem\n   * @example Update an item with expressions\n   *  var params = {\n   *    TableName: 'Table',\n   *    Key: { HashKey : 'hashkey' },\n   *    UpdateExpression: 'set #a = :x + :y',\n   *    ConditionExpression: '#a < :MAX',\n   *    ExpressionAttributeNames: {'#a' : 'Sum'},\n   *    ExpressionAttributeValues: {\n   *      ':x' : 20,\n   *      ':y' : 45,\n   *      ':MAX' : 100,\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.update(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  update: function update(params, callback) {\n    var operation = this.serviceClientOperationsMap['update'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Returns one or more items and item attributes by accessing every item\n   * in a table or a secondary index.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.scan} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.scan\n   * @example Scan the table with a filter expression\n   *  var params = {\n   *    TableName : 'Table',\n   *    FilterExpression : 'Year = :this_year',\n   *    ExpressionAttributeValues : {':this_year' : 2015}\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.scan(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  scan: function scan(params, callback) {\n    var operation = this.serviceClientOperationsMap['scan'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Directly access items from a table by primary key or a secondary index.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.query} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.query\n   * @example Query an index\n   *  var params = {\n   *    TableName: 'Table',\n   *    IndexName: 'Index',\n   *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',\n   *    ExpressionAttributeValues: {\n   *      ':hkey': 'key',\n   *      ':rkey': 2015\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.query(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  query: function query(params, callback) {\n    var operation = this.serviceClientOperationsMap['query'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Synchronous write operation that groups up to 10 action requests\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactWriteItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactWriteItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Put: {\n   *        TableName : 'Table0',\n   *        Item: {\n   *          HashKey: 'haskey',\n   *          NumAttribute: 1,\n   *          BoolAttribute: true,\n   *          ListAttribute: [1, 'two', false],\n   *          MapAttribute: { foo: 'bar'},\n   *          NullAttribute: null\n   *        }\n   *      }\n   *    }, {\n   *      Update: {\n   *        TableName: 'Table1',\n   *        Key: { HashKey : 'hashkey' },\n   *        UpdateExpression: 'set #a = :x + :y',\n   *        ConditionExpression: '#a < :MAX',\n   *        ExpressionAttributeNames: {'#a' : 'Sum'},\n   *        ExpressionAttributeValues: {\n   *          ':x' : 20,\n   *          ':y' : 45,\n   *          ':MAX' : 100,\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactWrite: function transactWrite(params, callback) {\n    var operation = this.serviceClientOperationsMap['transactWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Atomically retrieves multiple items from one or more tables (but not from indexes)\n   * in a single account and region.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactGetItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactGetItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Get: {\n   *        TableName : 'Table0',\n   *        Key: {\n   *          HashKey: 'hashkey0'\n   *        }\n   *      }\n   *    }, {\n   *      Get: {\n   *        TableName : 'Table1',\n   *        Key: {\n   *          HashKey: 'hashkey1'\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactGet: function transactGet(params, callback) {\n    var operation = this.serviceClientOperationsMap['transactGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Creates a set of elements inferring the type of set from\n   * the type of the first element. Amazon DynamoDB currently supports\n   * the number sets, string sets, and binary sets. For more information\n   * about DynamoDB data types see the documentation on the\n   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).\n   *\n   * @param list [Array] Collection to represent your DynamoDB Set\n   * @param options [map]\n   *  * **validate** [Boolean] set to true if you want to validate the type\n   *    of each element in the set. Defaults to `false`.\n   * @example Creating a number set\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  var params = {\n   *    Item: {\n   *      hashkey: 'hashkey'\n   *      numbers: documentClient.createSet([1, 2, 3]);\n   *    }\n   *  };\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  createSet: function createSet(list, options) {\n    options = options || {};\n    return new DynamoDBSet(list, options);\n  },\n\n  /**\n   * @api private\n   */\n  getTranslator: function getTranslator() {\n    return new Translator(this.options);\n  },\n\n  /**\n   * @api private\n   */\n  setupRequest: function setupRequest(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var operation = request.operation;\n    var inputShape = request.service.api.operations[operation].input;\n\n    request._events.validate.unshift(function (req) {\n      req.rawParams = AWS.util.copy(req.params);\n      req.params = translator.translateInput(req.rawParams, inputShape);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  setupResponse: function setupResponse(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var outputShape = self.service.api.operations[request.operation].output;\n    request.on('extractData', function (response) {\n      response.data = translator.translateOutput(response.data, outputShape);\n    });\n    var response = request.response;\n\n    response.nextPage = function (cb) {\n      var resp = this;\n      var req = resp.request;\n      var config;\n      var service = req.service;\n      var operation = req.operation;\n\n      try {\n        config = service.paginationConfig(operation, true);\n      } catch (e) {\n        resp.error = e;\n      }\n\n      if (!resp.hasNextPage()) {\n        if (cb) cb(resp.error, null);else if (resp.error) throw resp.error;\n        return null;\n      }\n\n      var params = AWS.util.copy(req.rawParams);\n\n      if (!resp.nextPageTokens) {\n        return cb ? cb(null, null) : null;\n      } else {\n        var inputTokens = config.inputToken;\n        if (typeof inputTokens === 'string') inputTokens = [inputTokens];\n\n        for (var i = 0; i < inputTokens.length; i++) {\n          params[inputTokens[i]] = resp.nextPageTokens[i];\n        }\n\n        return self[operation](params, cb);\n      }\n    };\n  }\n});\n/**\n * @api private\n */\n\nmodule.exports = AWS.DynamoDB.DocumentClient;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/dynamodb/document_client.js"],"names":["AWS","require","Translator","DynamoDBSet","DynamoDB","DocumentClient","util","inherit","constructor","options","self","configure","service","bindServiceObject","attrValue","api","operations","putItem","input","members","Item","value","shape","config","copy","__super__","params","merge","makeServiceRequest","operation","callback","request","setupRequest","setupResponse","send","serviceClientOperationsMap","batchGet","batchWrite","delete","get","put","query","scan","update","transactGet","transactWrite","createSet","list","getTranslator","translator","inputShape","_events","validate","unshift","req","rawParams","translateInput","outputShape","output","on","response","data","translateOutput","nextPage","cb","resp","paginationConfig","e","error","hasNextPage","nextPageTokens","inputTokens","inputToken","i","length","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar Translator = require('./translator');\nvar DynamoDBSet = require('./set');\n\n/**\n * The document client simplifies working with items in Amazon DynamoDB\n * by abstracting away the notion of attribute values. This abstraction\n * annotates native JavaScript types supplied as input parameters, as well\n * as converts annotated response data to native JavaScript types.\n *\n * ## Marshalling Input and Unmarshalling Response Data\n *\n * The document client affords developers the use of native JavaScript types\n * instead of `AttributeValue`s to simplify the JavaScript development\n * experience with Amazon DynamoDB. JavaScript objects passed in as parameters\n * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.\n * Responses from DynamoDB are unmarshalled into plain JavaScript objects\n * by the `DocumentClient`. The `DocumentClient`, does not accept\n * `AttributeValue`s in favor of native JavaScript types.\n *\n * |                             JavaScript Type                            | DynamoDB AttributeValue |\n * |:----------------------------------------------------------------------:|-------------------------|\n * | String                                                                 | S                       |\n * | Number                                                                 | N                       |\n * | Boolean                                                                | BOOL                    |\n * | null                                                                   | NULL                    |\n * | Array                                                                  | L                       |\n * | Object                                                                 | M                       |\n * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |\n *\n * ## Support for Sets\n *\n * The `DocumentClient` offers a convenient way to create sets from\n * JavaScript Arrays. The type of set is inferred from the first element\n * in the array. DynamoDB supports string, number, and binary sets. To\n * learn more about supported types see the\n * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)\n * For more information see {AWS.DynamoDB.DocumentClient.createSet}\n *\n */\nAWS.DynamoDB.DocumentClient = AWS.util.inherit({\n\n  /**\n   * Creates a DynamoDB document client with a set of configuration options.\n   *\n   * @option options params [map] An optional map of parameters to bind to every\n   *   request sent by this service object.\n   * @option options service [AWS.DynamoDB] An optional pre-configured instance\n   *  of the AWS.DynamoDB service object to use for requests. The object may\n   *  bound parameters used by the document client.\n   * @option options convertEmptyValues [Boolean] set to true if you would like\n   *  the document client to convert empty values (0-length strings, binary\n   *  buffers, and sets) to be converted to NULL types when persisting to\n   *  DynamoDB.\n   * @see AWS.DynamoDB.constructor\n   *\n   */\n  constructor: function DocumentClient(options) {\n    var self = this;\n    self.options = options || {};\n    self.configure(self.options);\n  },\n\n  /**\n   * @api private\n   */\n  configure: function configure(options) {\n    var self = this;\n    self.service = options.service;\n    self.bindServiceObject(options);\n    self.attrValue = options.attrValue =\n      self.service.api.operations.putItem.input.members.Item.value.shape;\n  },\n\n  /**\n   * @api private\n   */\n  bindServiceObject: function bindServiceObject(options) {\n    var self = this;\n    options = options || {};\n\n    if (!self.service) {\n      self.service = new AWS.DynamoDB(options);\n    } else {\n      var config = AWS.util.copy(self.service.config);\n      self.service = new self.service.constructor.__super__(config);\n      self.service.config.params =\n        AWS.util.merge(self.service.config.params || {}, options.params);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  makeServiceRequest: function(operation, params, callback) {\n    var self = this;\n    var request = self.service[operation](params);\n    self.setupRequest(request);\n    self.setupResponse(request);\n    if (typeof callback === 'function') {\n      request.send(callback);\n    }\n    return request;\n  },\n\n  /**\n   * @api private\n   */\n  serviceClientOperationsMap: {\n    batchGet: 'batchGetItem',\n    batchWrite: 'batchWriteItem',\n    delete: 'deleteItem',\n    get: 'getItem',\n    put: 'putItem',\n    query: 'query',\n    scan: 'scan',\n    update: 'updateItem',\n    transactGet: 'transactGetItems',\n    transactWrite: 'transactWriteItems'\n  },\n\n  /**\n   * Returns the attributes of one or more items from one or more tables\n   * by delegating to `AWS.DynamoDB.batchGetItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchGetItem\n   * @example Get items from multiple tables\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': {\n   *        Keys: [\n   *          {\n   *             HashKey: 'haskey',\n   *             NumberRangeKey: 1\n   *          }\n   *        ]\n   *      },\n   *      'Table-2': {\n   *        Keys: [\n   *          { foo: 'bar' },\n   *        ]\n   *      }\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchGet: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['batchGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Puts or deletes multiple items in one or more tables by delegating\n   * to `AWS.DynamoDB.batchWriteItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.batchWriteItem\n   * @example Write to and delete from a table\n   *  var params = {\n   *    RequestItems: {\n   *      'Table-1': [\n   *        {\n   *          DeleteRequest: {\n   *            Key: { HashKey: 'someKey' }\n   *          }\n   *        },\n   *        {\n   *          PutRequest: {\n   *            Item: {\n   *              HashKey: 'anotherKey',\n   *              NumAttribute: 1,\n   *              BoolAttribute: true,\n   *              ListAttribute: [1, 'two', false],\n   *              MapAttribute: { foo: 'bar' }\n   *            }\n   *          }\n   *        }\n   *      ]\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.batchWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  batchWrite: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['batchWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Deletes a single item in a table by primary key by delegating to\n   * `AWS.DynamoDB.deleteItem()`\n   *\n   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.deleteItem\n   * @example Delete an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey',\n   *      NumberRangeKey: 1\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.delete(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  delete: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['delete'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Returns a set of attributes for the item with the given primary key\n   * by delegating to `AWS.DynamoDB.getItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.getItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.getItem\n   * @example Get an item from a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Key: {\n   *      HashKey: 'hashkey'\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.get(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  get: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['get'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Creates a new item, or replaces an old item with a new item by\n   * delegating to `AWS.DynamoDB.putItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.putItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.putItem\n   * @example Create a new item in a table\n   *  var params = {\n   *    TableName : 'Table',\n   *    Item: {\n   *       HashKey: 'haskey',\n   *       NumAttribute: 1,\n   *       BoolAttribute: true,\n   *       ListAttribute: [1, 'two', false],\n   *       MapAttribute: { foo: 'bar'},\n   *       NullAttribute: null\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  put: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['put'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Edits an existing item's attributes, or adds a new item to the table if\n   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.updateItem} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.updateItem\n   * @example Update an item with expressions\n   *  var params = {\n   *    TableName: 'Table',\n   *    Key: { HashKey : 'hashkey' },\n   *    UpdateExpression: 'set #a = :x + :y',\n   *    ConditionExpression: '#a < :MAX',\n   *    ExpressionAttributeNames: {'#a' : 'Sum'},\n   *    ExpressionAttributeValues: {\n   *      ':x' : 20,\n   *      ':y' : 45,\n   *      ':MAX' : 100,\n   *    }\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.update(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  update: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['update'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Returns one or more items and item attributes by accessing every item\n   * in a table or a secondary index.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.scan} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.scan\n   * @example Scan the table with a filter expression\n   *  var params = {\n   *    TableName : 'Table',\n   *    FilterExpression : 'Year = :this_year',\n   *    ExpressionAttributeValues : {':this_year' : 2015}\n   *  };\n   *\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  documentClient.scan(params, function(err, data) {\n   *     if (err) console.log(err);\n   *     else console.log(data);\n   *  });\n   *\n   */\n  scan: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['scan'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n   /**\n    * Directly access items from a table by primary key or a secondary index.\n    *\n    * Supply the same parameters as {AWS.DynamoDB.query} with\n    * `AttributeValue`s substituted by native JavaScript types.\n    *\n    * @see AWS.DynamoDB.query\n    * @example Query an index\n    *  var params = {\n    *    TableName: 'Table',\n    *    IndexName: 'Index',\n    *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',\n    *    ExpressionAttributeValues: {\n    *      ':hkey': 'key',\n    *      ':rkey': 2015\n    *    }\n    *  };\n    *\n    *  var documentClient = new AWS.DynamoDB.DocumentClient();\n    *\n    *  documentClient.query(params, function(err, data) {\n    *     if (err) console.log(err);\n    *     else console.log(data);\n    *  });\n    *\n    */\n  query: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['query'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Synchronous write operation that groups up to 10 action requests\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactWriteItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactWriteItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Put: {\n   *        TableName : 'Table0',\n   *        Item: {\n   *          HashKey: 'haskey',\n   *          NumAttribute: 1,\n   *          BoolAttribute: true,\n   *          ListAttribute: [1, 'two', false],\n   *          MapAttribute: { foo: 'bar'},\n   *          NullAttribute: null\n   *        }\n   *      }\n   *    }, {\n   *      Update: {\n   *        TableName: 'Table1',\n   *        Key: { HashKey : 'hashkey' },\n   *        UpdateExpression: 'set #a = :x + :y',\n   *        ConditionExpression: '#a < :MAX',\n   *        ExpressionAttributeNames: {'#a' : 'Sum'},\n   *        ExpressionAttributeValues: {\n   *          ':x' : 20,\n   *          ':y' : 45,\n   *          ':MAX' : 100,\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactWrite(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactWrite: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['transactWrite'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Atomically retrieves multiple items from one or more tables (but not from indexes)\n   * in a single account and region.\n   *\n   * Supply the same parameters as {AWS.DynamoDB.transactGetItems} with\n   * `AttributeValue`s substituted by native JavaScript types.\n   *\n   * @see AWS.DynamoDB.transactGetItems\n   * @example Get items from multiple tables\n   *  var params = {\n   *    TransactItems: [{\n   *      Get: {\n   *        TableName : 'Table0',\n   *        Key: {\n   *          HashKey: 'hashkey0'\n   *        }\n   *      }\n   *    }, {\n   *      Get: {\n   *        TableName : 'Table1',\n   *        Key: {\n   *          HashKey: 'hashkey1'\n   *        }\n   *      }\n   *    }]\n   *  };\n   *\n   *  documentClient.transactGet(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   */\n  transactGet: function(params, callback) {\n    var operation = this.serviceClientOperationsMap['transactGet'];\n    return this.makeServiceRequest(operation, params, callback);\n  },\n\n  /**\n   * Creates a set of elements inferring the type of set from\n   * the type of the first element. Amazon DynamoDB currently supports\n   * the number sets, string sets, and binary sets. For more information\n   * about DynamoDB data types see the documentation on the\n   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).\n   *\n   * @param list [Array] Collection to represent your DynamoDB Set\n   * @param options [map]\n   *  * **validate** [Boolean] set to true if you want to validate the type\n   *    of each element in the set. Defaults to `false`.\n   * @example Creating a number set\n   *  var documentClient = new AWS.DynamoDB.DocumentClient();\n   *\n   *  var params = {\n   *    Item: {\n   *      hashkey: 'hashkey'\n   *      numbers: documentClient.createSet([1, 2, 3]);\n   *    }\n   *  };\n   *\n   *  documentClient.put(params, function(err, data) {\n   *    if (err) console.log(err);\n   *    else console.log(data);\n   *  });\n   *\n   */\n  createSet: function(list, options) {\n    options = options || {};\n    return new DynamoDBSet(list, options);\n  },\n\n  /**\n   * @api private\n   */\n  getTranslator: function() {\n    return new Translator(this.options);\n  },\n\n  /**\n   * @api private\n   */\n  setupRequest: function setupRequest(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var operation = request.operation;\n    var inputShape = request.service.api.operations[operation].input;\n    request._events.validate.unshift(function(req) {\n      req.rawParams = AWS.util.copy(req.params);\n      req.params = translator.translateInput(req.rawParams, inputShape);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  setupResponse: function setupResponse(request) {\n    var self = this;\n    var translator = self.getTranslator();\n    var outputShape = self.service.api.operations[request.operation].output;\n    request.on('extractData', function(response) {\n      response.data = translator.translateOutput(response.data, outputShape);\n    });\n\n    var response = request.response;\n    response.nextPage = function(cb) {\n      var resp = this;\n      var req = resp.request;\n      var config;\n      var service = req.service;\n      var operation = req.operation;\n      try {\n        config = service.paginationConfig(operation, true);\n      } catch (e) { resp.error = e; }\n\n      if (!resp.hasNextPage()) {\n        if (cb) cb(resp.error, null);\n        else if (resp.error) throw resp.error;\n        return null;\n      }\n\n      var params = AWS.util.copy(req.rawParams);\n      if (!resp.nextPageTokens) {\n        return cb ? cb(null, null) : null;\n      } else {\n        var inputTokens = config.inputToken;\n        if (typeof inputTokens === 'string') inputTokens = [inputTokens];\n        for (var i = 0; i < inputTokens.length; i++) {\n          params[inputTokens[i]] = resp.nextPageTokens[i];\n        }\n        return self[operation](params, cb);\n      }\n    };\n  }\n\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.DynamoDB.DocumentClient;\n"]},"metadata":{},"sourceType":"script"}