{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unusedFragMessage(fragName) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" is never used.\");\n}\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\n\nexport function NoUnusedFragments(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i = 0; _i < operationDefs.length; _i++) {\n          var operation = operationDefs[_i];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = context.getRecursivelyReferencedFragments(operation)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var fragment = _step.value;\n              fragmentNameUsed[fragment.name.value] = true;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        for (var _i2 = 0; _i2 < fragmentDefs.length; _i2++) {\n          var fragmentDef = fragmentDefs[_i2];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(unusedFragMessage(fragName), [fragmentDef]));\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/validation/rules/NoUnusedFragments.mjs"],"names":["GraphQLError","unusedFragMessage","fragName","concat","NoUnusedFragments","context","operationDefs","fragmentDefs","OperationDefinition","node","push","FragmentDefinition","Document","leave","fragmentNameUsed","Object","create","_i","length","operation","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","getRecursivelyReferencedFragments","Symbol","iterator","_step","next","done","fragment","value","name","err","return","_i2","fragmentDef","reportError"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAO,SAASC,iBAAT,CAA2BC,QAA3B,EAAqC;AAC1C,SAAO,cAAcC,MAAd,CAAqBD,QAArB,EAA+B,mBAA/B,CAAP;AACD;AACD;;;;;;;AAOA,OAAO,SAASE,iBAAT,CAA2BC,OAA3B,EAAoC;AACzC,MAAIC,aAAa,GAAG,EAApB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACA,SAAO;AACLC,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AACtDH,MAAAA,aAAa,CAACI,IAAd,CAAmBD,IAAnB;AACA,aAAO,KAAP;AACD,KAJI;AAKLE,IAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BF,IAA5B,EAAkC;AACpDF,MAAAA,YAAY,CAACG,IAAb,CAAkBD,IAAlB;AACA,aAAO,KAAP;AACD,KARI;AASLG,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,YAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAvB;;AAEA,aAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGX,aAAa,CAACY,MAApC,EAA4CD,EAAE,EAA9C,EAAkD;AAChD,cAAIE,SAAS,GAAGb,aAAa,CAACW,EAAD,CAA7B;AACA,cAAIG,yBAAyB,GAAG,IAAhC;AACA,cAAIC,iBAAiB,GAAG,KAAxB;AACA,cAAIC,cAAc,GAAGC,SAArB;;AAEA,cAAI;AACF,iBAAK,IAAIC,SAAS,GAAGnB,OAAO,CAACoB,iCAAR,CAA0CN,SAA1C,EAAqDO,MAAM,CAACC,QAA5D,GAAhB,EAAyFC,KAA9F,EAAqG,EAAER,yBAAyB,GAAG,CAACQ,KAAK,GAAGJ,SAAS,CAACK,IAAV,EAAT,EAA2BC,IAAzD,CAArG,EAAqKV,yBAAyB,GAAG,IAAjM,EAAuM;AACrM,kBAAIW,QAAQ,GAAGH,KAAK,CAACI,KAArB;AACAlB,cAAAA,gBAAgB,CAACiB,QAAQ,CAACE,IAAT,CAAcD,KAAf,CAAhB,GAAwC,IAAxC;AACD;AACF,WALD,CAKE,OAAOE,GAAP,EAAY;AACZb,YAAAA,iBAAiB,GAAG,IAApB;AACAC,YAAAA,cAAc,GAAGY,GAAjB;AACD,WARD,SAQU;AACR,gBAAI;AACF,kBAAI,CAACd,yBAAD,IAA8BI,SAAS,CAACW,MAAV,IAAoB,IAAtD,EAA4D;AAC1DX,gBAAAA,SAAS,CAACW,MAAV;AACD;AACF,aAJD,SAIU;AACR,kBAAId,iBAAJ,EAAuB;AACrB,sBAAMC,cAAN;AACD;AACF;AACF;AACF;;AAED,aAAK,IAAIc,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG7B,YAAY,CAACW,MAArC,EAA6CkB,GAAG,EAAhD,EAAoD;AAClD,cAAIC,WAAW,GAAG9B,YAAY,CAAC6B,GAAD,CAA9B;AACA,cAAIlC,QAAQ,GAAGmC,WAAW,CAACJ,IAAZ,CAAiBD,KAAhC;;AAEA,cAAIlB,gBAAgB,CAACZ,QAAD,CAAhB,KAA+B,IAAnC,EAAyC;AACvCG,YAAAA,OAAO,CAACiC,WAAR,CAAoB,IAAItC,YAAJ,CAAiBC,iBAAiB,CAACC,QAAD,CAAlC,EAA8C,CAACmC,WAAD,CAA9C,CAApB;AACD;AACF;AACF;AAvCO;AATL,GAAP;AAmDD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nexport function unusedFragMessage(fragName) {\n  return \"Fragment \\\"\".concat(fragName, \"\\\" is never used.\");\n}\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\n\nexport function NoUnusedFragments(context) {\n  var operationDefs = [];\n  var fragmentDefs = [];\n  return {\n    OperationDefinition: function OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n    FragmentDefinition: function FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n    Document: {\n      leave: function leave() {\n        var fragmentNameUsed = Object.create(null);\n\n        for (var _i = 0; _i < operationDefs.length; _i++) {\n          var operation = operationDefs[_i];\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = context.getRecursivelyReferencedFragments(operation)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var fragment = _step.value;\n              fragmentNameUsed[fragment.name.value] = true;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n\n        for (var _i2 = 0; _i2 < fragmentDefs.length; _i2++) {\n          var fragmentDef = fragmentDefs[_i2];\n          var fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(unusedFragMessage(fragName), [fragmentDef]));\n          }\n        }\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}