{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitions } from './rules/ExecutableDefinitions'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNames } from './rules/UniqueOperationNames'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperation } from './rules/LoneAnonymousOperation'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptions } from './rules/SingleFieldSubscriptions'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNames } from './rules/KnownTypeNames'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypes } from './rules/FragmentsOnCompositeTypes'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypes } from './rules/VariablesAreInputTypes'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafs } from './rules/ScalarLeafs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectType } from './rules/FieldsOnCorrectType'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNames } from './rules/UniqueFragmentNames'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNames } from './rules/KnownFragmentNames'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragments } from './rules/NoUnusedFragments'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreads } from './rules/PossibleFragmentSpreads'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCycles } from './rules/NoFragmentCycles'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNames } from './rules/UniqueVariableNames'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariables } from './rules/NoUndefinedVariables'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariables } from './rules/NoUnusedVariables'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectives } from './rules/KnownDirectives'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocation } from './rules/UniqueDirectivesPerLocation'; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNames } from './rules/KnownArgumentNames'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNames } from './rules/UniqueArgumentNames'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectType } from './rules/ValuesOfCorrectType'; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArguments } from './rules/ProvidedRequiredArguments'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPosition } from './rules/VariablesInAllowedPosition'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMerged } from './rules/OverlappingFieldsCanBeMerged'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNames } from './rules/UniqueInputFieldNames';\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport var specifiedRules = [ExecutableDefinitions, UniqueOperationNames, LoneAnonymousOperation, SingleFieldSubscriptions, KnownTypeNames, FragmentsOnCompositeTypes, VariablesAreInputTypes, ScalarLeafs, FieldsOnCorrectType, UniqueFragmentNames, KnownFragmentNames, NoUnusedFragments, PossibleFragmentSpreads, NoFragmentCycles, UniqueVariableNames, NoUndefinedVariables, NoUnusedVariables, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNames, UniqueArgumentNames, ValuesOfCorrectType, ProvidedRequiredArguments, VariablesInAllowedPosition, OverlappingFieldsCanBeMerged, UniqueInputFieldNames];\nimport { LoneSchemaDefinition } from './rules/LoneSchemaDefinition';\nimport { KnownArgumentNamesOnDirectives } from './rules/KnownArgumentNames';\nimport { ProvidedRequiredArgumentsOnDirectives } from './rules/ProvidedRequiredArguments'; // @internal\n\nexport var specifiedSDLRules = [LoneSchemaDefinition, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNamesOnDirectives, UniqueArgumentNames, UniqueInputFieldNames, ProvidedRequiredArgumentsOnDirectives];","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/validation/specifiedRules.mjs"],"names":["ExecutableDefinitions","UniqueOperationNames","LoneAnonymousOperation","SingleFieldSubscriptions","KnownTypeNames","FragmentsOnCompositeTypes","VariablesAreInputTypes","ScalarLeafs","FieldsOnCorrectType","UniqueFragmentNames","KnownFragmentNames","NoUnusedFragments","PossibleFragmentSpreads","NoFragmentCycles","UniqueVariableNames","NoUndefinedVariables","NoUnusedVariables","KnownDirectives","UniqueDirectivesPerLocation","KnownArgumentNames","UniqueArgumentNames","ValuesOfCorrectType","ProvidedRequiredArguments","VariablesInAllowedPosition","OverlappingFieldsCanBeMerged","UniqueInputFieldNames","specifiedRules","LoneSchemaDefinition","KnownArgumentNamesOnDirectives","ProvidedRequiredArgumentsOnDirectives","specifiedSDLRules"],"mappings":"AAAA;;;;;;;;AAQA;AACA,SAASA,qBAAT,QAAsC,+BAAtC,C,CAAuE;;AAEvE,SAASC,oBAAT,QAAqC,8BAArC,C,CAAqE;;AAErE,SAASC,sBAAT,QAAuC,gCAAvC,C,CAAyE;;AAEzE,SAASC,wBAAT,QAAyC,kCAAzC,C,CAA6E;;AAE7E,SAASC,cAAT,QAA+B,wBAA/B,C,CAAyD;;AAEzD,SAASC,yBAAT,QAA0C,mCAA1C,C,CAA+E;;AAE/E,SAASC,sBAAT,QAAuC,gCAAvC,C,CAAyE;;AAEzE,SAASC,WAAT,QAA4B,qBAA5B,C,CAAmD;;AAEnD,SAASC,mBAAT,QAAoC,6BAApC,C,CAAmE;;AAEnE,SAASC,mBAAT,QAAoC,6BAApC,C,CAAmE;;AAEnE,SAASC,kBAAT,QAAmC,4BAAnC,C,CAAiE;;AAEjE,SAASC,iBAAT,QAAkC,2BAAlC,C,CAA+D;;AAE/D,SAASC,uBAAT,QAAwC,iCAAxC,C,CAA2E;;AAE3E,SAASC,gBAAT,QAAiC,0BAAjC,C,CAA6D;;AAE7D,SAASC,mBAAT,QAAoC,6BAApC,C,CAAmE;;AAEnE,SAASC,oBAAT,QAAqC,8BAArC,C,CAAqE;;AAErE,SAASC,iBAAT,QAAkC,2BAAlC,C,CAA+D;;AAE/D,SAASC,eAAT,QAAgC,yBAAhC,C,CAA2D;;AAE3D,SAASC,2BAAT,QAA4C,qCAA5C,C,CAAmF;;AAEnF,SAASC,kBAAT,QAAmC,4BAAnC,C,CAAiE;;AAEjE,SAASC,mBAAT,QAAoC,6BAApC,C,CAAmE;;AAEnE,SAASC,mBAAT,QAAoC,6BAApC,C,CAAmE;;AAEnE,SAASC,yBAAT,QAA0C,mCAA1C,C,CAA+E;;AAE/E,SAASC,0BAAT,QAA2C,oCAA3C,C,CAAiF;;AAEjF,SAASC,4BAAT,QAA6C,sCAA7C,C,CAAqF;;AAErF,SAASC,qBAAT,QAAsC,+BAAtC;AACA;;;;;;;AAOA,OAAO,IAAIC,cAAc,GAAG,CAAC1B,qBAAD,EAAwBC,oBAAxB,EAA8CC,sBAA9C,EAAsEC,wBAAtE,EAAgGC,cAAhG,EAAgHC,yBAAhH,EAA2IC,sBAA3I,EAAmKC,WAAnK,EAAgLC,mBAAhL,EAAqMC,mBAArM,EAA0NC,kBAA1N,EAA8OC,iBAA9O,EAAiQC,uBAAjQ,EAA0RC,gBAA1R,EAA4SC,mBAA5S,EAAiUC,oBAAjU,EAAuVC,iBAAvV,EAA0WC,eAA1W,EAA2XC,2BAA3X,EAAwZC,kBAAxZ,EAA4aC,mBAA5a,EAAicC,mBAAjc,EAAsdC,yBAAtd,EAAifC,0BAAjf,EAA6gBC,4BAA7gB,EAA2iBC,qBAA3iB,CAArB;AACP,SAASE,oBAAT,QAAqC,8BAArC;AACA,SAASC,8BAAT,QAA+C,4BAA/C;AACA,SAASC,qCAAT,QAAsD,mCAAtD,C,CAA2F;;AAE3F,OAAO,IAAIC,iBAAiB,GAAG,CAACH,oBAAD,EAAuBV,eAAvB,EAAwCC,2BAAxC,EAAqEU,8BAArE,EAAqGR,mBAArG,EAA0HK,qBAA1H,EAAiJI,qCAAjJ,CAAxB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitions } from './rules/ExecutableDefinitions'; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNames } from './rules/UniqueOperationNames'; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperation } from './rules/LoneAnonymousOperation'; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptions } from './rules/SingleFieldSubscriptions'; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNames } from './rules/KnownTypeNames'; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypes } from './rules/FragmentsOnCompositeTypes'; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypes } from './rules/VariablesAreInputTypes'; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafs } from './rules/ScalarLeafs'; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectType } from './rules/FieldsOnCorrectType'; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNames } from './rules/UniqueFragmentNames'; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNames } from './rules/KnownFragmentNames'; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragments } from './rules/NoUnusedFragments'; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreads } from './rules/PossibleFragmentSpreads'; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCycles } from './rules/NoFragmentCycles'; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNames } from './rules/UniqueVariableNames'; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariables } from './rules/NoUndefinedVariables'; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariables } from './rules/NoUnusedVariables'; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectives } from './rules/KnownDirectives'; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocation } from './rules/UniqueDirectivesPerLocation'; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNames } from './rules/KnownArgumentNames'; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNames } from './rules/UniqueArgumentNames'; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectType } from './rules/ValuesOfCorrectType'; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArguments } from './rules/ProvidedRequiredArguments'; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPosition } from './rules/VariablesInAllowedPosition'; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMerged } from './rules/OverlappingFieldsCanBeMerged'; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNames } from './rules/UniqueInputFieldNames';\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport var specifiedRules = [ExecutableDefinitions, UniqueOperationNames, LoneAnonymousOperation, SingleFieldSubscriptions, KnownTypeNames, FragmentsOnCompositeTypes, VariablesAreInputTypes, ScalarLeafs, FieldsOnCorrectType, UniqueFragmentNames, KnownFragmentNames, NoUnusedFragments, PossibleFragmentSpreads, NoFragmentCycles, UniqueVariableNames, NoUndefinedVariables, NoUnusedVariables, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNames, UniqueArgumentNames, ValuesOfCorrectType, ProvidedRequiredArguments, VariablesInAllowedPosition, OverlappingFieldsCanBeMerged, UniqueInputFieldNames];\nimport { LoneSchemaDefinition } from './rules/LoneSchemaDefinition';\nimport { KnownArgumentNamesOnDirectives } from './rules/KnownArgumentNames';\nimport { ProvidedRequiredArgumentsOnDirectives } from './rules/ProvidedRequiredArguments'; // @internal\n\nexport var specifiedSDLRules = [LoneSchemaDefinition, KnownDirectives, UniqueDirectivesPerLocation, KnownArgumentNamesOnDirectives, UniqueArgumentNames, UniqueInputFieldNames, ProvidedRequiredArgumentsOnDirectives];"]},"metadata":{},"sourceType":"module"}