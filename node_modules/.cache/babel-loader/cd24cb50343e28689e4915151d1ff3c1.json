{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport isFinite from '../jsutils/isFinite';\nimport isInteger from '../jsutils/isInteger';\nimport { GraphQLScalarType, isNamedType } from './definition';\nimport { Kind } from '../language/kinds'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isInteger(num)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceInt(value) {\n  if (!isInteger(value)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (value > MAX_INT || value < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction serializeFloat(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isFinite(num)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(value) {\n  if (!isFinite(value)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction serializeString(value) {\n  // Support serializing objects with custom valueOf() functions - a common way\n  // to represent an complex value which can be represented as a string\n  // (ex: MongoDB id objects).\n  var result = value && typeof value.valueOf === 'function' ? value.valueOf() : value; // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof result === 'string') {\n    return result;\n  }\n\n  if (typeof result === 'boolean') {\n    return result ? 'true' : 'false';\n  }\n\n  if (isFinite(result)) {\n    return result.toString();\n  }\n\n  throw new TypeError(\"String cannot represent value: \".concat(inspect(value)));\n}\n\nfunction coerceString(value) {\n  if (typeof value !== 'string') {\n    throw new TypeError(\"String cannot represent a non string value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\n\nfunction serializeBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (isFinite(value)) {\n    return value !== 0;\n  }\n\n  throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n}\n\nfunction coerceBoolean(value) {\n  if (typeof value !== 'boolean') {\n    throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nfunction serializeID(value) {\n  // Support serializing objects with custom valueOf() functions - a common way\n  // to represent an object identifier (ex. MongoDB).\n  var result = value && typeof value.valueOf === 'function' ? value.valueOf() : value;\n\n  if (typeof result === 'string') {\n    return result;\n  }\n\n  if (isInteger(result)) {\n    return String(result);\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nfunction coerceID(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\nexport function isSpecifiedScalarType(type) {\n  return isNamedType(type) && ( // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/type/scalars.mjs"],"names":["inspect","isFinite","isInteger","GraphQLScalarType","isNamedType","Kind","MAX_INT","MIN_INT","serializeInt","value","num","Number","TypeError","concat","coerceInt","GraphQLInt","name","description","serialize","parseValue","parseLiteral","ast","kind","INT","parseInt","undefined","serializeFloat","coerceFloat","GraphQLFloat","FLOAT","parseFloat","serializeString","result","valueOf","toString","coerceString","GraphQLString","STRING","serializeBoolean","coerceBoolean","GraphQLBoolean","BOOLEAN","serializeID","String","coerceID","GraphQLID","specifiedScalarTypes","isSpecifiedScalarType","type"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../jsutils/inspect';\nimport isFinite from '../jsutils/isFinite';\nimport isInteger from '../jsutils/isInteger';\nimport { GraphQLScalarType, isNamedType } from './definition';\nimport { Kind } from '../language/kinds'; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nvar MAX_INT = 2147483647;\nvar MIN_INT = -2147483648;\n\nfunction serializeInt(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isInteger(num)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceInt(value) {\n  if (!isInteger(value)) {\n    throw new TypeError(\"Int cannot represent non-integer value: \".concat(inspect(value)));\n  }\n\n  if (value > MAX_INT || value < MIN_INT) {\n    throw new TypeError(\"Int cannot represent non 32-bit signed integer value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric ' + 'values. Int can represent values between -(2^31) and 2^31 - 1. ',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n  parseLiteral: function parseLiteral(ast) {\n    if (ast.kind === Kind.INT) {\n      var num = parseInt(ast.value, 10);\n\n      if (num <= MAX_INT && num >= MIN_INT) {\n        return num;\n      }\n    }\n\n    return undefined;\n  }\n});\n\nfunction serializeFloat(value) {\n  if (typeof value === 'boolean') {\n    return value ? 1 : 0;\n  }\n\n  var num = value;\n\n  if (typeof value === 'string' && value !== '') {\n    num = Number(value);\n  }\n\n  if (!isFinite(num)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return num;\n}\n\nfunction coerceFloat(value) {\n  if (!isFinite(value)) {\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional ' + 'values as specified by ' + '[IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). ',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.FLOAT || ast.kind === Kind.INT ? parseFloat(ast.value) : undefined;\n  }\n});\n\nfunction serializeString(value) {\n  // Support serializing objects with custom valueOf() functions - a common way\n  // to represent an complex value which can be represented as a string\n  // (ex: MongoDB id objects).\n  var result = value && typeof value.valueOf === 'function' ? value.valueOf() : value; // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof result === 'string') {\n    return result;\n  }\n\n  if (typeof result === 'boolean') {\n    return result ? 'true' : 'false';\n  }\n\n  if (isFinite(result)) {\n    return result.toString();\n  }\n\n  throw new TypeError(\"String cannot represent value: \".concat(inspect(value)));\n}\n\nfunction coerceString(value) {\n  if (typeof value !== 'string') {\n    throw new TypeError(\"String cannot represent a non string value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 ' + 'character sequences. The String type is most often used by GraphQL to ' + 'represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING ? ast.value : undefined;\n  }\n});\n\nfunction serializeBoolean(value) {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  if (isFinite(value)) {\n    return value !== 0;\n  }\n\n  throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n}\n\nfunction coerceBoolean(value) {\n  if (typeof value !== 'boolean') {\n    throw new TypeError(\"Boolean cannot represent a non boolean value: \".concat(inspect(value)));\n  }\n\n  return value;\n}\n\nexport var GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.BOOLEAN ? ast.value : undefined;\n  }\n});\n\nfunction serializeID(value) {\n  // Support serializing objects with custom valueOf() functions - a common way\n  // to represent an object identifier (ex. MongoDB).\n  var result = value && typeof value.valueOf === 'function' ? value.valueOf() : value;\n\n  if (typeof result === 'string') {\n    return result;\n  }\n\n  if (isInteger(result)) {\n    return String(result);\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nfunction coerceID(value) {\n  if (typeof value === 'string') {\n    return value;\n  }\n\n  if (isInteger(value)) {\n    return value.toString();\n  }\n\n  throw new TypeError(\"ID cannot represent value: \".concat(inspect(value)));\n}\n\nexport var GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to ' + 'refetch an object or as key for a cache. The ID type appears in a JSON ' + 'response as a String; however, it is not intended to be human-readable. ' + 'When expected as an input type, any string (such as `\"4\"`) or integer ' + '(such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n  parseLiteral: function parseLiteral(ast) {\n    return ast.kind === Kind.STRING || ast.kind === Kind.INT ? ast.value : undefined;\n  }\n});\nexport var specifiedScalarTypes = [GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID];\nexport function isSpecifiedScalarType(type) {\n  return isNamedType(type) && ( // Would prefer to use specifiedScalarTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === GraphQLString.name || type.name === GraphQLInt.name || type.name === GraphQLFloat.name || type.name === GraphQLBoolean.name || type.name === GraphQLID.name);\n}"]},"metadata":{},"sourceType":"module"}