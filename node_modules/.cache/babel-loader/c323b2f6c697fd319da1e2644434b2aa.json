{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from './GraphQLError';\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/error/locatedError.mjs"],"names":["GraphQLError","locatedError","originalError","nodes","path","Array","isArray","message","source","positions"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,YAAT,QAA6B,gBAA7B;AAEA;;;;;;AAKA,OAAO,SAASC,YAAT,CAAsBC,aAAtB,EAAqCC,KAArC,EAA4CC,IAA5C,EAAkD;AACvD;AACA;AACA,MAAIF,aAAa,IAAIG,KAAK,CAACC,OAAN,CAAcJ,aAAa,CAACE,IAA5B,CAArB,EAAwD;AACtD,WAAOF,aAAP;AACD;;AAED,SAAO,IAAIF,YAAJ,CAAiBE,aAAa,IAAIA,aAAa,CAACK,OAAhD,EAAyDL,aAAa,IAAIA,aAAa,CAACC,KAA/B,IAAwCA,KAAjG,EAAwGD,aAAa,IAAIA,aAAa,CAACM,MAAvI,EAA+IN,aAAa,IAAIA,aAAa,CAACO,SAA9K,EAAyLL,IAAzL,EAA+LF,aAA/L,CAAP;AACD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from './GraphQLError';\n\n/**\n * Given an arbitrary Error, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\nexport function locatedError(originalError, nodes, path) {\n  // Note: this uses a brand-check to support GraphQL errors originating from\n  // other contexts.\n  if (originalError && Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError && originalError.message, originalError && originalError.nodes || nodes, originalError && originalError.source, originalError && originalError.positions, path, originalError);\n}"]},"metadata":{},"sourceType":"module"}