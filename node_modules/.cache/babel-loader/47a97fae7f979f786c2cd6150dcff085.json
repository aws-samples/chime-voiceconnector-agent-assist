{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\nimport AWS from'aws-sdk';import{Auth}from'aws-amplify';import awsExports from'../aws-exports';import{SEARCH_LAMBDA_FUNCTION_NAME,TRANSCRIPT_TABLE_NAME,MAX_RESULT,TRANSCRIPT_TABLE_KEYS,ELASTIC_SEARCH_INDEX_NAMES}from'../constants';const defaultRegion=awsExports.aws_project_region;AWS.config.update({region:defaultRegion});const config={searchFunctionName:SEARCH_LAMBDA_FUNCTION_NAME,transcriptTableName:TRANSCRIPT_TABLE_NAME,maxRecords:MAX_RESULT};export function getSignedUrl(bucket,objectKey){return Auth.currentCredentials().then(creds=>{const s3=new AWS.S3({region:defaultRegion,credentials:Auth.essentialCredentials(creds),signatureVersion:'v4'});return s3.getSignedUrlPromise('getObject',{Bucket:bucket,Key:objectKey});});}export function retrieveBucketAndKey(transactionid){return Auth.currentCredentials().then(creds=>{const lambda=new AWS.Lambda({region:defaultRegion,credentials:Auth.essentialCredentials(creds)});const params={FunctionName:config.searchFunctionName,InvocationType:'RequestResponse'};const esParams={index:ELASTIC_SEARCH_INDEX_NAMES.WAVFILE,type:'_doc',body:{size:2,query:{query_string:{default_field:TRANSCRIPT_TABLE_KEYS.TRANSACTION_ID,query:transactionid}}},output:['Bucket','Key','Time']};params['Payload']=Buffer.from(JSON.stringify(esParams));return lambda.invoke(params).promise().then(data=>{const body=JSON.parse(data.Payload).body;if(body===undefined||body===[]){return[];}return JSON.parse(data.Payload).body.Records;});});}export function retrieveTranscriptForTransactionId(transactionId){return Auth.currentCredentials().then(creds=>{const ddb=new AWS.DynamoDB.DocumentClient({region:defaultRegion,credentials:Auth.essentialCredentials(creds)});const params={TableName:config.transcriptTableName,KeyConditionExpression:'#id = :id',ExpressionAttributeNames:{'#id':TRANSCRIPT_TABLE_KEYS.TRANSACTION_ID},ExpressionAttributeValues:{':id':transactionId}};return ddb.query(params).promise().then(data=>{if(data.Count===0){return[];}return data.Items.filter(item=>item.IsFinal!==true);});});}export function queryCall(keyword){return Promise.all([queryTranscriptKeyword(keyword),queryMetadataForKeyword(keyword)]).then(results=>{// First step: find transaction id of the call that is correlated to the keyword.\nconst transcriptionPromises=results[0],metadataPromises=results[1];return Promise.all([keyword,transcriptionPromises.map(d=>{return queryMetadataForKeyword(d.TransactionId).then(metadata=>{// Metadata should correlate with only one transactionId.\nif(metadata.length===1){return metadata[0];}});}),metadataPromises]);}).then(promise=>{// Second step: extract data for frontend.\nconst metadata=[...promise[1],...promise[2]];const result=metadata.map(d=>{const fromNumber=d.fromNumber!==undefined||d.fromNumber!==null?d.fromNumber:\"Unknown\";return{TransactionId:d.transactionId,Direction:d.direction,StartTimeEpochSeconds:Math.ceil(new Date(d.startTime)/1000),EndTimeEpochSeconds:Math.ceil(new Date(d.endTime)/1000),SourcePhoneNumber:fromNumber};});return new Promise(resolve=>resolve(result));});}function queryMetadataForKeyword(keyword){return Auth.currentCredentials().then(creds=>{const lambda=new AWS.Lambda({region:defaultRegion,credentials:Auth.essentialCredentials(creds)});const params={FunctionName:config.searchFunctionName,InvocationType:'RequestResponse'};const esParams={index:ELASTIC_SEARCH_INDEX_NAMES.METADATA,type:'_doc',body:{size:config.maxRecords,sort:{startTime:{order:'desc'}},query:{multi_match:{type:'best_fields',query:keyword}}},output:[]};params['Payload']=Buffer.from(JSON.stringify(esParams));return lambda.invoke(params).promise().then(data=>{const body=JSON.parse(data.Payload).body;if(body===undefined||body===[]){return[];}return JSON.parse(data.Payload).body.Records;});});}export function queryTranscriptKeyword(keyword){return Auth.currentCredentials().then(creds=>{const lambda=new AWS.Lambda({region:defaultRegion,credentials:Auth.essentialCredentials(creds)});const params={FunctionName:config.searchFunctionName,InvocationType:'RequestResponse'};const esParams={index:ELASTIC_SEARCH_INDEX_NAMES.TRANSCRIPT,type:'_doc',body:{size:config.maxRecords,query:{match:{Transcript:{query:keyword,operator:'and'}}}},output:[]};params['Payload']=Buffer.from(JSON.stringify(esParams));return lambda.invoke(params).promise().then(data=>{const body=JSON.parse(data.Payload).body;if(body===undefined||body===[]){return[];}return JSON.parse(data.Payload).body.Records;});});}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/src/utils/elasticsearch.js"],"names":["AWS","Auth","awsExports","SEARCH_LAMBDA_FUNCTION_NAME","TRANSCRIPT_TABLE_NAME","MAX_RESULT","TRANSCRIPT_TABLE_KEYS","ELASTIC_SEARCH_INDEX_NAMES","defaultRegion","aws_project_region","config","update","region","searchFunctionName","transcriptTableName","maxRecords","getSignedUrl","bucket","objectKey","currentCredentials","then","creds","s3","S3","credentials","essentialCredentials","signatureVersion","getSignedUrlPromise","Bucket","Key","retrieveBucketAndKey","transactionid","lambda","Lambda","params","FunctionName","InvocationType","esParams","index","WAVFILE","type","body","size","query","query_string","default_field","TRANSACTION_ID","output","Buffer","from","JSON","stringify","invoke","promise","data","parse","Payload","undefined","Records","retrieveTranscriptForTransactionId","transactionId","ddb","DynamoDB","DocumentClient","TableName","KeyConditionExpression","ExpressionAttributeNames","ExpressionAttributeValues","Count","Items","filter","item","IsFinal","queryCall","keyword","Promise","all","queryTranscriptKeyword","queryMetadataForKeyword","results","transcriptionPromises","metadataPromises","map","d","TransactionId","metadata","length","result","fromNumber","Direction","direction","StartTimeEpochSeconds","Math","ceil","Date","startTime","EndTimeEpochSeconds","endTime","SourcePhoneNumber","resolve","METADATA","sort","order","multi_match","TRANSCRIPT","match","Transcript","operator"],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport AWS from 'aws-sdk';\nimport { Auth } from 'aws-amplify';\n\nimport awsExports from '../aws-exports';\nimport {\n  SEARCH_LAMBDA_FUNCTION_NAME,\n  TRANSCRIPT_TABLE_NAME,\n  MAX_RESULT,\n  TRANSCRIPT_TABLE_KEYS,\n  ELASTIC_SEARCH_INDEX_NAMES,\n} from '../constants';\n\nconst defaultRegion = awsExports.aws_project_region;\nAWS.config.update({ region: defaultRegion });\n\nconst config = {\n  searchFunctionName: SEARCH_LAMBDA_FUNCTION_NAME,\n  transcriptTableName: TRANSCRIPT_TABLE_NAME,\n  maxRecords: MAX_RESULT,\n};\n\nexport function getSignedUrl(bucket, objectKey) {\n  return Auth.currentCredentials().then(creds => {\n    const s3 = new AWS.S3({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n      signatureVersion: 'v4',\n    });\n\n    return s3.getSignedUrlPromise('getObject', { Bucket: bucket, Key: objectKey });\n  });\n}\n\nexport function retrieveBucketAndKey(transactionid) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n    const params = {\n      FunctionName: config.searchFunctionName,\n      InvocationType: 'RequestResponse',\n    };\n\n    const esParams = {\n      index: ELASTIC_SEARCH_INDEX_NAMES.WAVFILE,\n      type: '_doc',\n      body: {\n        size: 2,\n        query: {\n          query_string: {\n            default_field: TRANSCRIPT_TABLE_KEYS.TRANSACTION_ID,\n            query: transactionid,\n          },\n        },\n      },\n      output: ['Bucket', 'Key', 'Time'],\n    };\n    params['Payload'] = Buffer.from(JSON.stringify(esParams));\n\n    return lambda\n      .invoke(params)\n      .promise()\n      .then((data) => {\n        const body = JSON.parse(data.Payload).body;\n        if (body === undefined || body === []) {\n          return [];\n        }\n        return JSON.parse(data.Payload).body.Records;\n      });\n  });\n}\n\nexport function retrieveTranscriptForTransactionId(transactionId) {\n  return Auth.currentCredentials().then(creds => {\n    const ddb = new AWS.DynamoDB.DocumentClient({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      TableName: config.transcriptTableName,\n      KeyConditionExpression: '#id = :id',\n      ExpressionAttributeNames: {\n        '#id': TRANSCRIPT_TABLE_KEYS.TRANSACTION_ID,\n      },\n      ExpressionAttributeValues: {\n        ':id': transactionId,\n      },\n    };\n\n    return ddb\n      .query(params)\n      .promise()\n      .then((data) => {\n        if (data.Count === 0) {\n          return [];\n        }\n\n        return data.Items.filter(item => item.IsFinal !== true);\n      });\n  });\n}\n\nexport function queryCall(keyword) {\n  return Promise.all([queryTranscriptKeyword(keyword), queryMetadataForKeyword(keyword)]).then(results => {\n      // First step: find transaction id of the call that is correlated to the keyword.\n      const transcriptionPromises = results[0], metadataPromises = results[1];\n      return Promise.all([keyword,\n        transcriptionPromises.map(d => {\n          return queryMetadataForKeyword(d.TransactionId).then(metadata => {\n            // Metadata should correlate with only one transactionId.\n            if (metadata.length === 1) {\n              return metadata[0];\n            }\n          });\n        }),\n        metadataPromises\n      ]);\n    }).then(promise => {\n      // Second step: extract data for frontend.\n      const metadata = [...promise[1], ...promise[2]]\n      const result = metadata.map(d => {\n        const fromNumber = (d.fromNumber !== undefined || d.fromNumber !== null) ? d.fromNumber : \"Unknown\";\n        return {\n          TransactionId: d.transactionId,\n          Direction: d.direction,\n          StartTimeEpochSeconds: Math.ceil(new Date(d.startTime) / 1000),\n          EndTimeEpochSeconds: Math.ceil(new Date(d.endTime) / 1000),\n          SourcePhoneNumber: fromNumber,\n        }\n      });\n\n      return new Promise(resolve => resolve(result));\n    })\n}\n\nfunction queryMetadataForKeyword(keyword) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      FunctionName: config.searchFunctionName,\n      InvocationType: 'RequestResponse',\n    };\n\n    const esParams = {\n      index: ELASTIC_SEARCH_INDEX_NAMES.METADATA,\n      type: '_doc',\n      body: {\n        size: config.maxRecords,\n        sort: { startTime: { order: 'desc' } },\n        query: {\n          multi_match: {\n            type: 'best_fields',\n            query: keyword,\n          },\n        },\n      },\n      output: [],\n    };\n\n    params['Payload'] = Buffer.from(JSON.stringify(esParams));\n    return lambda\n      .invoke(params)\n      .promise()\n      .then((data) => {\n        const body = JSON.parse(data.Payload).body;\n        if (body === undefined || body === []) {\n          return [];\n        }\n        return JSON.parse(data.Payload).body.Records;\n      });\n  });\n}\n\nexport function queryTranscriptKeyword(keyword) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      FunctionName: config.searchFunctionName,\n      InvocationType: 'RequestResponse',\n    };\n\n    const esParams = {\n      index: ELASTIC_SEARCH_INDEX_NAMES.TRANSCRIPT,\n      type: '_doc',\n      body: {\n        size: config.maxRecords,\n        query: {\n          match: {\n            Transcript: {\n              query: keyword,\n              operator: 'and',\n            },\n          },\n        },\n      },\n      output: [],\n    };\n\n    params['Payload'] = Buffer.from(JSON.stringify(esParams));\n    return lambda\n      .invoke(params)\n      .promise()\n      .then((data) => {\n        const body = JSON.parse(data.Payload).body;\n        if (body === undefined || body === []) {\n          return [];\n        }\n        return JSON.parse(data.Payload).body.Records;\n      });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}