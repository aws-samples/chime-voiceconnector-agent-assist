{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport Amplify from './Amplify';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\n\nvar Credentials =\n/** @class */\nfunction () {\n  function Credentials(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n\n  Credentials.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n\n  Credentials.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers; // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n\n    this._storage = this._config.storage;\n\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n\n    this._storageSync = Promise.resolve();\n\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n\n    return this._config;\n  };\n\n  Credentials.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n\n  Credentials.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n\n      if (AWS.config && AWS.config.credentials && AWS.config.credentials instanceof AWS.Credentials) {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._setCredentialsFromAWS());\n      } else {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n      }\n    } else {\n      logger.debug('getting old cred promise');\n    }\n\n    return this._gettingCredPromise;\n  };\n\n  Credentials.prototype._keepAlive = function () {\n    logger.debug('checking if credentials exists and not expired');\n    var cred = this._credentials;\n\n    if (cred && !this._isExpired(cred)) {\n      logger.debug('credentials not changed and not expired, directly return');\n      return Promise.resolve(cred);\n    }\n\n    logger.debug('need to get a new credential or refresh the existing one');\n\n    if (Amplify.Auth && typeof Amplify.Auth.currentUserCredentials === 'function') {\n      return Amplify.Auth.currentUserCredentials();\n    } else {\n      return Promise.reject('No Auth module registered in Amplify');\n    }\n  };\n\n  Credentials.prototype.refreshFederatedToken = function (federatedInfo) {\n    var _this = this;\n\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n        user = federatedInfo.user;\n    var token = federatedInfo.token,\n        expires_at = federatedInfo.expires_at,\n        identity_id = federatedInfo.identity_id;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return that._refreshHandlers[provider]().then(function (data) {\n          logger.debug('refresh federated token sucessfully', data);\n          token = data.token;\n          identity_id = data.identity_id;\n          expires_at = data.expires_at;\n          return that._setCredentialsFromFederation({\n            provider: provider,\n            token: token,\n            user: user,\n            identity_id: identity_id,\n            expires_at: expires_at\n          });\n        }).catch(function (e) {\n          logger.debug('refresh federated token failed', e);\n\n          _this.clear();\n\n          return Promise.reject('refreshing federation token failed: ' + e);\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n\n  Credentials.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n\n    logger.debug('is this credentials expired?', credentials);\n    var ts = new Date().getTime();\n    var delta = 10 * 60 * 1000; // 10 minutes\n\n    var expired = credentials.expired,\n        expireTime = credentials.expireTime;\n\n    if (!expired && expireTime > ts + delta && ts < this._nextCredentialsRefresh) {\n      return false;\n    }\n\n    return true;\n  };\n\n  Credentials.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var attempted, _a, identityPoolId, region, mandatorySignIn, identityId, e_1, credentials, that;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            attempted = false;\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n\n            if (mandatorySignIn) {\n              return [2\n              /*return*/\n              , Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n\n            if (!identityPoolId) {\n              logger.debug('No Cognito Federated Identity pool provided');\n              return [2\n              /*return*/\n              , Promise.reject('No Cognito Federated Identity pool provided')];\n            }\n\n            identityId = undefined;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this._storageSync];\n\n          case 2:\n            _b.sent();\n\n            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _b.sent();\n            logger.debug('Failed to get the cached identityId', e_1);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            credentials = new AWS.CognitoIdentityCredentials({\n              IdentityPoolId: identityPoolId,\n              IdentityId: identityId ? identityId : undefined\n            }, {\n              region: region\n            });\n            that = this;\n            return [2\n            /*return*/\n            , this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var newCredentials;\n                return __generator(this, function (_a) {\n                  // If identity id is deleted in the console, we make one attempt to recreate it\n                  // and remove existing id from cache.\n                  if (e.code === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\" && !attempted) {\n                    attempted = true;\n                    logger.debug('Failed to load guest credentials');\n\n                    this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n\n                    credentials.clearCachedId();\n                    newCredentials = new AWS.CognitoIdentityCredentials({\n                      IdentityPoolId: identityPoolId,\n                      IdentityId: undefined\n                    }, {\n                      region: region\n                    });\n                    return [2\n                    /*return*/\n                    , this._loadCredentials(newCredentials, 'guest', false, null)];\n                  } else {\n                    return [2\n                    /*return*/\n                    , e];\n                  }\n\n                  return [2\n                  /*return*/\n                  ];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  Credentials.prototype._setCredentialsFromAWS = function () {\n    var credentials = AWS.config.credentials;\n    logger.debug('setting credentials from aws');\n    var that = this;\n\n    if (credentials instanceof AWS.Credentials) {\n      return Promise.resolve(credentials);\n    } else {\n      logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n      return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n    }\n  };\n\n  Credentials.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n        token = params.token,\n        identity_id = params.identity_id,\n        user = params.user,\n        expires_at = params.expires_at;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    }; // Use custom provider url instead of the predefined ones\n\n    var domain = domains[provider] || provider;\n\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n        identityPoolId = _a.identityPoolId,\n        region = _a.region;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      IdentityId: identity_id,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n\n  Credentials.prototype._setCredentialsFromSession = function (session) {\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n        region = _a.region,\n        userPoolId = _a.userPoolId,\n        identityPoolId = _a.identityPoolId;\n\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n\n  Credentials.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n\n    var that = this;\n    var identityPoolId = this._config.identityPoolId;\n    return new Promise(function (res, rej) {\n      credentials.get(function (err) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (err) {\n                  logger.debug('Failed to load credentials', credentials);\n                  rej(err);\n                  return [2\n                  /*return*/\n                  ];\n                }\n\n                logger.debug('Load credentials successfully', credentials);\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                if (!(source === 'federated')) return [3\n                /*break*/\n                , 3];\n                user = Object.assign({\n                  id: this._credentials.identityId\n                }, info.user);\n                provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n\n                try {\n                  this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                    provider: provider,\n                    token: token,\n                    user: user,\n                    expires_at: expires_at,\n                    identity_id: identity_id\n                  }));\n                } catch (e) {\n                  logger.debug('Failed to put federated info into auth storage', e);\n                }\n\n                if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , Amplify.Cache.setItem('federatedInfo', {\n                  provider: provider,\n                  token: token,\n                  user: user,\n                  expires_at: expires_at,\n                  identity_id: identity_id\n                }, {\n                  priority: 1\n                })];\n\n              case 1:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                logger.debug('No Cache module registered in Amplify');\n                _a.label = 3;\n\n              case 3:\n                if (!(source === 'guest')) return [3\n                /*break*/\n                , 7];\n                _a.label = 4;\n\n              case 4:\n                _a.trys.push([4, 6,, 7]);\n\n                return [4\n                /*yield*/\n                , this._storageSync];\n\n              case 5:\n                _a.sent();\n\n                this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId);\n\n                return [3\n                /*break*/\n                , 7];\n\n              case 6:\n                e_2 = _a.sent();\n                logger.debug('Failed to cache identityId', e_2);\n                return [3\n                /*break*/\n                , 7];\n\n              case 7:\n                res(that._credentials);\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n    });\n  };\n\n  Credentials.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n\n  Credentials.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, credentials;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n\n            if (identityPoolId) {\n              credentials = new AWS.CognitoIdentityCredentials({\n                IdentityPoolId: identityPoolId\n              }, {\n                region: region\n              });\n              credentials.clearCachedId();\n            }\n\n            this._credentials = null;\n            this._credentials_source = null;\n\n            this._storage.removeItem('aws-amplify-federatedInfo');\n\n            if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Amplify.Cache.removeItem('federatedInfo')];\n\n          case 1:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            logger.debug('No Cache module registered in Amplify');\n            _b.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n\n\n  Credentials.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n\n  return Credentials;\n}();\n\nexport { Credentials };\nvar instance = new Credentials(null);\nexport default instance;","map":{"version":3,"sources":["../src/Credentials.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,aAAa,IAAI,MAA1B,QAAwC,UAAxC;AACA,OAAO,aAAP,MAA0B,iBAA1B;AACA,SAAS,GAAT,QAAoB,SAApB;AACA,OAAO,EAAP,MAAe,MAAf;AACA,SAAS,aAAT,EAAwB,WAAxB,QAA2C,eAA3C;AAEA,OAAO,OAAP,MAAoB,WAApB;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,aAAX,CAAf;AAEA,IAAM,eAAe,GAAG,KAAK,EAAL,GAAU,IAAlC,C,CAAwC;;AAExC,IAAA,WAAA;AAAA;AAAA,YAAA;AAUC,WAAA,WAAA,CAAY,MAAZ,EAAkB;AANV,SAAA,mBAAA,GAAsB,IAAtB;AACA,SAAA,gBAAA,GAAmB,EAAnB;AAMP,SAAK,SAAL,CAAe,MAAf;AACA,SAAK,gBAAL,CAAsB,QAAtB,IAAkC,WAAW,CAAC,kBAA9C;AACA,SAAK,gBAAL,CAAsB,UAAtB,IAAoC,aAAa,CAAC,oBAAlD;AACA;;AAEM,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACC,WAAO,KAAK,mBAAZ;AACA,GAFM;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAP,UAAiB,MAAjB,EAAuB;AACtB,QAAI,CAAC,MAAL,EAAa,OAAO,KAAK,OAAL,IAAgB,EAAvB;AAEb,SAAK,OAAL,GAAe,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,KAAK,OAAvB,EAAgC,MAAhC,CAAf;AACQ,QAAA,eAAA,GAAA,KAAA,OAAA,CAAA,eAAA,CAJc,CAKtB;AACA;;AACA,QAAI,eAAJ,EAAqB;AACpB,WAAK,gBAAL,GAAqB,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,KAAK,gBAAb,CAAA,EAAkC,eAAlC,CAArB;AACA;;AAED,SAAK,QAAL,GAAgB,KAAK,OAAL,CAAa,OAA7B;;AACA,QAAI,CAAC,KAAK,QAAV,EAAoB;AACnB,WAAK,QAAL,GAAgB,IAAI,aAAJ,GAAoB,UAApB,EAAhB;AACA;;AAED,SAAK,YAAL,GAAoB,OAAO,CAAC,OAAR,EAApB;;AACA,QAAI,OAAO,KAAK,QAAL,CAAc,MAAd,CAAP,KAAiC,UAArC,EAAiD;AAChD,WAAK,YAAL,GAAoB,KAAK,QAAL,CAAc,MAAd,GAApB;AACA;;AAED,WAAO,KAAK,OAAZ;AACA,GAtBM;;AAwBA,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,YAAA;AACC,IAAA,MAAM,CAAC,KAAP,CAAa,qBAAb;AACA,WAAO,KAAK,kBAAL,EAAP;AACA,GAHM;;AAKC,EAAA,WAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,YAAA;AACC,IAAA,MAAM,CAAC,KAAP,CAAa,wBAAb;;AACA,QAAI,CAAC,KAAK,mBAAN,IAA6B,CAAC,KAAK,mBAAL,CAAyB,SAAzB,EAAlC,EAAwE;AACvE,MAAA,MAAM,CAAC,KAAP,CAAa,0BAAb;;AACA,UACC,GAAG,CAAC,MAAJ,IACA,GAAG,CAAC,MAAJ,CAAW,WADX,IAEA,GAAG,CAAC,MAAJ,CAAW,WAAX,YAAkC,GAAG,CAAC,WAHvC,EAIE;AACD,aAAK,mBAAL,GAA2B,EAAE,CAAC,mBAAH,CAC1B,KAAK,sBAAL,EAD0B,CAA3B;AAGA,OARD,MAQO;AACN,aAAK,mBAAL,GAA2B,EAAE,CAAC,mBAAH,CAAuB,KAAK,UAAL,EAAvB,CAA3B;AACA;AACD,KAbD,MAaO;AACN,MAAA,MAAM,CAAC,KAAP,CAAa,0BAAb;AACA;;AAED,WAAO,KAAK,mBAAZ;AACA,GApBO;;AAsBA,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAR,YAAA;AACC,IAAA,MAAM,CAAC,KAAP,CAAa,gDAAb;AACA,QAAM,IAAI,GAAG,KAAK,YAAlB;;AACA,QAAI,IAAI,IAAI,CAAC,KAAK,UAAL,CAAgB,IAAhB,CAAb,EAAoC;AACnC,MAAA,MAAM,CAAC,KAAP,CAAa,0DAAb;AACA,aAAO,OAAO,CAAC,OAAR,CAAgB,IAAhB,CAAP;AACA;;AAED,IAAA,MAAM,CAAC,KAAP,CAAa,0DAAb;;AACA,QACC,OAAO,CAAC,IAAR,IACA,OAAO,OAAO,CAAC,IAAR,CAAa,sBAApB,KAA+C,UAFhD,EAGE;AACD,aAAO,OAAO,CAAC,IAAR,CAAa,sBAAb,EAAP;AACA,KALD,MAKO;AACN,aAAO,OAAO,CAAC,MAAR,CAAe,sCAAf,CAAP;AACA;AACD,GAjBO;;AAmBD,EAAA,WAAA,CAAA,SAAA,CAAA,qBAAA,GAAP,UAA6B,aAA7B,EAA0C;AAA1C,QAAA,KAAA,GAAA,IAAA;;AACC,IAAA,MAAM,CAAC,KAAP,CAAa,+BAAb;AACQ,QAAA,QAAA,GAAA,aAAA,CAAA,QAAA;AAAA,QAAU,IAAA,GAAA,aAAA,CAAA,IAAV;AACF,QAAA,KAAA,GAAA,aAAA,CAAA,KAAA;AAAA,QAAO,UAAA,GAAA,aAAA,CAAA,UAAP;AAAA,QAAmB,WAAA,GAAA,aAAA,CAAA,WAAnB;AAEN,QAAM,IAAI,GAAG,IAAb;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,yCAAb;;AACA,QAAI,UAAU,GAAG,IAAI,IAAJ,GAAW,OAAX,EAAjB,EAAuC;AACtC;AACA,MAAA,MAAM,CAAC,KAAP,CAAa,mBAAb;AACA,aAAO,KAAK,6BAAL,CAAmC;AACzC,QAAA,QAAQ,EAAA,QADiC;AAEzC,QAAA,KAAK,EAAA,KAFoC;AAGzC,QAAA,IAAI,EAAA,IAHqC;AAIzC,QAAA,WAAW,EAAA,WAJ8B;AAKzC,QAAA,UAAU,EAAA;AAL+B,OAAnC,CAAP;AAOA,KAVD,MAUO;AACN;AACA,UACC,IAAI,CAAC,gBAAL,CAAsB,QAAtB,KACA,OAAO,IAAI,CAAC,gBAAL,CAAsB,QAAtB,CAAP,KAA2C,UAF5C,EAGE;AACD,QAAA,MAAM,CAAC,KAAP,CAAa,sDAAb;AACA,eAAO,IAAI,CAAC,gBAAL,CAAsB,QAAtB,IACL,IADK,CACA,UAAA,IAAA,EAAI;AACT,UAAA,MAAM,CAAC,KAAP,CAAa,qCAAb,EAAoD,IAApD;AACA,UAAA,KAAK,GAAG,IAAI,CAAC,KAAb;AACA,UAAA,WAAW,GAAG,IAAI,CAAC,WAAnB;AACA,UAAA,UAAU,GAAG,IAAI,CAAC,UAAlB;AAEA,iBAAO,IAAI,CAAC,6BAAL,CAAmC;AACzC,YAAA,QAAQ,EAAA,QADiC;AAEzC,YAAA,KAAK,EAAA,KAFoC;AAGzC,YAAA,IAAI,EAAA,IAHqC;AAIzC,YAAA,WAAW,EAAA,WAJ8B;AAKzC,YAAA,UAAU,EAAA;AAL+B,WAAnC,CAAP;AAOA,SAdK,EAeL,KAfK,CAeC,UAAA,CAAA,EAAC;AACP,UAAA,MAAM,CAAC,KAAP,CAAa,gCAAb,EAA+C,CAA/C;;AACA,UAAA,KAAI,CAAC,KAAL;;AACA,iBAAO,OAAO,CAAC,MAAR,CAAe,yCAAyC,CAAxD,CAAP;AACA,SAnBK,CAAP;AAoBA,OAzBD,MAyBO;AACN,QAAA,MAAM,CAAC,KAAP,CAAa,kCAAb,EAAiD,QAAjD;AACA,aAAK,KAAL;AACA,eAAO,OAAO,CAAC,MAAR,CAAe,iCAAf,CAAP;AACA;AACD;AACD,GAlDM;;AAoDC,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,WAAnB,EAA8B;AAC7B,QAAI,CAAC,WAAL,EAAkB;AACjB,MAAA,MAAM,CAAC,KAAP,CAAa,qCAAb;AACA,aAAO,IAAP;AACA;;AACD,IAAA,MAAM,CAAC,KAAP,CAAa,8BAAb,EAA6C,WAA7C;AACA,QAAM,EAAE,GAAG,IAAI,IAAJ,GAAW,OAAX,EAAX;AACA,QAAM,KAAK,GAAG,KAAK,EAAL,GAAU,IAAxB,CAP6B,CAOC;;AACtB,QAAA,OAAA,GAAA,WAAA,CAAA,OAAA;AAAA,QAAS,UAAA,GAAA,WAAA,CAAA,UAAT;;AACR,QACC,CAAC,OAAD,IACA,UAAU,GAAG,EAAE,GAAG,KADlB,IAEA,EAAE,GAAG,KAAK,uBAHX,EAIE;AACD,aAAO,KAAP;AACA;;AACD,WAAO,IAAP;AACA,GAjBO;;AAmBM,EAAA,WAAA,CAAA,SAAA,CAAA,uBAAA,GAAd,YAAA;;;;;;;;;AACK,YAAA,SAAS,GAAG,KAAZ;AACJ,YAAA,MAAM,CAAC,KAAP,CAAa,+BAAb;AACM,YAAA,EAAA,GAA8C,KAAK,OAAnD,EAAE,cAAc,GAAA,EAAA,CAAA,cAAhB,EAAkB,MAAM,GAAA,EAAA,CAAA,MAAxB,EAA0B,eAAe,GAAA,EAAA,CAAA,eAAzC;;AACN,gBAAI,eAAJ,EAAqB;AACpB,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CACN,4DADM,CAAP,CAAA;AAGA;;AAED,gBAAI,CAAC,cAAL,EAAqB;AACpB,cAAA,MAAM,CAAC,KAAP,CAAa,6CAAb;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAO,OAAO,CAAC,MAAR,CAAe,6CAAf,CAAP,CAAA;AACA;;AAEG,YAAA,UAAU,GAAG,SAAb;;;;;;AAEH,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAX,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,YAAA,UAAU,GAAG,KAAK,QAAL,CAAc,OAAd,CAAsB,uBAAuB,cAA7C,CAAb;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,qCAAb,EAAoD,GAApD;;;;;;AAGK,YAAA,WAAW,GAAG,IAAI,GAAG,CAAC,0BAAR,CACnB;AACC,cAAA,cAAc,EAAE,cADjB;AAEC,cAAA,UAAU,EAAE,UAAU,GAAG,UAAH,GAAgB;AAFvC,aADmB,EAKnB;AACC,cAAA,MAAM,EAAA;AADP,aALmB,CAAd;AAUA,YAAA,IAAI,GAAG,IAAP;AACN,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,OAAnC,EAA4C,KAA5C,EAAmD,IAAnD,EACL,IADK,CACA,UAAA,GAAA,EAAG;AACR,qBAAO,GAAP;AACA,aAHK,EAIL,KAJK,CAIC,UAAM,CAAN,EAAO;AAAA,qBAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;AACb;AACA;AACA,sBACC,CAAC,CAAC,IAAF,KAAW,2BAAX,IACA,CAAC,CAAC,OAAF,KAAc,eAAa,UAAb,GAAuB,cADrC,IAEA,CAAC,SAHF,EAIE;AACD,oBAAA,SAAS,GAAG,IAAZ;AACA,oBAAA,MAAM,CAAC,KAAP,CAAa,kCAAb;;AACA,yBAAK,QAAL,CAAc,UAAd,CAAyB,uBAAuB,cAAhD;;AACA,oBAAA,WAAW,CAAC,aAAZ;AACM,oBAAA,cAAc,GAAG,IAAI,GAAG,CAAC,0BAAR,CACtB;AACC,sBAAA,cAAc,EAAE,cADjB;AAEC,sBAAA,UAAU,EAAE;AAFb,qBADsB,EAKtB;AACC,sBAAA,MAAM,EAAA;AADP,qBALsB,CAAjB;AASN,2BAAA,CAAA;AAAA;AAAA,sBAAO,KAAK,gBAAL,CAAsB,cAAtB,EAAsC,OAAtC,EAA+C,KAA/C,EAAsD,IAAtD,CAAP,CAAA;AACA,mBAnBD,MAmBO;AACN,2BAAA,CAAA;AAAA;AAAA,sBAAO,CAAP,CAAA;AACA;;;;;;eAxBY,CAAA;AAyBb,aA7BK,CAAP,CAAA;;;;AA8BA,GAhEa;;AAkEN,EAAA,WAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AACC,QAAM,WAAW,GAAG,GAAG,CAAC,MAAJ,CAAW,WAA/B;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,8BAAb;AACA,QAAM,IAAI,GAAG,IAAb;;AACA,QAAI,WAAW,YAAY,GAAG,CAAC,WAA/B,EAA4C;AAC3C,aAAO,OAAO,CAAC,OAAR,CAAgB,WAAhB,CAAP;AACA,KAFD,MAEO;AACN,MAAA,MAAM,CAAC,KAAP,CACC,8DADD;AAGA,aAAO,OAAO,CAAC,MAAR,CACN,8DADM,CAAP;AAGA;AACD,GAdO;;AAgBA,EAAA,WAAA,CAAA,SAAA,CAAA,6BAAA,GAAR,UAAsC,MAAtC,EAA4C;AACnC,QAAA,QAAA,GAAA,MAAA,CAAA,QAAA;AAAA,QAAU,KAAA,GAAA,MAAA,CAAA,KAAV;AAAA,QAAiB,WAAA,GAAA,MAAA,CAAA,WAAjB;AAAA,QAA8B,IAAA,GAAA,MAAA,CAAA,IAA9B;AAAA,QAAoC,UAAA,GAAA,MAAA,CAAA,UAApC;AACR,QAAM,OAAO,GAAG;AACf,MAAA,MAAM,EAAE,qBADO;AAEf,MAAA,QAAQ,EAAE,oBAFK;AAGf,MAAA,MAAM,EAAE,gBAHO;AAIf,MAAA,SAAS,EAAE;AAJI,KAAhB,CAF2C,CAS3C;;AACA,QAAM,MAAM,GAAG,OAAO,CAAC,QAAD,CAAP,IAAqB,QAApC;;AACA,QAAI,CAAC,MAAL,EAAa;AACZ,aAAO,OAAO,CAAC,MAAR,CAAe,uCAAf,CAAP;AACA;;AAED,QAAM,MAAM,GAAG,EAAf;AACA,IAAA,MAAM,CAAC,MAAD,CAAN,GAAiB,KAAjB;AAEM,QAAA,EAAA,GAAA,KAAA,OAAA;AAAA,QAAE,cAAA,GAAA,EAAA,CAAA,cAAF;AAAA,QAAkB,MAAA,GAAA,EAAA,CAAA,MAAlB;;AACN,QAAI,CAAC,cAAL,EAAqB;AACpB,MAAA,MAAM,CAAC,KAAP,CAAa,6CAAb;AACA,aAAO,OAAO,CAAC,MAAR,CAAe,6CAAf,CAAP;AACA;;AACD,QAAM,WAAW,GAAG,IAAI,GAAG,CAAC,0BAAR,CACnB;AACC,MAAA,cAAc,EAAE,cADjB;AAEC,MAAA,UAAU,EAAE,WAFb;AAGC,MAAA,MAAM,EAAE;AAHT,KADmB,EAMnB;AACC,MAAA,MAAM,EAAA;AADP,KANmB,CAApB;AAWA,WAAO,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,WAAnC,EAAgD,IAAhD,EAAsD,MAAtD,CAAP;AACA,GAnCO;;AAqCA,EAAA,WAAA,CAAA,SAAA,CAAA,0BAAA,GAAR,UAAmC,OAAnC,EAA0C;AACzC,IAAA,MAAM,CAAC,KAAP,CAAa,8BAAb;AACA,QAAM,OAAO,GAAG,OAAO,CAAC,UAAR,GAAqB,WAArB,EAAhB;AACM,QAAA,EAAA,GAAA,KAAA,OAAA;AAAA,QAAE,MAAA,GAAA,EAAA,CAAA,MAAF;AAAA,QAAU,UAAA,GAAA,EAAA,CAAA,UAAV;AAAA,QAAsB,cAAA,GAAA,EAAA,CAAA,cAAtB;;AACN,QAAI,CAAC,cAAL,EAAqB;AACpB,MAAA,MAAM,CAAC,KAAP,CAAa,6CAAb;AACA,aAAO,OAAO,CAAC,MAAR,CAAe,6CAAf,CAAP;AACA;;AACD,QAAM,GAAG,GAAG,iBAAiB,MAAjB,GAA0B,iBAA1B,GAA8C,UAA1D;AACA,QAAM,MAAM,GAAG,EAAf;AACA,IAAA,MAAM,CAAC,GAAD,CAAN,GAAc,OAAd;AACA,QAAM,WAAW,GAAG,IAAI,GAAG,CAAC,0BAAR,CACnB;AACC,MAAA,cAAc,EAAE,cADjB;AAEC,MAAA,MAAM,EAAE;AAFT,KADmB,EAKnB;AACC,MAAA,MAAM,EAAA;AADP,KALmB,CAApB;AAUA,WAAO,KAAK,gBAAL,CAAsB,WAAtB,EAAmC,UAAnC,EAA+C,IAA/C,EAAqD,IAArD,CAAP;AACA,GAtBO;;AAwBA,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,UACC,WADD,EAEC,MAFD,EAGC,aAHD,EAIC,IAJD,EAIK;AAJL,QAAA,KAAA,GAAA,IAAA;;AAMC,QAAM,IAAI,GAAG,IAAb;AACQ,QAAA,cAAA,GAAA,KAAA,OAAA,CAAA,cAAA;AACR,WAAO,IAAI,OAAJ,CAAY,UAAC,GAAD,EAAM,GAAN,EAAS;AAC3B,MAAA,WAAW,CAAC,GAAZ,CAAgB,UAAM,GAAN,EAAS;AAAA,eAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AACxB,oBAAI,GAAJ,EAAS;AACR,kBAAA,MAAM,CAAC,KAAP,CAAa,4BAAb,EAA2C,WAA3C;AACA,kBAAA,GAAG,CAAC,GAAD,CAAH;AACA,yBAAA,CAAA;AAAA;AAAA,mBAAA;AACA;;AAED,gBAAA,MAAM,CAAC,KAAP,CAAa,+BAAb,EAA8C,WAA9C;AACA,gBAAA,IAAI,CAAC,YAAL,GAAoB,WAApB;AACA,gBAAA,IAAI,CAAC,YAAL,CAAkB,aAAlB,GAAkC,aAAlC;AACA,gBAAA,IAAI,CAAC,mBAAL,GAA2B,MAA3B;AACA,gBAAA,IAAI,CAAC,uBAAL,GAA+B,IAAI,IAAJ,GAAW,OAAX,KAAuB,eAAtD;oBACI,EAAA,MAAM,KAAK,WAAX,C,EAAA,OAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;AACG,gBAAA,IAAI,GAAG,MAAM,CAAC,MAAP,CACZ;AAAE,kBAAA,EAAE,EAAE,KAAK,YAAL,CAAkB;AAAxB,iBADY,EAEZ,IAAI,CAAC,IAFO,CAAP;AAIE,gBAAA,QAAQ,GAAqC,IAAI,CAAzC,QAAR,EAAU,KAAK,GAA8B,IAAI,CAAlC,KAAf,EAAiB,UAAU,GAAkB,IAAI,CAAtB,UAA3B,EAA6B,WAAW,GAAK,IAAI,CAAT,WAAxC;;AACR,oBAAI;AACH,uBAAK,QAAL,CAAc,OAAd,CACC,2BADD,EAEC,IAAI,CAAC,SAAL,CAAe;AACd,oBAAA,QAAQ,EAAA,QADM;AAEd,oBAAA,KAAK,EAAA,KAFS;AAGd,oBAAA,IAAI,EAAA,IAHU;AAId,oBAAA,UAAU,EAAA,UAJI;AAKd,oBAAA,WAAW,EAAA;AALG,mBAAf,CAFD;AAUA,iBAXD,CAWE,OAAO,CAAP,EAAU;AACX,kBAAA,MAAM,CAAC,KAAP,CAAa,gDAAb,EAA+D,CAA/D;AACA;;oBAGG,EAAA,OAAO,CAAC,KAAR,IAAiB,OAAO,OAAO,CAAC,KAAR,CAAc,OAArB,KAAiC,UAAlD,C,EAAA,OAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;AACH,uBAAA,CAAA;AAAA;AAAA,kBAAM,OAAO,CAAC,KAAR,CAAc,OAAd,CACL,eADK,EAEL;AACC,kBAAA,QAAQ,EAAA,QADT;AAEC,kBAAA,KAAK,EAAA,KAFN;AAGC,kBAAA,IAAI,EAAA,IAHL;AAIC,kBAAA,UAAU,EAAA,UAJX;AAKC,kBAAA,WAAW,EAAA;AALZ,iBAFK,EASL;AAAE,kBAAA,QAAQ,EAAE;AAAZ,iBATK,CAAN,CAAA;;;AAAA,gBAAA,EAAA,CAAA,IAAA;;;;;;;AAYA,gBAAA,MAAM,CAAC,KAAP,CAAa,uCAAb;;;;oBAGE,EAAA,MAAM,KAAK,OAAX,C,EAAA,OAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;;;;;;AAEF,uBAAA,CAAA;AAAA;AAAA,kBAAM,KAAK,YAAX,CAAA;;;AAAA,gBAAA,EAAA,CAAA,IAAA;;AACA,qBAAK,QAAL,CAAc,OAAd,CACC,uBAAuB,cADxB,EAEC,WAAW,CAAC,UAFb;;;;;;;;AAKA,gBAAA,MAAM,CAAC,KAAP,CAAa,4BAAb,EAA2C,GAA3C;;;;;;AAGF,gBAAA,GAAG,CAAC,IAAI,CAAC,YAAN,CAAH;AACA,uBAAA,CAAA;AAAA;AAAA,iBAAA;;;SA9DwB,CAAA;AA+DxB,OA/DD;AAgEA,KAjEM,CAAP;AAkEA,GA1EO;;AA4ED,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,MAAX,EAAmB,MAAnB,EAAyB;AACxB,QAAI,MAAM,KAAK,SAAf,EAA0B;AACzB,aAAO,KAAK,0BAAL,CAAgC,MAAhC,CAAP;AACA,KAFD,MAEO,IAAI,MAAM,KAAK,YAAf,EAA6B;AACnC,aAAO,KAAK,6BAAL,CAAmC,MAAnC,CAAP;AACA,KAFM,MAEA,IAAI,MAAM,KAAK,OAAf,EAAwB;AAC9B,aAAO,KAAK,uBAAL,EAAP;AACA,KAFM,MAEA;AACN,MAAA,MAAM,CAAC,KAAP,CAAa,6CAAb;AACA,aAAO,OAAO,CAAC,MAAR,CAAe,gBAAf,CAAP;AACA;AACD,GAXM;;AAaM,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAb,YAAA;;;;;;;AACO,YAAA,EAAA,GAA6B,KAAK,OAAlC,EAAE,cAAc,GAAA,EAAA,CAAA,cAAhB,EAAkB,MAAM,GAAA,EAAA,CAAA,MAAxB;;AACN,gBAAI,cAAJ,EAAoB;AAEb,cAAA,WAAW,GAAG,IAAI,GAAG,CAAC,0BAAR,CACnB;AACC,gBAAA,cAAc,EAAE;AADjB,eADmB,EAInB;AACC,gBAAA,MAAM,EAAA;AADP,eAJmB,CAAd;AAQN,cAAA,WAAW,CAAC,aAAZ;AACA;;AACD,iBAAK,YAAL,GAAoB,IAApB;AACA,iBAAK,mBAAL,GAA2B,IAA3B;;AACA,iBAAK,QAAL,CAAc,UAAd,CAAyB,2BAAzB;;gBAII,EAAA,OAAO,CAAC,KAAR,IAAiB,OAAO,OAAO,CAAC,KAAR,CAAc,OAArB,KAAiC,UAAlD,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACH,mBAAA,CAAA;AAAA;AAAA,cAAM,OAAO,CAAC,KAAR,CAAc,UAAd,CAAyB,eAAzB,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;AAEA,YAAA,MAAM,CAAC,KAAP,CAAa,uCAAb;;;;;;;;;;AAED,GAzBY;AA2Bb;;;;;;;AAKO,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,WAAb,EAAwB;AACvB,WAAO;AACN,MAAA,WAAW,EAAE,WAAW,CAAC,WADnB;AAEN,MAAA,YAAY,EAAE,WAAW,CAAC,YAFpB;AAGN,MAAA,eAAe,EAAE,WAAW,CAAC,eAHvB;AAIN,MAAA,UAAU,EAAE,WAAW,CAAC,UAJlB;AAKN,MAAA,aAAa,EAAE,WAAW,CAAC;AALrB,KAAP;AAOA,GARM;;AASR,SAAA,WAAA;AAAC,CAlbD,EAAA;;;AAobA,IAAM,QAAQ,GAAG,IAAI,WAAJ,CAAgB,IAAhB,CAAjB;AAEA,eAAe,QAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport Amplify from './Amplify';\nvar logger = new Logger('Credentials');\nvar CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nvar Credentials = /** @class */ (function () {\n    function Credentials(config) {\n        this._gettingCredPromise = null;\n        this._refreshHandlers = {};\n        this.configure(config);\n        this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n        this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n    }\n    Credentials.prototype.getCredSource = function () {\n        return this._credentials_source;\n    };\n    Credentials.prototype.configure = function (config) {\n        if (!config)\n            return this._config || {};\n        this._config = Object.assign({}, this._config, config);\n        var refreshHandlers = this._config.refreshHandlers;\n        // If the developer has provided an object of refresh handlers,\n        // then we can merge the provided handlers with the current handlers.\n        if (refreshHandlers) {\n            this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n        }\n        this._storage = this._config.storage;\n        if (!this._storage) {\n            this._storage = new StorageHelper().getStorage();\n        }\n        this._storageSync = Promise.resolve();\n        if (typeof this._storage['sync'] === 'function') {\n            this._storageSync = this._storage['sync']();\n        }\n        return this._config;\n    };\n    Credentials.prototype.get = function () {\n        logger.debug('getting credentials');\n        return this._pickupCredentials();\n    };\n    Credentials.prototype._pickupCredentials = function () {\n        logger.debug('picking up credentials');\n        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n            logger.debug('getting new cred promise');\n            if (AWS.config &&\n                AWS.config.credentials &&\n                AWS.config.credentials instanceof AWS.Credentials) {\n                this._gettingCredPromise = JS.makeQuerablePromise(this._setCredentialsFromAWS());\n            }\n            else {\n                this._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n            }\n        }\n        else {\n            logger.debug('getting old cred promise');\n        }\n        return this._gettingCredPromise;\n    };\n    Credentials.prototype._keepAlive = function () {\n        logger.debug('checking if credentials exists and not expired');\n        var cred = this._credentials;\n        if (cred && !this._isExpired(cred)) {\n            logger.debug('credentials not changed and not expired, directly return');\n            return Promise.resolve(cred);\n        }\n        logger.debug('need to get a new credential or refresh the existing one');\n        if (Amplify.Auth &&\n            typeof Amplify.Auth.currentUserCredentials === 'function') {\n            return Amplify.Auth.currentUserCredentials();\n        }\n        else {\n            return Promise.reject('No Auth module registered in Amplify');\n        }\n    };\n    Credentials.prototype.refreshFederatedToken = function (federatedInfo) {\n        var _this = this;\n        logger.debug('Getting federated credentials');\n        var provider = federatedInfo.provider, user = federatedInfo.user;\n        var token = federatedInfo.token, expires_at = federatedInfo.expires_at, identity_id = federatedInfo.identity_id;\n        var that = this;\n        logger.debug('checking if federated jwt token expired');\n        if (expires_at > new Date().getTime()) {\n            // if not expired\n            logger.debug('token not expired');\n            return this._setCredentialsFromFederation({\n                provider: provider,\n                token: token,\n                user: user,\n                identity_id: identity_id,\n                expires_at: expires_at,\n            });\n        }\n        else {\n            // if refresh handler exists\n            if (that._refreshHandlers[provider] &&\n                typeof that._refreshHandlers[provider] === 'function') {\n                logger.debug('getting refreshed jwt token from federation provider');\n                return that._refreshHandlers[provider]()\n                    .then(function (data) {\n                    logger.debug('refresh federated token sucessfully', data);\n                    token = data.token;\n                    identity_id = data.identity_id;\n                    expires_at = data.expires_at;\n                    return that._setCredentialsFromFederation({\n                        provider: provider,\n                        token: token,\n                        user: user,\n                        identity_id: identity_id,\n                        expires_at: expires_at,\n                    });\n                })\n                    .catch(function (e) {\n                    logger.debug('refresh federated token failed', e);\n                    _this.clear();\n                    return Promise.reject('refreshing federation token failed: ' + e);\n                });\n            }\n            else {\n                logger.debug('no refresh handler for provider:', provider);\n                this.clear();\n                return Promise.reject('no refresh handler for provider');\n            }\n        }\n    };\n    Credentials.prototype._isExpired = function (credentials) {\n        if (!credentials) {\n            logger.debug('no credentials for expiration check');\n            return true;\n        }\n        logger.debug('is this credentials expired?', credentials);\n        var ts = new Date().getTime();\n        var delta = 10 * 60 * 1000; // 10 minutes\n        var expired = credentials.expired, expireTime = credentials.expireTime;\n        if (!expired &&\n            expireTime > ts + delta &&\n            ts < this._nextCredentialsRefresh) {\n            return false;\n        }\n        return true;\n    };\n    Credentials.prototype._setCredentialsForGuest = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var attempted, _a, identityPoolId, region, mandatorySignIn, identityId, e_1, credentials, that;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        attempted = false;\n                        logger.debug('setting credentials for guest');\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n                        if (mandatorySignIn) {\n                            return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n                        }\n                        if (!identityPoolId) {\n                            logger.debug('No Cognito Federated Identity pool provided');\n                            return [2 /*return*/, Promise.reject('No Cognito Federated Identity pool provided')];\n                        }\n                        identityId = undefined;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this._storageSync];\n                    case 2:\n                        _b.sent();\n                        identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _b.sent();\n                        logger.debug('Failed to get the cached identityId', e_1);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        credentials = new AWS.CognitoIdentityCredentials({\n                            IdentityPoolId: identityPoolId,\n                            IdentityId: identityId ? identityId : undefined,\n                        }, {\n                            region: region,\n                        });\n                        that = this;\n                        return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null)\n                                .then(function (res) {\n                                return res;\n                            })\n                                .catch(function (e) { return __awaiter(_this, void 0, void 0, function () {\n                                var newCredentials;\n                                return __generator(this, function (_a) {\n                                    // If identity id is deleted in the console, we make one attempt to recreate it\n                                    // and remove existing id from cache.\n                                    if (e.code === 'ResourceNotFoundException' &&\n                                        e.message === \"Identity '\" + identityId + \"' not found.\" &&\n                                        !attempted) {\n                                        attempted = true;\n                                        logger.debug('Failed to load guest credentials');\n                                        this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n                                        credentials.clearCachedId();\n                                        newCredentials = new AWS.CognitoIdentityCredentials({\n                                            IdentityPoolId: identityPoolId,\n                                            IdentityId: undefined,\n                                        }, {\n                                            region: region,\n                                        });\n                                        return [2 /*return*/, this._loadCredentials(newCredentials, 'guest', false, null)];\n                                    }\n                                    else {\n                                        return [2 /*return*/, e];\n                                    }\n                                    return [2 /*return*/];\n                                });\n                            }); })];\n                }\n            });\n        });\n    };\n    Credentials.prototype._setCredentialsFromAWS = function () {\n        var credentials = AWS.config.credentials;\n        logger.debug('setting credentials from aws');\n        var that = this;\n        if (credentials instanceof AWS.Credentials) {\n            return Promise.resolve(credentials);\n        }\n        else {\n            logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n            return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n        }\n    };\n    Credentials.prototype._setCredentialsFromFederation = function (params) {\n        var provider = params.provider, token = params.token, identity_id = params.identity_id, user = params.user, expires_at = params.expires_at;\n        var domains = {\n            google: 'accounts.google.com',\n            facebook: 'graph.facebook.com',\n            amazon: 'www.amazon.com',\n            developer: 'cognito-identity.amazonaws.com',\n        };\n        // Use custom provider url instead of the predefined ones\n        var domain = domains[provider] || provider;\n        if (!domain) {\n            return Promise.reject('You must specify a federated provider');\n        }\n        var logins = {};\n        logins[domain] = token;\n        var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        var credentials = new AWS.CognitoIdentityCredentials({\n            IdentityPoolId: identityPoolId,\n            IdentityId: identity_id,\n            Logins: logins,\n        }, {\n            region: region,\n        });\n        return this._loadCredentials(credentials, 'federated', true, params);\n    };\n    Credentials.prototype._setCredentialsFromSession = function (session) {\n        logger.debug('set credentials from session');\n        var idToken = session.getIdToken().getJwtToken();\n        var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;\n        if (!identityPoolId) {\n            logger.debug('No Cognito Federated Identity pool provided');\n            return Promise.reject('No Cognito Federated Identity pool provided');\n        }\n        var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n        var logins = {};\n        logins[key] = idToken;\n        var credentials = new AWS.CognitoIdentityCredentials({\n            IdentityPoolId: identityPoolId,\n            Logins: logins,\n        }, {\n            region: region,\n        });\n        return this._loadCredentials(credentials, 'userPool', true, null);\n    };\n    Credentials.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n        var _this = this;\n        var that = this;\n        var identityPoolId = this._config.identityPoolId;\n        return new Promise(function (res, rej) {\n            credentials.get(function (err) { return __awaiter(_this, void 0, void 0, function () {\n                var user, provider, token, expires_at, identity_id, e_2;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (err) {\n                                logger.debug('Failed to load credentials', credentials);\n                                rej(err);\n                                return [2 /*return*/];\n                            }\n                            logger.debug('Load credentials successfully', credentials);\n                            that._credentials = credentials;\n                            that._credentials.authenticated = authenticated;\n                            that._credentials_source = source;\n                            that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n                            if (!(source === 'federated')) return [3 /*break*/, 3];\n                            user = Object.assign({ id: this._credentials.identityId }, info.user);\n                            provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                            try {\n                                this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                                    provider: provider,\n                                    token: token,\n                                    user: user,\n                                    expires_at: expires_at,\n                                    identity_id: identity_id,\n                                }));\n                            }\n                            catch (e) {\n                                logger.debug('Failed to put federated info into auth storage', e);\n                            }\n                            if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n                            return [4 /*yield*/, Amplify.Cache.setItem('federatedInfo', {\n                                    provider: provider,\n                                    token: token,\n                                    user: user,\n                                    expires_at: expires_at,\n                                    identity_id: identity_id,\n                                }, { priority: 1 })];\n                        case 1:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            logger.debug('No Cache module registered in Amplify');\n                            _a.label = 3;\n                        case 3:\n                            if (!(source === 'guest')) return [3 /*break*/, 7];\n                            _a.label = 4;\n                        case 4:\n                            _a.trys.push([4, 6, , 7]);\n                            return [4 /*yield*/, this._storageSync];\n                        case 5:\n                            _a.sent();\n                            this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId);\n                            return [3 /*break*/, 7];\n                        case 6:\n                            e_2 = _a.sent();\n                            logger.debug('Failed to cache identityId', e_2);\n                            return [3 /*break*/, 7];\n                        case 7:\n                            res(that._credentials);\n                            return [2 /*return*/];\n                    }\n                });\n            }); });\n        });\n    };\n    Credentials.prototype.set = function (params, source) {\n        if (source === 'session') {\n            return this._setCredentialsFromSession(params);\n        }\n        else if (source === 'federation') {\n            return this._setCredentialsFromFederation(params);\n        }\n        else if (source === 'guest') {\n            return this._setCredentialsForGuest();\n        }\n        else {\n            logger.debug('no source specified for setting credentials');\n            return Promise.reject('invalid source');\n        }\n    };\n    Credentials.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, identityPoolId, region, credentials;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n                        if (identityPoolId) {\n                            credentials = new AWS.CognitoIdentityCredentials({\n                                IdentityPoolId: identityPoolId,\n                            }, {\n                                region: region,\n                            });\n                            credentials.clearCachedId();\n                        }\n                        this._credentials = null;\n                        this._credentials_source = null;\n                        this._storage.removeItem('aws-amplify-federatedInfo');\n                        if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, Amplify.Cache.removeItem('federatedInfo')];\n                    case 1:\n                        _b.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        logger.debug('No Cache module registered in Amplify');\n                        _b.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Compact version of credentials\n     * @param {Object} credentials\n     * @return {Object} - Credentials\n     */\n    Credentials.prototype.shear = function (credentials) {\n        return {\n            accessKeyId: credentials.accessKeyId,\n            sessionToken: credentials.sessionToken,\n            secretAccessKey: credentials.secretAccessKey,\n            identityId: credentials.identityId,\n            authenticated: credentials.authenticated,\n        };\n    };\n    return Credentials;\n}());\nexport { Credentials };\nvar instance = new Credentials(null);\nexport default instance;\n//# sourceMappingURL=Credentials.js.map"]},"metadata":{},"sourceType":"module"}