{"ast":null,"code":"var AWS = require('../core');\n\nvar util = require('../util');\n\nvar Rest = require('./rest');\n\nfunction populateBody(req) {\n  var input = req.service.api.operations[req.operation].input;\n  var builder = new AWS.XML.Builder();\n  var params = req.params;\n  var payload = input.payload;\n\n  if (payload) {\n    var payloadMember = input.members[payload];\n    params = params[payload];\n    if (params === undefined) return;\n\n    if (payloadMember.type === 'structure') {\n      var rootElement = payloadMember.name;\n      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);\n    } else {\n      // non-xml payload\n      req.httpRequest.body = params;\n    }\n  } else {\n    req.httpRequest.body = builder.toXML(params, input, input.name || input.shape || util.string.upperFirst(req.operation) + 'Request');\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req); // never send body payload on GET/HEAD\n\n  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Rest.extractError(resp);\n  var data;\n\n  try {\n    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());\n  } catch (e) {\n    data = {\n      Code: resp.httpResponse.statusCode,\n      Message: resp.httpResponse.statusMessage\n    };\n  }\n\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n  var parser;\n  var req = resp.request;\n  var body = resp.httpResponse.body;\n  var operation = req.service.api.operations[req.operation];\n  var output = operation.output;\n  var hasEventOutput = operation.hasEventOutput;\n  var payload = output.payload;\n\n  if (payload) {\n    var payloadMember = output.members[payload];\n\n    if (payloadMember.isEventStream) {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body, parser, payloadMember);\n    } else if (payloadMember.type === 'structure') {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = parser.parse(body.toString(), payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[payload] = body;\n    } else {\n      resp.data[payload] = payloadMember.toType(body);\n    }\n  } else if (body.length > 0) {\n    parser = new AWS.XML.Parser();\n    var data = parser.parse(body.toString(), output);\n    util.update(resp.data, data);\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/@aws-amplify/core/node_modules/aws-sdk/lib/protocol/rest_xml.js"],"names":["AWS","require","util","Rest","populateBody","req","input","service","api","operations","operation","builder","XML","Builder","params","payload","payloadMember","members","undefined","type","rootElement","name","httpRequest","body","toXML","shape","string","upperFirst","buildRequest","indexOf","method","extractError","resp","data","Parser","parse","httpResponse","toString","e","Code","statusCode","Message","statusMessage","Errors","Error","error","code","message","extractData","parser","request","output","hasEventOutput","isEventStream","createEventStream","HttpClient","streamsApiVersion","stream","isStreaming","toType","length","update","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar util = require('../util');\nvar Rest = require('./rest');\n\nfunction populateBody(req) {\n  var input = req.service.api.operations[req.operation].input;\n  var builder = new AWS.XML.Builder();\n  var params = req.params;\n\n  var payload = input.payload;\n  if (payload) {\n    var payloadMember = input.members[payload];\n    params = params[payload];\n    if (params === undefined) return;\n\n    if (payloadMember.type === 'structure') {\n      var rootElement = payloadMember.name;\n      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);\n    } else { // non-xml payload\n      req.httpRequest.body = params;\n    }\n  } else {\n    req.httpRequest.body = builder.toXML(params, input, input.name ||\n      input.shape || util.string.upperFirst(req.operation) + 'Request');\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on GET/HEAD\n  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Rest.extractError(resp);\n\n  var data;\n  try {\n    data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());\n  } catch (e) {\n    data = {\n      Code: resp.httpResponse.statusCode,\n      Message: resp.httpResponse.statusMessage\n    };\n  }\n\n  if (data.Errors) data = data.Errors;\n  if (data.Error) data = data.Error;\n  if (data.Code) {\n    resp.error = util.error(new Error(), {\n      code: data.Code,\n      message: data.Message\n    });\n  } else {\n    resp.error = util.error(new Error(), {\n      code: resp.httpResponse.statusCode,\n      message: null\n    });\n  }\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n\n  var parser;\n  var req = resp.request;\n  var body = resp.httpResponse.body;\n  var operation = req.service.api.operations[req.operation];\n  var output = operation.output;\n\n  var hasEventOutput = operation.hasEventOutput;\n\n  var payload = output.payload;\n  if (payload) {\n    var payloadMember = output.members[payload];\n    if (payloadMember.isEventStream) {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = util.createEventStream(\n        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : resp.httpResponse.body,\n        parser,\n        payloadMember\n      );\n    } else if (payloadMember.type === 'structure') {\n      parser = new AWS.XML.Parser();\n      resp.data[payload] = parser.parse(body.toString(), payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[payload] = body;\n    } else {\n      resp.data[payload] = payloadMember.toType(body);\n    }\n  } else if (body.length > 0) {\n    parser = new AWS.XML.Parser();\n    var data = parser.parse(body.toString(), output);\n    util.update(resp.data, data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"]},"metadata":{},"sourceType":"script"}