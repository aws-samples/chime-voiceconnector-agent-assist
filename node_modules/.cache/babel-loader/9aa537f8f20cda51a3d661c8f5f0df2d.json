{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n\nimport keyValMap from '../jsutils/keyValMap';\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLSchema } from '../type/schema';\nimport { GraphQLDirective } from '../type/directives';\nimport { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isIntrospectionType } from '../type/introspection';\n/**\n * Sort GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n\n  return new GraphQLSchema({\n    types: sortTypes(objectValues(schema.getTypeMap())),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return keyValMap(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _objectSpread({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        args: sortArgs(field.args),\n        resolve: field.resolve,\n        subscribe: field.subscribe,\n        deprecationReason: field.deprecationReason,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortType(type) {\n    if (isListType(type)) {\n      return new GraphQLList(sortType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(sortType(type.ofType));\n    }\n\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(sortNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isSpecifiedScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if (isScalarType(type)) {\n      return type;\n    } else if (isObjectType(type)) {\n      return new GraphQLObjectType({\n        name: type.name,\n        interfaces: function interfaces() {\n          return sortTypes(type.getInterfaces());\n        },\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isInterfaceType(type)) {\n      return new GraphQLInterfaceType({\n        name: type.name,\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isUnionType(type)) {\n      return new GraphQLUnionType({\n        name: type.name,\n        types: function types() {\n          return sortTypes(type.getTypes());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isEnumType(type)) {\n      return new GraphQLEnumType({\n        name: type.name,\n        values: keyValMap(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isInputObjectType(type)) {\n      return new GraphQLInputObjectType({\n        name: type.name,\n        fields: function fields() {\n          return sortInputFields(type.getFields());\n        },\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n\n    throw new Error(\"Unknown type: \\\"\".concat(type, \"\\\"\"));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n\n  for (var _i = 0; _i < sortedKeys.length; _i++) {\n    var key = sortedKeys[_i];\n    var value = map[key];\n    sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/utilities/lexicographicSortSchema.mjs"],"names":["_objectSpread","target","i","arguments","length","source","ownKeys","Object","keys","getOwnPropertySymbols","concat","filter","sym","getOwnPropertyDescriptor","enumerable","forEach","key","_defineProperty","obj","value","defineProperty","configurable","writable","keyValMap","objectValues","GraphQLSchema","GraphQLDirective","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","isListType","isNonNullType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isSpecifiedScalarType","isIntrospectionType","lexicographicSortSchema","schema","cache","create","sortMaybeType","maybeType","sortNamedType","types","sortTypes","getTypeMap","directives","sortByName","getDirectives","map","sortDirective","query","getQueryType","mutation","getMutationType","subscription","getSubscriptionType","astNode","directive","name","description","locations","sortBy","x","args","sortArgs","arg","type","sortType","sortFields","fieldsMap","sortObjMap","field","resolve","subscribe","deprecationReason","sortInputFields","defaultValue","ofType","arr","sortedType","sortNamedTypeImpl","interfaces","getInterfaces","fields","getFields","isTypeOf","extensionASTNodes","resolveType","getTypes","values","getValues","val","Error","sortValueFn","sortedMap","sortedKeys","_i","array","mapToKey","slice","sort","obj1","obj2","key1","key2","localeCompare"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAT,IAAgB,IAAhB,GAAuBC,SAAS,CAACD,CAAD,CAAhC,GAAsC,EAAnD;AAAuD,QAAII,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,CAAd;;AAAmC,QAAI,OAAOE,MAAM,CAACE,qBAAd,KAAwC,UAA5C,EAAwD;AAAEH,MAAAA,OAAO,GAAGA,OAAO,CAACI,MAAR,CAAeH,MAAM,CAACE,qBAAP,CAA6BJ,MAA7B,EAAqCM,MAArC,CAA4C,UAAUC,GAAV,EAAe;AAAE,eAAOL,MAAM,CAACM,wBAAP,CAAgCR,MAAhC,EAAwCO,GAAxC,EAA6CE,UAApD;AAAiE,OAA9H,CAAf,CAAV;AAA4J;;AAACR,IAAAA,OAAO,CAACS,OAAR,CAAgB,UAAUC,GAAV,EAAe;AAAEC,MAAAA,eAAe,CAAChB,MAAD,EAASe,GAAT,EAAcX,MAAM,CAACW,GAAD,CAApB,CAAf;AAA4C,KAA7E;AAAiF;;AAAC,SAAOf,MAAP;AAAgB;;AAEje,SAASgB,eAAT,CAAyBC,GAAzB,EAA8BF,GAA9B,EAAmCG,KAAnC,EAA0C;AAAE,MAAIH,GAAG,IAAIE,GAAX,EAAgB;AAAEX,IAAAA,MAAM,CAACa,cAAP,CAAsBF,GAAtB,EAA2BF,GAA3B,EAAgC;AAAEG,MAAAA,KAAK,EAAEA,KAAT;AAAgBL,MAAAA,UAAU,EAAE,IAA5B;AAAkCO,MAAAA,YAAY,EAAE,IAAhD;AAAsDC,MAAAA,QAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEJ,IAAAA,GAAG,CAACF,GAAD,CAAH,GAAWG,KAAX;AAAmB;;AAAC,SAAOD,GAAP;AAAa;AAEjN;;;;;;;;;;AAQA,OAAOK,SAAP,MAAsB,sBAAtB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,EAAkDC,gBAAlD,EAAoEC,eAApE,EAAqFC,sBAArF,EAA6GC,WAA7G,EAA0HC,cAA1H,EAA0IC,UAA1I,EAAsJC,aAAtJ,EAAqKC,YAArK,EAAmLC,YAAnL,EAAiMC,eAAjM,EAAkNC,WAAlN,EAA+NC,UAA/N,EAA2OC,iBAA3O,QAAoQ,oBAApQ;AACA,SAASC,qBAAT,QAAsC,iBAAtC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA;;;;AAIA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAyC;AAC9C,MAAIC,KAAK,GAAGvC,MAAM,CAACwC,MAAP,CAAc,IAAd,CAAZ;;AAEA,MAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AACpD,WAAOA,SAAS,IAAIC,aAAa,CAACD,SAAD,CAAjC;AACD,GAFD;;AAIA,SAAO,IAAIxB,aAAJ,CAAkB;AACvB0B,IAAAA,KAAK,EAAEC,SAAS,CAAC5B,YAAY,CAACqB,MAAM,CAACQ,UAAP,EAAD,CAAb,CADO;AAEvBC,IAAAA,UAAU,EAAEC,UAAU,CAACV,MAAM,CAACW,aAAP,EAAD,CAAV,CAAmCC,GAAnC,CAAuCC,aAAvC,CAFW;AAGvBC,IAAAA,KAAK,EAAEX,aAAa,CAACH,MAAM,CAACe,YAAP,EAAD,CAHG;AAIvBC,IAAAA,QAAQ,EAAEb,aAAa,CAACH,MAAM,CAACiB,eAAP,EAAD,CAJA;AAKvBC,IAAAA,YAAY,EAAEf,aAAa,CAACH,MAAM,CAACmB,mBAAP,EAAD,CALJ;AAMvBC,IAAAA,OAAO,EAAEpB,MAAM,CAACoB;AANO,GAAlB,CAAP;;AASA,WAASP,aAAT,CAAuBQ,SAAvB,EAAkC;AAChC,WAAO,IAAIxC,gBAAJ,CAAqB;AAC1ByC,MAAAA,IAAI,EAAED,SAAS,CAACC,IADU;AAE1BC,MAAAA,WAAW,EAAEF,SAAS,CAACE,WAFG;AAG1BC,MAAAA,SAAS,EAAEC,MAAM,CAACJ,SAAS,CAACG,SAAX,EAAsB,UAAUE,CAAV,EAAa;AAClD,eAAOA,CAAP;AACD,OAFgB,CAHS;AAM1BC,MAAAA,IAAI,EAAEC,QAAQ,CAACP,SAAS,CAACM,IAAX,CANY;AAO1BP,MAAAA,OAAO,EAAEC,SAAS,CAACD;AAPO,KAArB,CAAP;AASD;;AAED,WAASQ,QAAT,CAAkBD,IAAlB,EAAwB;AACtB,WAAOjD,SAAS,CAACgC,UAAU,CAACiB,IAAD,CAAX,EAAmB,UAAUE,GAAV,EAAe;AAChD,aAAOA,GAAG,CAACP,IAAX;AACD,KAFe,EAEb,UAAUO,GAAV,EAAe;AAChB,aAAO1E,aAAa,CAAC,EAAD,EAAK0E,GAAL,EAAU;AAC5BC,QAAAA,IAAI,EAAEC,QAAQ,CAACF,GAAG,CAACC,IAAL;AADc,OAAV,CAApB;AAGD,KANe,CAAhB;AAOD;;AAED,WAASE,UAAT,CAAoBC,SAApB,EAA+B;AAC7B,WAAOC,UAAU,CAACD,SAAD,EAAY,UAAUE,KAAV,EAAiB;AAC5C,aAAO;AACLL,QAAAA,IAAI,EAAEC,QAAQ,CAACI,KAAK,CAACL,IAAP,CADT;AAELH,QAAAA,IAAI,EAAEC,QAAQ,CAACO,KAAK,CAACR,IAAP,CAFT;AAGLS,QAAAA,OAAO,EAAED,KAAK,CAACC,OAHV;AAILC,QAAAA,SAAS,EAAEF,KAAK,CAACE,SAJZ;AAKLC,QAAAA,iBAAiB,EAAEH,KAAK,CAACG,iBALpB;AAMLf,QAAAA,WAAW,EAAEY,KAAK,CAACZ,WANd;AAOLH,QAAAA,OAAO,EAAEe,KAAK,CAACf;AAPV,OAAP;AASD,KAVgB,CAAjB;AAWD;;AAED,WAASmB,eAAT,CAAyBN,SAAzB,EAAoC;AAClC,WAAOC,UAAU,CAACD,SAAD,EAAY,UAAUE,KAAV,EAAiB;AAC5C,aAAO;AACLL,QAAAA,IAAI,EAAEC,QAAQ,CAACI,KAAK,CAACL,IAAP,CADT;AAELU,QAAAA,YAAY,EAAEL,KAAK,CAACK,YAFf;AAGLjB,QAAAA,WAAW,EAAEY,KAAK,CAACZ,WAHd;AAILH,QAAAA,OAAO,EAAEe,KAAK,CAACf;AAJV,OAAP;AAMD,KAPgB,CAAjB;AAQD;;AAED,WAASW,QAAT,CAAkBD,IAAlB,EAAwB;AACtB,QAAIzC,UAAU,CAACyC,IAAD,CAAd,EAAsB;AACpB,aAAO,IAAI3C,WAAJ,CAAgB4C,QAAQ,CAACD,IAAI,CAACW,MAAN,CAAxB,CAAP;AACD,KAFD,MAEO,IAAInD,aAAa,CAACwC,IAAD,CAAjB,EAAyB;AAC9B,aAAO,IAAI1C,cAAJ,CAAmB2C,QAAQ,CAACD,IAAI,CAACW,MAAN,CAA3B,CAAP;AACD;;AAED,WAAOpC,aAAa,CAACyB,IAAD,CAApB;AACD;;AAED,WAASvB,SAAT,CAAmBmC,GAAnB,EAAwB;AACtB,WAAOhC,UAAU,CAACgC,GAAD,CAAV,CAAgB9B,GAAhB,CAAoBP,aAApB,CAAP;AACD;;AAED,WAASA,aAAT,CAAuByB,IAAvB,EAA6B;AAC3B,QAAIjC,qBAAqB,CAACiC,IAAD,CAArB,IAA+BhC,mBAAmB,CAACgC,IAAD,CAAtD,EAA8D;AAC5D,aAAOA,IAAP;AACD;;AAED,QAAIa,UAAU,GAAG1C,KAAK,CAAC6B,IAAI,CAACR,IAAN,CAAtB;;AAEA,QAAI,CAACqB,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAGC,iBAAiB,CAACd,IAAD,CAA9B;AACA7B,MAAAA,KAAK,CAAC6B,IAAI,CAACR,IAAN,CAAL,GAAmBqB,UAAnB;AACD;;AAED,WAAOA,UAAP;AACD;;AAED,WAASC,iBAAT,CAA2Bd,IAA3B,EAAiC;AAC/B,QAAIvC,YAAY,CAACuC,IAAD,CAAhB,EAAwB;AACtB,aAAOA,IAAP;AACD,KAFD,MAEO,IAAItC,YAAY,CAACsC,IAAD,CAAhB,EAAwB;AAC7B,aAAO,IAAIhD,iBAAJ,CAAsB;AAC3BwC,QAAAA,IAAI,EAAEQ,IAAI,CAACR,IADgB;AAE3BuB,QAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,iBAAOtC,SAAS,CAACuB,IAAI,CAACgB,aAAL,EAAD,CAAhB;AACD,SAJ0B;AAK3BC,QAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,iBAAOf,UAAU,CAACF,IAAI,CAACkB,SAAL,EAAD,CAAjB;AACD,SAP0B;AAQ3BC,QAAAA,QAAQ,EAAEnB,IAAI,CAACmB,QARY;AAS3B1B,QAAAA,WAAW,EAAEO,IAAI,CAACP,WATS;AAU3BH,QAAAA,OAAO,EAAEU,IAAI,CAACV,OAVa;AAW3B8B,QAAAA,iBAAiB,EAAEpB,IAAI,CAACoB;AAXG,OAAtB,CAAP;AAaD,KAdM,MAcA,IAAIzD,eAAe,CAACqC,IAAD,CAAnB,EAA2B;AAChC,aAAO,IAAI/C,oBAAJ,CAAyB;AAC9BuC,QAAAA,IAAI,EAAEQ,IAAI,CAACR,IADmB;AAE9ByB,QAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,iBAAOf,UAAU,CAACF,IAAI,CAACkB,SAAL,EAAD,CAAjB;AACD,SAJ6B;AAK9BG,QAAAA,WAAW,EAAErB,IAAI,CAACqB,WALY;AAM9B5B,QAAAA,WAAW,EAAEO,IAAI,CAACP,WANY;AAO9BH,QAAAA,OAAO,EAAEU,IAAI,CAACV,OAPgB;AAQ9B8B,QAAAA,iBAAiB,EAAEpB,IAAI,CAACoB;AARM,OAAzB,CAAP;AAUD,KAXM,MAWA,IAAIxD,WAAW,CAACoC,IAAD,CAAf,EAAuB;AAC5B,aAAO,IAAI9C,gBAAJ,CAAqB;AAC1BsC,QAAAA,IAAI,EAAEQ,IAAI,CAACR,IADe;AAE1BhB,QAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,iBAAOC,SAAS,CAACuB,IAAI,CAACsB,QAAL,EAAD,CAAhB;AACD,SAJyB;AAK1BD,QAAAA,WAAW,EAAErB,IAAI,CAACqB,WALQ;AAM1B5B,QAAAA,WAAW,EAAEO,IAAI,CAACP,WANQ;AAO1BH,QAAAA,OAAO,EAAEU,IAAI,CAACV;AAPY,OAArB,CAAP;AASD,KAVM,MAUA,IAAIzB,UAAU,CAACmC,IAAD,CAAd,EAAsB;AAC3B,aAAO,IAAI7C,eAAJ,CAAoB;AACzBqC,QAAAA,IAAI,EAAEQ,IAAI,CAACR,IADc;AAEzB+B,QAAAA,MAAM,EAAE3E,SAAS,CAACgC,UAAU,CAACoB,IAAI,CAACwB,SAAL,EAAD,CAAX,EAA+B,UAAUC,GAAV,EAAe;AAC7D,iBAAOA,GAAG,CAACjC,IAAX;AACD,SAFgB,EAEd,UAAUiC,GAAV,EAAe;AAChB,iBAAO;AACLjF,YAAAA,KAAK,EAAEiF,GAAG,CAACjF,KADN;AAELgE,YAAAA,iBAAiB,EAAEiB,GAAG,CAACjB,iBAFlB;AAGLf,YAAAA,WAAW,EAAEgC,GAAG,CAAChC,WAHZ;AAILH,YAAAA,OAAO,EAAEmC,GAAG,CAACnC;AAJR,WAAP;AAMD,SATgB,CAFQ;AAYzBG,QAAAA,WAAW,EAAEO,IAAI,CAACP,WAZO;AAazBH,QAAAA,OAAO,EAAEU,IAAI,CAACV;AAbW,OAApB,CAAP;AAeD,KAhBM,MAgBA,IAAIxB,iBAAiB,CAACkC,IAAD,CAArB,EAA6B;AAClC,aAAO,IAAI5C,sBAAJ,CAA2B;AAChCoC,QAAAA,IAAI,EAAEQ,IAAI,CAACR,IADqB;AAEhCyB,QAAAA,MAAM,EAAE,SAASA,MAAT,GAAkB;AACxB,iBAAOR,eAAe,CAACT,IAAI,CAACkB,SAAL,EAAD,CAAtB;AACD,SAJ+B;AAKhCzB,QAAAA,WAAW,EAAEO,IAAI,CAACP,WALc;AAMhCH,QAAAA,OAAO,EAAEU,IAAI,CAACV;AANkB,OAA3B,CAAP;AAQD;;AAED,UAAM,IAAIoC,KAAJ,CAAU,mBAAmB3F,MAAnB,CAA0BiE,IAA1B,EAAgC,IAAhC,CAAV,CAAN;AACD;AACF;;AAED,SAASI,UAAT,CAAoBtB,GAApB,EAAyB6C,WAAzB,EAAsC;AACpC,MAAIC,SAAS,GAAGhG,MAAM,CAACwC,MAAP,CAAc,IAAd,CAAhB;AACA,MAAIyD,UAAU,GAAGlC,MAAM,CAAC/D,MAAM,CAACC,IAAP,CAAYiD,GAAZ,CAAD,EAAmB,UAAUc,CAAV,EAAa;AACrD,WAAOA,CAAP;AACD,GAFsB,CAAvB;;AAIA,OAAK,IAAIkC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGD,UAAU,CAACpG,MAAjC,EAAyCqG,EAAE,EAA3C,EAA+C;AAC7C,QAAIzF,GAAG,GAAGwF,UAAU,CAACC,EAAD,CAApB;AACA,QAAItF,KAAK,GAAGsC,GAAG,CAACzC,GAAD,CAAf;AACAuF,IAAAA,SAAS,CAACvF,GAAD,CAAT,GAAiBsF,WAAW,GAAGA,WAAW,CAACnF,KAAD,CAAd,GAAwBA,KAApD;AACD;;AAED,SAAOoF,SAAP;AACD;;AAED,SAAShD,UAAT,CAAoBmD,KAApB,EAA2B;AACzB,SAAOpC,MAAM,CAACoC,KAAD,EAAQ,UAAUxF,GAAV,EAAe;AAClC,WAAOA,GAAG,CAACiD,IAAX;AACD,GAFY,CAAb;AAGD;;AAED,SAASG,MAAT,CAAgBoC,KAAhB,EAAuBC,QAAvB,EAAiC;AAC/B,SAAOD,KAAK,CAACE,KAAN,GAAcC,IAAd,CAAmB,UAAUC,IAAV,EAAgBC,IAAhB,EAAsB;AAC9C,QAAIC,IAAI,GAAGL,QAAQ,CAACG,IAAD,CAAnB;AACA,QAAIG,IAAI,GAAGN,QAAQ,CAACI,IAAD,CAAnB;AACA,WAAOC,IAAI,CAACE,aAAL,CAAmBD,IAAnB,CAAP;AACD,GAJM,CAAP;AAKD","sourcesContent":["function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport keyValMap from '../jsutils/keyValMap';\nimport objectValues from '../jsutils/objectValues';\nimport { GraphQLSchema } from '../type/schema';\nimport { GraphQLDirective } from '../type/directives';\nimport { GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, isListType, isNonNullType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from '../type/definition';\nimport { isSpecifiedScalarType } from '../type/scalars';\nimport { isIntrospectionType } from '../type/introspection';\n/**\n * Sort GraphQLSchema.\n */\n\nexport function lexicographicSortSchema(schema) {\n  var cache = Object.create(null);\n\n  var sortMaybeType = function sortMaybeType(maybeType) {\n    return maybeType && sortNamedType(maybeType);\n  };\n\n  return new GraphQLSchema({\n    types: sortTypes(objectValues(schema.getTypeMap())),\n    directives: sortByName(schema.getDirectives()).map(sortDirective),\n    query: sortMaybeType(schema.getQueryType()),\n    mutation: sortMaybeType(schema.getMutationType()),\n    subscription: sortMaybeType(schema.getSubscriptionType()),\n    astNode: schema.astNode\n  });\n\n  function sortDirective(directive) {\n    return new GraphQLDirective({\n      name: directive.name,\n      description: directive.description,\n      locations: sortBy(directive.locations, function (x) {\n        return x;\n      }),\n      args: sortArgs(directive.args),\n      astNode: directive.astNode\n    });\n  }\n\n  function sortArgs(args) {\n    return keyValMap(sortByName(args), function (arg) {\n      return arg.name;\n    }, function (arg) {\n      return _objectSpread({}, arg, {\n        type: sortType(arg.type)\n      });\n    });\n  }\n\n  function sortFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        args: sortArgs(field.args),\n        resolve: field.resolve,\n        subscribe: field.subscribe,\n        deprecationReason: field.deprecationReason,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortInputFields(fieldsMap) {\n    return sortObjMap(fieldsMap, function (field) {\n      return {\n        type: sortType(field.type),\n        defaultValue: field.defaultValue,\n        description: field.description,\n        astNode: field.astNode\n      };\n    });\n  }\n\n  function sortType(type) {\n    if (isListType(type)) {\n      return new GraphQLList(sortType(type.ofType));\n    } else if (isNonNullType(type)) {\n      return new GraphQLNonNull(sortType(type.ofType));\n    }\n\n    return sortNamedType(type);\n  }\n\n  function sortTypes(arr) {\n    return sortByName(arr).map(sortNamedType);\n  }\n\n  function sortNamedType(type) {\n    if (isSpecifiedScalarType(type) || isIntrospectionType(type)) {\n      return type;\n    }\n\n    var sortedType = cache[type.name];\n\n    if (!sortedType) {\n      sortedType = sortNamedTypeImpl(type);\n      cache[type.name] = sortedType;\n    }\n\n    return sortedType;\n  }\n\n  function sortNamedTypeImpl(type) {\n    if (isScalarType(type)) {\n      return type;\n    } else if (isObjectType(type)) {\n      return new GraphQLObjectType({\n        name: type.name,\n        interfaces: function interfaces() {\n          return sortTypes(type.getInterfaces());\n        },\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        isTypeOf: type.isTypeOf,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isInterfaceType(type)) {\n      return new GraphQLInterfaceType({\n        name: type.name,\n        fields: function fields() {\n          return sortFields(type.getFields());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode,\n        extensionASTNodes: type.extensionASTNodes\n      });\n    } else if (isUnionType(type)) {\n      return new GraphQLUnionType({\n        name: type.name,\n        types: function types() {\n          return sortTypes(type.getTypes());\n        },\n        resolveType: type.resolveType,\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isEnumType(type)) {\n      return new GraphQLEnumType({\n        name: type.name,\n        values: keyValMap(sortByName(type.getValues()), function (val) {\n          return val.name;\n        }, function (val) {\n          return {\n            value: val.value,\n            deprecationReason: val.deprecationReason,\n            description: val.description,\n            astNode: val.astNode\n          };\n        }),\n        description: type.description,\n        astNode: type.astNode\n      });\n    } else if (isInputObjectType(type)) {\n      return new GraphQLInputObjectType({\n        name: type.name,\n        fields: function fields() {\n          return sortInputFields(type.getFields());\n        },\n        description: type.description,\n        astNode: type.astNode\n      });\n    }\n\n    throw new Error(\"Unknown type: \\\"\".concat(type, \"\\\"\"));\n  }\n}\n\nfunction sortObjMap(map, sortValueFn) {\n  var sortedMap = Object.create(null);\n  var sortedKeys = sortBy(Object.keys(map), function (x) {\n    return x;\n  });\n\n  for (var _i = 0; _i < sortedKeys.length; _i++) {\n    var key = sortedKeys[_i];\n    var value = map[key];\n    sortedMap[key] = sortValueFn ? sortValueFn(value) : value;\n  }\n\n  return sortedMap;\n}\n\nfunction sortByName(array) {\n  return sortBy(array, function (obj) {\n    return obj.name;\n  });\n}\n\nfunction sortBy(array, mapToKey) {\n  return array.slice().sort(function (obj1, obj2) {\n    var key1 = mapToKey(obj1);\n    var key2 = mapToKey(obj2);\n    return key1.localeCompare(key2);\n  });\n}"]},"metadata":{},"sourceType":"module"}