{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n\n/**\n * Dispatches an event on the passed element.\n * @param {!Element} element The DOM element to dispatch the event on.\n * @param {string} eventType The type of event to dispatch.\n * @param {Object|string=} eventName A string name of the event constructor\n *     to use. Defaults to 'Event' if nothing is passed or 'CustomEvent' if\n *     a value is set on `initDict.detail`. If eventName is given an object\n *     it is assumed to be initDict and thus reassigned.\n * @param {Object=} initDict The initialization attributes for the\n *     event. A `detail` property can be used here to pass custom data.\n * @return {boolean} The return value of `element.dispatchEvent`, which will\n *     be false if any of the event listeners called `preventDefault`.\n */\nexport default function dispatch(element, eventType, evtName, init_dict) {\n  if (evtName === void 0) {\n    evtName = 'Event';\n  }\n\n  if (init_dict === void 0) {\n    init_dict = {};\n  }\n\n  var event;\n  var isCustom;\n  var initDict = init_dict;\n  var eventName = evtName; // eventName is optional\n\n  if (typeof eventName === 'object') {\n    initDict = eventName;\n    eventName = 'Event';\n  }\n\n  initDict['bubbles'] = initDict['bubbles'] || false;\n  initDict['cancelable'] = initDict['cancelable'] || false;\n  initDict['composed'] = initDict['composed'] || false; // If a detail property is passed, this is a custom event.\n\n  if ('detail' in initDict) isCustom = true;\n  eventName = isCustom ? 'CustomEvent' : eventName; // Tries to create the event using constructors, if that doesn't work,\n  // fallback to `document.createEvent()`.\n\n  try {\n    event = new window[eventName](eventType, initDict);\n  } catch (err) {\n    event = document.createEvent(eventName);\n    var initMethod = 'init' + (isCustom ? 'Custom' : '') + 'Event';\n    event[initMethod](eventType, initDict['bubbles'], initDict['cancelable'], initDict['detail']);\n  }\n\n  return element.dispatchEvent(event);\n}","map":{"version":3,"sources":["../../../src/vendor/dom-utils/dispatch.ts"],"names":[],"mappings":"AAAA;;;;AAIA;;;;;;;;;;;;;AAaA,eAAc,SAAU,QAAV,CACb,OADa,EAEb,SAFa,EAGb,OAHa,EAIb,SAJa,EAIC;AADd,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,OAAA;AAAiB;;AACjB,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,EAAA;AAAc;;AAEd,MAAI,KAAJ;AACA,MAAI,QAAJ;AACA,MAAI,QAAQ,GAAG,SAAf;AACA,MAAI,SAAS,GAAG,OAAhB,CALc,CAOd;;AACA,MAAI,OAAO,SAAP,KAAqB,QAAzB,EAAmC;AAClC,IAAA,QAAQ,GAAG,SAAX;AACA,IAAA,SAAS,GAAG,OAAZ;AACA;;AAED,EAAA,QAAQ,CAAC,SAAD,CAAR,GAAsB,QAAQ,CAAC,SAAD,CAAR,IAAuB,KAA7C;AACA,EAAA,QAAQ,CAAC,YAAD,CAAR,GAAyB,QAAQ,CAAC,YAAD,CAAR,IAA0B,KAAnD;AACA,EAAA,QAAQ,CAAC,UAAD,CAAR,GAAuB,QAAQ,CAAC,UAAD,CAAR,IAAwB,KAA/C,CAfc,CAiBd;;AACA,MAAI,YAAY,QAAhB,EAA0B,QAAQ,GAAG,IAAX;AAC1B,EAAA,SAAS,GAAG,QAAQ,GAAG,aAAH,GAAmB,SAAvC,CAnBc,CAqBd;AACA;;AACA,MAAI;AACH,IAAA,KAAK,GAAG,IAAI,MAAM,CAAC,SAAD,CAAV,CAAsB,SAAtB,EAAiC,QAAjC,CAAR;AACA,GAFD,CAEE,OAAO,GAAP,EAAY;AACb,IAAA,KAAK,GAAG,QAAQ,CAAC,WAAT,CAAqB,SAArB,CAAR;AACA,QAAM,UAAU,GAAG,UAAU,QAAQ,GAAG,QAAH,GAAc,EAAhC,IAAsC,OAAzD;AACA,IAAA,KAAK,CAAC,UAAD,CAAL,CACC,SADD,EAEC,QAAQ,CAAC,SAAD,CAFT,EAGC,QAAQ,CAAC,YAAD,CAHT,EAIC,QAAQ,CAAC,QAAD,CAJT;AAMA;;AAED,SAAO,OAAO,CAAC,aAAR,CAAsB,KAAtB,CAAP;AACA","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\n/**\n * Dispatches an event on the passed element.\n * @param {!Element} element The DOM element to dispatch the event on.\n * @param {string} eventType The type of event to dispatch.\n * @param {Object|string=} eventName A string name of the event constructor\n *     to use. Defaults to 'Event' if nothing is passed or 'CustomEvent' if\n *     a value is set on `initDict.detail`. If eventName is given an object\n *     it is assumed to be initDict and thus reassigned.\n * @param {Object=} initDict The initialization attributes for the\n *     event. A `detail` property can be used here to pass custom data.\n * @return {boolean} The return value of `element.dispatchEvent`, which will\n *     be false if any of the event listeners called `preventDefault`.\n */\nexport default function dispatch(element, eventType, evtName, init_dict) {\n    if (evtName === void 0) { evtName = 'Event'; }\n    if (init_dict === void 0) { init_dict = {}; }\n    var event;\n    var isCustom;\n    var initDict = init_dict;\n    var eventName = evtName;\n    // eventName is optional\n    if (typeof eventName === 'object') {\n        initDict = eventName;\n        eventName = 'Event';\n    }\n    initDict['bubbles'] = initDict['bubbles'] || false;\n    initDict['cancelable'] = initDict['cancelable'] || false;\n    initDict['composed'] = initDict['composed'] || false;\n    // If a detail property is passed, this is a custom event.\n    if ('detail' in initDict)\n        isCustom = true;\n    eventName = isCustom ? 'CustomEvent' : eventName;\n    // Tries to create the event using constructors, if that doesn't work,\n    // fallback to `document.createEvent()`.\n    try {\n        event = new window[eventName](eventType, initDict);\n    }\n    catch (err) {\n        event = document.createEvent(eventName);\n        var initMethod = 'init' + (isCustom ? 'Custom' : '') + 'Event';\n        event[initMethod](eventType, initDict['bubbles'], initDict['cancelable'], initDict['detail']);\n    }\n    return element.dispatchEvent(event);\n}\n//# sourceMappingURL=dispatch.js.map"]},"metadata":{},"sourceType":"module"}