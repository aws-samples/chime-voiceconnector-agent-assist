{"ast":null,"code":"/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isAsyncIterable } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport { addPath, assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef, resolveFieldValueOrError, responsePathAsArray } from '../execution/execute';\nimport mapAsyncIterator from './mapAsyncIterator';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (client error). The promise will be rejected if a\n * server error occurs.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  }, reportGraphQLError);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise<AsyncIterable>.\n *\n * If the client-provided invalid arguments, the source stream could not be\n * created, or the resolver did not return an AsyncIterable, this function will\n * will throw an error, which should be caught and handled by the caller.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  try {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({\n        errors: exeContext\n      });\n    }\n\n    var type = getOperationRootType(schema, exeContext.operation);\n    var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = getFieldDef(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n    } // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n\n    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;\n    var path = addPath(undefined, responseName);\n    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n\n    var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info); // Coerce to Promise for easier error handling and consistent return type.\n\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        throw locatedError(eventStream, fieldNodes, responsePathAsArray(path));\n      } // Assert field returned an event stream, otherwise yield an error.\n\n\n      if (isAsyncIterable(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n\n      throw new Error('Subscription field must return Async Iterable. Received: ' + inspect(eventStream));\n    });\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/subscription/subscribe.mjs"],"names":["isAsyncIterable","inspect","GraphQLError","locatedError","addPath","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","collectFields","execute","getFieldDef","resolveFieldValueOrError","responsePathAsArray","mapAsyncIterator","getOperationRootType","subscribe","argsOrSchema","document","rootValue","contextValue","variableValues","operationName","fieldResolver","subscribeFieldResolver","arguments","length","subscribeImpl","schema","reportGraphQLError","error","errors","sourcePromise","createSourceEventStream","mapSourceToResponse","payload","then","resultOrStream","exeContext","Array","isArray","Promise","resolve","type","operation","fields","selectionSet","Object","create","responseNames","keys","responseName","fieldNodes","fieldNode","fieldName","name","value","fieldDef","concat","resolveFn","path","undefined","info","result","eventStream","Error","reject"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { isAsyncIterable } from 'iterall';\nimport inspect from '../jsutils/inspect';\nimport { GraphQLError } from '../error/GraphQLError';\nimport { locatedError } from '../error/locatedError';\nimport { addPath, assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, collectFields, execute, getFieldDef, resolveFieldValueOrError, responsePathAsArray } from '../execution/execute';\nimport mapAsyncIterator from './mapAsyncIterator';\nimport { getOperationRootType } from '../utilities/getOperationRootType';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (client error). The promise will be rejected if a\n * server error occurs.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  /* eslint-enable no-redeclare */\n  // Extract arguments from object args if provided.\n  return arguments.length === 1 ? subscribeImpl(argsOrSchema.schema, argsOrSchema.document, argsOrSchema.rootValue, argsOrSchema.contextValue, argsOrSchema.variableValues, argsOrSchema.operationName, argsOrSchema.fieldResolver, argsOrSchema.subscribeFieldResolver) : subscribeImpl(argsOrSchema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver);\n}\n/**\n * This function checks if the error is a GraphQLError. If it is, report it as\n * an ExecutionResult, containing only errors and no data. Otherwise treat the\n * error as a system-class error and re-throw it.\n */\n\nfunction reportGraphQLError(error) {\n  if (error instanceof GraphQLError) {\n    return {\n      errors: [error]\n    };\n  }\n\n  throw error;\n}\n\nfunction subscribeImpl(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver, subscribeFieldResolver) {\n  var sourcePromise = createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, subscribeFieldResolver); // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  var mapSourceToResponse = function mapSourceToResponse(payload) {\n    return execute(schema, document, payload, contextValue, variableValues, operationName, fieldResolver);\n  }; // Resolve the Source Stream, then map every source value to a\n  // ExecutionResult value as described above.\n\n\n  return sourcePromise.then(function (resultOrStream) {\n    return (// Note: Flow can't refine isAsyncIterable, so explicit casts are used.\n      isAsyncIterable(resultOrStream) ? mapAsyncIterator(resultOrStream, mapSourceToResponse, reportGraphQLError) : resultOrStream\n    );\n  }, reportGraphQLError);\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise<AsyncIterable>.\n *\n * If the client-provided invalid arguments, the source stream could not be\n * created, or the resolver did not return an AsyncIterable, this function will\n * will throw an error, which should be caught and handled by the caller.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver) {\n  // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n  assertValidExecutionArguments(schema, document, variableValues);\n\n  try {\n    // If a valid context cannot be created due to incorrect arguments,\n    // this will throw an error.\n    var exeContext = buildExecutionContext(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver); // Return early errors if execution context failed.\n\n    if (Array.isArray(exeContext)) {\n      return Promise.resolve({\n        errors: exeContext\n      });\n    }\n\n    var type = getOperationRootType(schema, exeContext.operation);\n    var fields = collectFields(exeContext, type, exeContext.operation.selectionSet, Object.create(null), Object.create(null));\n    var responseNames = Object.keys(fields);\n    var responseName = responseNames[0];\n    var fieldNodes = fields[responseName];\n    var fieldNode = fieldNodes[0];\n    var fieldName = fieldNode.name.value;\n    var fieldDef = getFieldDef(schema, type, fieldName);\n\n    if (!fieldDef) {\n      throw new GraphQLError(\"The subscription field \\\"\".concat(fieldName, \"\\\" is not defined.\"), fieldNodes);\n    } // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n\n    var resolveFn = fieldDef.subscribe || exeContext.fieldResolver;\n    var path = addPath(undefined, responseName);\n    var info = buildResolveInfo(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the \"ResolveFieldEventStream\"\n    // algorithm from GraphQL specification. It differs from\n    // \"ResolveFieldValue\" due to providing a different `resolveFn`.\n\n    var result = resolveFieldValueOrError(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info); // Coerce to Promise for easier error handling and consistent return type.\n\n    return Promise.resolve(result).then(function (eventStream) {\n      // If eventStream is an Error, rethrow a located error.\n      if (eventStream instanceof Error) {\n        throw locatedError(eventStream, fieldNodes, responsePathAsArray(path));\n      } // Assert field returned an event stream, otherwise yield an error.\n\n\n      if (isAsyncIterable(eventStream)) {\n        // Note: isAsyncIterable above ensures this will be correct.\n        return eventStream;\n      }\n\n      throw new Error('Subscription field must return Async Iterable. Received: ' + inspect(eventStream));\n    });\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}"]},"metadata":{},"sourceType":"module"}