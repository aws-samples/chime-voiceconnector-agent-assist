{"ast":null,"code":"var AWS = require('./core');\n/**\n * @api private\n */\n\n\nfunction validateRegionalEndpointsFlagValue(configValue, errorOptions) {\n  if (typeof configValue !== 'string') return undefined;else if (['legacy', 'regional'].indexOf(configValue.toLowerCase()) >= 0) {\n    return configValue.toLowerCase();\n  } else {\n    throw AWS.util.error(new Error(), errorOptions);\n  }\n}\n/**\n * Resolve the configuration value for regional endpoint from difference sources: client\n * config, environmental variable, shared config file. Value can be case-insensitive\n * 'legacy' or 'reginal'.\n * @param originalConfig user-supplied config object to resolve\n * @param options a map of config property names from individual configuration source\n *  - env: name of environmental variable that refers to the config\n *  - sharedConfig: name of shared configuration file property that refers to the config\n *  - clientConfig: name of client configuration property that refers to the config\n *\n * @api private\n */\n\n\nfunction resolveRegionalEndpointsFlag(originalConfig, options) {\n  originalConfig = originalConfig || {}; //validate config value\n\n  var resolved;\n\n  if (originalConfig[options.clientConfig]) {\n    resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {\n      code: 'InvalidConfiguration',\n      message: 'invalid \"' + options.clientConfig + '\" configuration. Expect \"legacy\" ' + ' or \"regional\". Got \"' + originalConfig[options.clientConfig] + '\".'\n    });\n    if (resolved) return resolved;\n  }\n\n  if (!AWS.util.isNode()) return resolved; //validate environmental variable\n\n  if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {\n    var envFlag = process.env[options.env];\n    resolved = validateRegionalEndpointsFlagValue(envFlag, {\n      code: 'InvalidEnvironmentalVariable',\n      message: 'invalid ' + options.env + ' environmental variable. Expect \"legacy\" ' + ' or \"regional\". Got \"' + process.env[options.env] + '\".'\n    });\n    if (resolved) return resolved;\n  } //validate shared config file\n\n\n  var profile = {};\n\n  try {\n    var profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n    profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n  } catch (e) {}\n\n  ;\n\n  if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {\n    var fileFlag = profile[options.sharedConfig];\n    resolved = validateRegionalEndpointsFlagValue(fileFlag, {\n      code: 'InvalidConfiguration',\n      message: 'invalid ' + options.sharedConfig + ' profile config. Expect \"legacy\" ' + ' or \"regional\". Got \"' + profile[options.sharedConfig] + '\".'\n    });\n    if (resolved) return resolved;\n  }\n\n  return resolved;\n}\n\nmodule.exports = resolveRegionalEndpointsFlag;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/config_regional_endpoint.js"],"names":["AWS","require","validateRegionalEndpointsFlagValue","configValue","errorOptions","undefined","indexOf","toLowerCase","util","error","Error","resolveRegionalEndpointsFlag","originalConfig","options","resolved","clientConfig","code","message","isNode","Object","prototype","hasOwnProperty","call","process","env","envFlag","profile","profiles","getProfilesFromSharedConfig","iniLoader","AWS_PROFILE","defaultProfile","e","sharedConfig","fileFlag","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('./core');\n/**\n * @api private\n */\nfunction validateRegionalEndpointsFlagValue(configValue, errorOptions) {\n  if (typeof configValue !== 'string') return undefined;\n  else if (['legacy', 'regional'].indexOf(configValue.toLowerCase()) >= 0) {\n    return configValue.toLowerCase();\n  } else {\n    throw AWS.util.error(new Error(), errorOptions);\n  }\n}\n\n/**\n * Resolve the configuration value for regional endpoint from difference sources: client\n * config, environmental variable, shared config file. Value can be case-insensitive\n * 'legacy' or 'reginal'.\n * @param originalConfig user-supplied config object to resolve\n * @param options a map of config property names from individual configuration source\n *  - env: name of environmental variable that refers to the config\n *  - sharedConfig: name of shared configuration file property that refers to the config\n *  - clientConfig: name of client configuration property that refers to the config\n *\n * @api private\n */\nfunction resolveRegionalEndpointsFlag(originalConfig, options) {\n  originalConfig = originalConfig || {};\n  //validate config value\n  var resolved;\n  if (originalConfig[options.clientConfig]) {\n    resolved = validateRegionalEndpointsFlagValue(originalConfig[options.clientConfig], {\n      code: 'InvalidConfiguration',\n      message: 'invalid \"' + options.clientConfig + '\" configuration. Expect \"legacy\" ' +\n      ' or \"regional\". Got \"' + originalConfig[options.clientConfig] + '\".'\n    });\n    if (resolved) return resolved;\n  }\n  if (!AWS.util.isNode()) return resolved;\n  //validate environmental variable\n  if (Object.prototype.hasOwnProperty.call(process.env, options.env)) {\n    var envFlag = process.env[options.env];\n    resolved = validateRegionalEndpointsFlagValue(envFlag, {\n      code: 'InvalidEnvironmentalVariable',\n      message: 'invalid ' + options.env + ' environmental variable. Expect \"legacy\" ' +\n      ' or \"regional\". Got \"' + process.env[options.env] + '\".'\n    });\n    if (resolved) return resolved;\n  }\n  //validate shared config file\n  var profile = {};\n  try {\n    var profiles = AWS.util.getProfilesFromSharedConfig(AWS.util.iniLoader);\n    profile = profiles[process.env.AWS_PROFILE || AWS.util.defaultProfile];\n  } catch (e) {};\n  if (profile && Object.prototype.hasOwnProperty.call(profile, options.sharedConfig)) {\n    var fileFlag = profile[options.sharedConfig];\n    resolved = validateRegionalEndpointsFlagValue(fileFlag, {\n      code: 'InvalidConfiguration',\n      message: 'invalid ' + options.sharedConfig + ' profile config. Expect \"legacy\" ' +\n      ' or \"regional\". Got \"' + profile[options.sharedConfig] + '\".'\n    });\n    if (resolved) return resolved;\n  }\n  return resolved;\n}\n\nmodule.exports = resolveRegionalEndpointsFlag;\n"]},"metadata":{},"sourceType":"script"}