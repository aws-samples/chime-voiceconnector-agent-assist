{"ast":null,"code":"var util = require('../util');\n\nfunction QueryParamSerializer() {}\n\nQueryParamSerializer.prototype.serialize = function (params, shape, fn) {\n  serializeStructure('', params, shape, fn);\n};\n\nfunction ucfirst(shape) {\n  if (shape.isQueryName || shape.api.protocol !== 'ec2') {\n    return shape.name;\n  } else {\n    return shape.name[0].toUpperCase() + shape.name.substr(1);\n  }\n}\n\nfunction serializeStructure(prefix, struct, rules, fn) {\n  util.each(rules.members, function (name, member) {\n    var value = struct[name];\n    if (value === null || value === undefined) return;\n    var memberName = ucfirst(member);\n    memberName = prefix ? prefix + '.' + memberName : memberName;\n    serializeMember(memberName, value, member, fn);\n  });\n}\n\nfunction serializeMap(name, map, rules, fn) {\n  var i = 1;\n  util.each(map, function (key, value) {\n    var prefix = rules.flattened ? '.' : '.entry.';\n    var position = prefix + i++ + '.';\n    var keyName = position + (rules.key.name || 'key');\n    var valueName = position + (rules.value.name || 'value');\n    serializeMember(name + keyName, key, rules.key, fn);\n    serializeMember(name + valueName, value, rules.value, fn);\n  });\n}\n\nfunction serializeList(name, list, rules, fn) {\n  var memberRules = rules.member || {};\n\n  if (list.length === 0) {\n    fn.call(this, name, null);\n    return;\n  }\n\n  util.arrayEach(list, function (v, n) {\n    var suffix = '.' + (n + 1);\n\n    if (rules.api.protocol === 'ec2') {\n      // Do nothing for EC2\n      suffix = suffix + ''; // make linter happy\n    } else if (rules.flattened) {\n      if (memberRules.name) {\n        var parts = name.split('.');\n        parts.pop();\n        parts.push(ucfirst(memberRules));\n        name = parts.join('.');\n      }\n    } else {\n      suffix = '.' + (memberRules.name ? memberRules.name : 'member') + suffix;\n    }\n\n    serializeMember(name + suffix, v, memberRules, fn);\n  });\n}\n\nfunction serializeMember(name, value, rules, fn) {\n  if (value === null || value === undefined) return;\n\n  if (rules.type === 'structure') {\n    serializeStructure(name, value, rules, fn);\n  } else if (rules.type === 'list') {\n    serializeList(name, value, rules, fn);\n  } else if (rules.type === 'map') {\n    serializeMap(name, value, rules, fn);\n  } else {\n    fn(name, rules.toWireFormat(value).toString());\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = QueryParamSerializer;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/@aws-amplify/core/node_modules/aws-sdk/lib/query/query_param_serializer.js"],"names":["util","require","QueryParamSerializer","prototype","serialize","params","shape","fn","serializeStructure","ucfirst","isQueryName","api","protocol","name","toUpperCase","substr","prefix","struct","rules","each","members","member","value","undefined","memberName","serializeMember","serializeMap","map","i","key","flattened","position","keyName","valueName","serializeList","list","memberRules","length","call","arrayEach","v","n","suffix","parts","split","pop","push","join","type","toWireFormat","toString","module","exports"],"mappings":"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","sourcesContent":["var util = require('../util');\n\nfunction QueryParamSerializer() {\n}\n\nQueryParamSerializer.prototype.serialize = function(params, shape, fn) {\n  serializeStructure('', params, shape, fn);\n};\n\nfunction ucfirst(shape) {\n  if (shape.isQueryName || shape.api.protocol !== 'ec2') {\n    return shape.name;\n  } else {\n    return shape.name[0].toUpperCase() + shape.name.substr(1);\n  }\n}\n\nfunction serializeStructure(prefix, struct, rules, fn) {\n  util.each(rules.members, function(name, member) {\n    var value = struct[name];\n    if (value === null || value === undefined) return;\n\n    var memberName = ucfirst(member);\n    memberName = prefix ? prefix + '.' + memberName : memberName;\n    serializeMember(memberName, value, member, fn);\n  });\n}\n\nfunction serializeMap(name, map, rules, fn) {\n  var i = 1;\n  util.each(map, function (key, value) {\n    var prefix = rules.flattened ? '.' : '.entry.';\n    var position = prefix + (i++) + '.';\n    var keyName = position + (rules.key.name || 'key');\n    var valueName = position + (rules.value.name || 'value');\n    serializeMember(name + keyName, key, rules.key, fn);\n    serializeMember(name + valueName, value, rules.value, fn);\n  });\n}\n\nfunction serializeList(name, list, rules, fn) {\n  var memberRules = rules.member || {};\n\n  if (list.length === 0) {\n    fn.call(this, name, null);\n    return;\n  }\n\n  util.arrayEach(list, function (v, n) {\n    var suffix = '.' + (n + 1);\n    if (rules.api.protocol === 'ec2') {\n      // Do nothing for EC2\n      suffix = suffix + ''; // make linter happy\n    } else if (rules.flattened) {\n      if (memberRules.name) {\n        var parts = name.split('.');\n        parts.pop();\n        parts.push(ucfirst(memberRules));\n        name = parts.join('.');\n      }\n    } else {\n      suffix = '.' + (memberRules.name ? memberRules.name : 'member') + suffix;\n    }\n    serializeMember(name + suffix, v, memberRules, fn);\n  });\n}\n\nfunction serializeMember(name, value, rules, fn) {\n  if (value === null || value === undefined) return;\n  if (rules.type === 'structure') {\n    serializeStructure(name, value, rules, fn);\n  } else if (rules.type === 'list') {\n    serializeList(name, value, rules, fn);\n  } else if (rules.type === 'map') {\n    serializeMap(name, value, rules, fn);\n  } else {\n    fn(name, rules.toWireFormat(value).toString());\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = QueryParamSerializer;\n"]},"metadata":{},"sourceType":"script"}