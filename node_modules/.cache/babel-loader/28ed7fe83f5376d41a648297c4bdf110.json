{"ast":null,"code":"var AWS = require('../core');\n\nvar inherit = AWS.util.inherit;\n/**\n * @api private\n */\n\nAWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {\n  /**\n   * When building the stringToSign, these sub resource params should be\n   * part of the canonical resource string with their NON-decoded values\n   */\n  subResources: {\n    'acl': 1,\n    'accelerate': 1,\n    'analytics': 1,\n    'cors': 1,\n    'lifecycle': 1,\n    'delete': 1,\n    'inventory': 1,\n    'location': 1,\n    'logging': 1,\n    'metrics': 1,\n    'notification': 1,\n    'partNumber': 1,\n    'policy': 1,\n    'requestPayment': 1,\n    'replication': 1,\n    'restore': 1,\n    'tagging': 1,\n    'torrent': 1,\n    'uploadId': 1,\n    'uploads': 1,\n    'versionId': 1,\n    'versioning': 1,\n    'versions': 1,\n    'website': 1\n  },\n  // when building the stringToSign, these querystring params should be\n  // part of the canonical resource string with their NON-encoded values\n  responseHeaders: {\n    'response-content-type': 1,\n    'response-content-language': 1,\n    'response-expires': 1,\n    'response-cache-control': 1,\n    'response-content-disposition': 1,\n    'response-content-encoding': 1\n  },\n  addAuthorization: function addAuthorization(credentials, date) {\n    if (!this.request.headers['presigned-expires']) {\n      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);\n    }\n\n    if (credentials.sessionToken) {\n      // presigned URLs require this header to be lowercased\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    }\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;\n    this.request.headers['Authorization'] = auth;\n  },\n  stringToSign: function stringToSign() {\n    var r = this.request;\n    var parts = [];\n    parts.push(r.method);\n    parts.push(r.headers['Content-MD5'] || '');\n    parts.push(r.headers['Content-Type'] || ''); // This is the \"Date\" header, but we use X-Amz-Date.\n    // The S3 signing mechanism requires us to pass an empty\n    // string for this Date header regardless.\n\n    parts.push(r.headers['presigned-expires'] || '');\n    var headers = this.canonicalizedAmzHeaders();\n    if (headers) parts.push(headers);\n    parts.push(this.canonicalizedResource());\n    return parts.join('\\n');\n  },\n  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {\n    var amzHeaders = [];\n    AWS.util.each(this.request.headers, function (name) {\n      if (name.match(/^x-amz-/i)) amzHeaders.push(name);\n    });\n    amzHeaders.sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    });\n    var parts = [];\n    AWS.util.arrayEach.call(this, amzHeaders, function (name) {\n      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));\n    });\n    return parts.join('\\n');\n  },\n  canonicalizedResource: function canonicalizedResource() {\n    var r = this.request;\n    var parts = r.path.split('?');\n    var path = parts[0];\n    var querystring = parts[1];\n    var resource = '';\n    if (r.virtualHostedBucket) resource += '/' + r.virtualHostedBucket;\n    resource += path;\n\n    if (querystring) {\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {\n        var name = param.split('=')[0];\n        var value = param.split('=')[1];\n\n        if (this.subResources[name] || this.responseHeaders[name]) {\n          var subresource = {\n            name: name\n          };\n\n          if (value !== undefined) {\n            if (this.subResources[name]) {\n              subresource.value = value;\n            } else {\n              subresource.value = decodeURIComponent(value);\n            }\n          }\n\n          resources.push(subresource);\n        }\n      });\n      resources.sort(function (a, b) {\n        return a.name < b.name ? -1 : 1;\n      });\n\n      if (resources.length) {\n        querystring = [];\n        AWS.util.arrayEach(resources, function (res) {\n          if (res.value === undefined) {\n            querystring.push(res.name);\n          } else {\n            querystring.push(res.name + '=' + res.value);\n          }\n        });\n        resource += '?' + querystring.join('&');\n      }\n    }\n\n    return resource;\n  },\n  sign: function sign(secret, string) {\n    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');\n  }\n});\n/**\n * @api private\n */\n\nmodule.exports = AWS.Signers.S3;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/@aws-amplify/core/node_modules/aws-sdk/lib/signers/s3.js"],"names":["AWS","require","inherit","util","Signers","S3","RequestSigner","subResources","responseHeaders","addAuthorization","credentials","date","request","headers","rfc822","sessionToken","signature","sign","secretAccessKey","stringToSign","auth","accessKeyId","r","parts","push","method","canonicalizedAmzHeaders","canonicalizedResource","join","amzHeaders","each","name","match","sort","a","b","toLowerCase","arrayEach","call","String","path","split","querystring","resource","virtualHostedBucket","resources","param","value","subresource","undefined","decodeURIComponent","length","res","secret","string","crypto","hmac","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nAWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {\n  /**\n   * When building the stringToSign, these sub resource params should be\n   * part of the canonical resource string with their NON-decoded values\n   */\n  subResources: {\n    'acl': 1,\n    'accelerate': 1,\n    'analytics': 1,\n    'cors': 1,\n    'lifecycle': 1,\n    'delete': 1,\n    'inventory': 1,\n    'location': 1,\n    'logging': 1,\n    'metrics': 1,\n    'notification': 1,\n    'partNumber': 1,\n    'policy': 1,\n    'requestPayment': 1,\n    'replication': 1,\n    'restore': 1,\n    'tagging': 1,\n    'torrent': 1,\n    'uploadId': 1,\n    'uploads': 1,\n    'versionId': 1,\n    'versioning': 1,\n    'versions': 1,\n    'website': 1\n  },\n\n  // when building the stringToSign, these querystring params should be\n  // part of the canonical resource string with their NON-encoded values\n  responseHeaders: {\n    'response-content-type': 1,\n    'response-content-language': 1,\n    'response-expires': 1,\n    'response-cache-control': 1,\n    'response-content-disposition': 1,\n    'response-content-encoding': 1\n  },\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    if (!this.request.headers['presigned-expires']) {\n      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);\n    }\n\n    if (credentials.sessionToken) {\n      // presigned URLs require this header to be lowercased\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    }\n\n    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());\n    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;\n\n    this.request.headers['Authorization'] = auth;\n  },\n\n  stringToSign: function stringToSign() {\n    var r = this.request;\n\n    var parts = [];\n    parts.push(r.method);\n    parts.push(r.headers['Content-MD5'] || '');\n    parts.push(r.headers['Content-Type'] || '');\n\n    // This is the \"Date\" header, but we use X-Amz-Date.\n    // The S3 signing mechanism requires us to pass an empty\n    // string for this Date header regardless.\n    parts.push(r.headers['presigned-expires'] || '');\n\n    var headers = this.canonicalizedAmzHeaders();\n    if (headers) parts.push(headers);\n    parts.push(this.canonicalizedResource());\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {\n\n    var amzHeaders = [];\n\n    AWS.util.each(this.request.headers, function (name) {\n      if (name.match(/^x-amz-/i))\n        amzHeaders.push(name);\n    });\n\n    amzHeaders.sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    });\n\n    var parts = [];\n    AWS.util.arrayEach.call(this, amzHeaders, function (name) {\n      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));\n    });\n\n    return parts.join('\\n');\n\n  },\n\n  canonicalizedResource: function canonicalizedResource() {\n\n    var r = this.request;\n\n    var parts = r.path.split('?');\n    var path = parts[0];\n    var querystring = parts[1];\n\n    var resource = '';\n\n    if (r.virtualHostedBucket)\n      resource += '/' + r.virtualHostedBucket;\n\n    resource += path;\n\n    if (querystring) {\n\n      // collect a list of sub resources and query params that need to be signed\n      var resources = [];\n\n      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {\n        var name = param.split('=')[0];\n        var value = param.split('=')[1];\n        if (this.subResources[name] || this.responseHeaders[name]) {\n          var subresource = { name: name };\n          if (value !== undefined) {\n            if (this.subResources[name]) {\n              subresource.value = value;\n            } else {\n              subresource.value = decodeURIComponent(value);\n            }\n          }\n          resources.push(subresource);\n        }\n      });\n\n      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });\n\n      if (resources.length) {\n\n        querystring = [];\n        AWS.util.arrayEach(resources, function (res) {\n          if (res.value === undefined) {\n            querystring.push(res.name);\n          } else {\n            querystring.push(res.name + '=' + res.value);\n          }\n        });\n\n        resource += '?' + querystring.join('&');\n      }\n\n    }\n\n    return resource;\n\n  },\n\n  sign: function sign(secret, string) {\n    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');\n  }\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.Signers.S3;\n"]},"metadata":{},"sourceType":"script"}