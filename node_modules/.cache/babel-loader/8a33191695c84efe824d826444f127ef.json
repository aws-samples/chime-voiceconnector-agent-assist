{"ast":null,"code":"/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger, Credentials, JS } from '@aws-amplify/core';\nimport * as PersonalizeEvents from 'aws-sdk/clients/personalizeevents';\nimport { SessionInfoManager, MediaAutoTrack } from './AmazonPersonalizeHelper';\nimport { isEmpty, isEqual, get } from 'lodash';\nvar logger = new Logger('AmazonPersonalizeProvider'); // events buffer\n\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar IDENTIFY_EVENT = 'Identify';\n\nvar AmazonPersonalizeProvider =\n/** @class */\nfunction () {\n  function AmazonPersonalizeProvider(config) {\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.flushSize = this._config.flushSize > 0 && this._config.flushSize <= FLUSH_SIZE_THRESHHOLD ? this._config.flushSize : FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._sessionManager = new SessionInfoManager();\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._isBrowser = JS.browserOrNode().isBrowser; // flush event buffer\n\n    this._setupTimer();\n  }\n\n  AmazonPersonalizeProvider.prototype._setupTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var _a = this._config,\n        flushSize = _a.flushSize,\n        flushInterval = _a.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      that._sendFromBuffer();\n    }, flushInterval);\n  };\n  /**\n   * Record event\n   * @param eventType      - type of the event action. e.g. \"Click\"\n   * @param properties     - properties of the event\n   * @return Promise\n   */\n\n\n  AmazonPersonalizeProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, eventType, properties, requestParams, isLoaded;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials,\n              sentAt: new Date().getTime() / 1000\n            });\n            _a = params.event, eventType = _a.eventType, properties = _a.properties;\n\n            if (eventType === IDENTIFY_EVENT) {\n              this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n\n              return [2\n              /*return*/\n              ];\n            } else if (!isEmpty(params.event.userId)) {\n              this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n            }\n\n            requestParams = this.generateRequestParams(params, this._sessionInfo);\n            if (!(eventType === 'MediaAutoTrack')) return [3\n            /*break*/\n            , 7];\n            if (!this._isBrowser) return [3\n            /*break*/\n            , 5];\n            if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n\n          case 2:\n            isLoaded = _b.sent();\n\n            if (isLoaded) {\n              new MediaAutoTrack(requestParams, this);\n            } else {\n              logger.debug('Cannot find the media element.');\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n            _b.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            logger.debug('MediaAutoTrack only for browser');\n            _b.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            , this.putToBuffer(requestParams)];\n        }\n      });\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n    return new Promise(function (resolve, reject) {\n      if (document.getElementById(domId) && document.getElementById(domId).clientHeight) {\n        return resolve(true);\n      } else {\n        return reject(true);\n      }\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n    var _this = this;\n\n    var wait = function wait(ms) {\n      return new Promise(function (r) {\n        return setTimeout(r, ms);\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      return operation(params).then(resolve).catch(function (reason) {\n        if (times - 1 > 0) {\n          return wait(delay).then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1)).then(resolve).catch(reject);\n        }\n\n        return reject(reason);\n      });\n    });\n  };\n  /**\n   * get the category of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getProviderName = function () {\n    return 'AmazonPersonalize';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AmazonPersonalizeProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._setupTimer();\n\n    return this._config;\n  };\n  /**\n   * Generate the requestParams from customer input params and sessionInfo\n   * @private\n   * @param eventData      - customer input for event data\n   * @param api            - api name\n   * @return RequestParams - wrapper object with all information required for make request\n   */\n\n\n  AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n    var requestParams = {};\n    var _a = params.event,\n        eventType = _a.eventType,\n        properties = _a.properties;\n    requestParams.eventData = {\n      eventType: eventType,\n      properties: properties\n    };\n    requestParams.sessionInfo = sessionInfo;\n    requestParams.sentAt = params.sentAt;\n    requestParams.credentials = params.credentials;\n    requestParams.config = params.config;\n    return requestParams;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n    var groupLen = group.length;\n\n    if (groupLen === 0) {\n      logger.debug('events array is empty, directly return');\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials,\n        sessionInfo = _a.sessionInfo;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n\n    if (groupLen > 0) {\n      var events = [];\n\n      for (var i = 0; i < groupLen; i += 1) {\n        var params = group.shift();\n\n        var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n\n        events.push(eventPayload);\n      }\n\n      var payload = {};\n      payload.trackingId = sessionInfo.trackingId;\n      payload.sessionId = sessionInfo.sessionId;\n      payload.userId = sessionInfo.userId;\n      payload.eventList = events;\n\n      this._personalize.putEvents(payload, function (err, data) {\n        if (err) logger.debug('Failed to call putEvents in Personalize', err);else logger.debug('Put events');\n      });\n    }\n  };\n  /**\n   * Put event into buffer\n   * @private\n   * @param params - params for the event recording\n   */\n\n\n  AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n    if (this._buffer.length < this._config.flushSize) {\n      this._buffer.push(params);\n    } else {\n      this._buffer.push(params);\n\n      this._sendFromBuffer();\n    }\n\n    return Promise.resolve(true);\n  };\n  /**\n   * flush the buffer and batch sending the request\n   * @private\n   * @param eventsParams - the buffer for cache the payload\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n    var _this = this;\n\n    var size = this._buffer.length;\n    if (size <= 0) return;\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n\n    for (var i = 0; i < size; i += 1) {\n      var currRequestParams = this._buffer.shift();\n\n      var cred = currRequestParams.credentials;\n      var sessionInfo = currRequestParams.sessionInfo;\n\n      if (i === 0) {\n        group.push(currRequestParams);\n        preCred = cred;\n      } else {\n        if (isEqual(sessionInfo, this._sessionInfo) && cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(currRequestParams);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(currRequestParams);\n          preCred = cred;\n          this._sessionInfo = sessionInfo;\n        }\n      }\n    }\n\n    eventsGroups.push(group);\n    eventsGroups.map(function (group) {\n      _this._sendEvents(group);\n    });\n  };\n  /**\n   * Generate the record payload for single event\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n    var eventData = params.eventData,\n        sentAt = params.sentAt;\n    var trackPayload = {};\n    trackPayload.sentAt = sentAt;\n    trackPayload.properties = eventData.properties;\n    trackPayload.eventId = this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n    trackPayload.eventType = eventData.eventType;\n    return trackPayload;\n  };\n  /**\n   * Initialize the personalize client\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._personalize && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region;\n    logger.debug('initialize personalize with credentials', credentials);\n    this._personalize = new PersonalizeEvents({\n      apiVersion: '2018-03-22',\n      region: region,\n      credentials: credentials\n    });\n    return true;\n  };\n  /**\n   * check if current credentials exists\n   * @private\n   */\n\n\n  AmazonPersonalizeProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', that._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n\n  return AmazonPersonalizeProvider;\n}();\n\nexport default AmazonPersonalizeProvider;","map":{"version":3,"sources":["../../src/Providers/AmazonPersonalizeProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2019-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger, Credentials, JS } from '@aws-amplify/core';\nimport * as PersonalizeEvents from 'aws-sdk/clients/personalizeevents';\nimport { SessionInfoManager, MediaAutoTrack, } from './AmazonPersonalizeHelper';\nimport { isEmpty, isEqual, get } from 'lodash';\nvar logger = new Logger('AmazonPersonalizeProvider');\n// events buffer\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar IDENTIFY_EVENT = 'Identify';\nvar AmazonPersonalizeProvider = /** @class */ (function () {\n    function AmazonPersonalizeProvider(config) {\n        this._buffer = [];\n        this._config = config ? config : {};\n        this._config.flushSize =\n            this._config.flushSize > 0 &&\n                this._config.flushSize <= FLUSH_SIZE_THRESHHOLD\n                ? this._config.flushSize\n                : FLUSH_SIZE;\n        this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n        this._sessionManager = new SessionInfoManager();\n        if (!isEmpty(this._config.trackingId)) {\n            this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n        }\n        this._isBrowser = JS.browserOrNode().isBrowser;\n        // flush event buffer\n        this._setupTimer();\n    }\n    AmazonPersonalizeProvider.prototype._setupTimer = function () {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        var _a = this._config, flushSize = _a.flushSize, flushInterval = _a.flushInterval;\n        var that = this;\n        this._timer = setInterval(function () {\n            that._sendFromBuffer();\n        }, flushInterval);\n    };\n    /**\n     * Record event\n     * @param eventType      - type of the event action. e.g. \"Click\"\n     * @param properties     - properties of the event\n     * @return Promise\n     */\n    AmazonPersonalizeProvider.prototype.record = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, eventType, properties, requestParams, isLoaded;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._getCredentials()];\n                    case 1:\n                        credentials = _b.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.resolve(false)];\n                        Object.assign(params, {\n                            config: this._config,\n                            credentials: credentials,\n                            sentAt: new Date().getTime() / 1000,\n                        });\n                        _a = params.event, eventType = _a.eventType, properties = _a.properties;\n                        if (eventType === IDENTIFY_EVENT) {\n                            this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n                            return [2 /*return*/];\n                        }\n                        else if (!isEmpty(params.event.userId)) {\n                            this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n                        }\n                        requestParams = this.generateRequestParams(params, this._sessionInfo);\n                        if (!(eventType === 'MediaAutoTrack')) return [3 /*break*/, 7];\n                        if (!this._isBrowser) return [3 /*break*/, 5];\n                        if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n                    case 2:\n                        isLoaded = _b.sent();\n                        if (isLoaded) {\n                            new MediaAutoTrack(requestParams, this);\n                        }\n                        else {\n                            logger.debug('Cannot find the media element.');\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n                        _b.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        logger.debug('MediaAutoTrack only for browser');\n                        _b.label = 6;\n                    case 6: return [2 /*return*/];\n                    case 7: return [2 /*return*/, this.putToBuffer(requestParams)];\n                }\n            });\n        });\n    };\n    AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n        return new Promise(function (resolve, reject) {\n            if (document.getElementById(domId) &&\n                document.getElementById(domId).clientHeight) {\n                return resolve(true);\n            }\n            else {\n                return reject(true);\n            }\n        });\n    };\n    AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n        var _this = this;\n        var wait = function (ms) { return new Promise(function (r) { return setTimeout(r, ms); }); };\n        return new Promise(function (resolve, reject) {\n            return operation(params)\n                .then(resolve)\n                .catch(function (reason) {\n                if (times - 1 > 0) {\n                    return wait(delay)\n                        .then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1))\n                        .then(resolve)\n                        .catch(reject);\n                }\n                return reject(reason);\n            });\n        });\n    };\n    /**\n     * get the category of the plugin\n     */\n    AmazonPersonalizeProvider.prototype.getCategory = function () {\n        return 'Analytics';\n    };\n    /**\n     * get provider name of the plugin\n     */\n    AmazonPersonalizeProvider.prototype.getProviderName = function () {\n        return 'AmazonPersonalize';\n    };\n    /**\n     * configure the plugin\n     * @param {Object} config - configuration\n     */\n    AmazonPersonalizeProvider.prototype.configure = function (config) {\n        logger.debug('configure Analytics', config);\n        var conf = config ? config : {};\n        this._config = Object.assign({}, this._config, conf);\n        if (!isEmpty(this._config.trackingId)) {\n            this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n        }\n        this._setupTimer();\n        return this._config;\n    };\n    /**\n     * Generate the requestParams from customer input params and sessionInfo\n     * @private\n     * @param eventData      - customer input for event data\n     * @param api            - api name\n     * @return RequestParams - wrapper object with all information required for make request\n     */\n    AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n        var requestParams = {};\n        var _a = params.event, eventType = _a.eventType, properties = _a.properties;\n        requestParams.eventData = { eventType: eventType, properties: properties };\n        requestParams.sessionInfo = sessionInfo;\n        requestParams.sentAt = params.sentAt;\n        requestParams.credentials = params.credentials;\n        requestParams.config = params.config;\n        return requestParams;\n    };\n    /**\n     * record an event\n     * @param {Object} params - the params of an event\n     */\n    AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n        var groupLen = group.length;\n        if (groupLen === 0) {\n            logger.debug('events array is empty, directly return');\n            return;\n        }\n        var _a = group[0], config = _a.config, credentials = _a.credentials, sessionInfo = _a.sessionInfo;\n        var initClients = this._init(config, credentials);\n        if (!initClients)\n            return false;\n        if (groupLen > 0) {\n            var events = [];\n            for (var i = 0; i < groupLen; i += 1) {\n                var params = group.shift();\n                var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n                events.push(eventPayload);\n            }\n            var payload = {};\n            payload.trackingId = sessionInfo.trackingId;\n            payload.sessionId = sessionInfo.sessionId;\n            payload.userId = sessionInfo.userId;\n            payload.eventList = events;\n            this._personalize.putEvents(payload, function (err, data) {\n                if (err)\n                    logger.debug('Failed to call putEvents in Personalize', err);\n                else\n                    logger.debug('Put events');\n            });\n        }\n    };\n    /**\n     * Put event into buffer\n     * @private\n     * @param params - params for the event recording\n     */\n    AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n        if (this._buffer.length < this._config.flushSize) {\n            this._buffer.push(params);\n        }\n        else {\n            this._buffer.push(params);\n            this._sendFromBuffer();\n        }\n        return Promise.resolve(true);\n    };\n    /**\n     * flush the buffer and batch sending the request\n     * @private\n     * @param eventsParams - the buffer for cache the payload\n     */\n    AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n        var _this = this;\n        var size = this._buffer.length;\n        if (size <= 0)\n            return;\n        var eventsGroups = [];\n        var preCred = null;\n        var group = [];\n        for (var i = 0; i < size; i += 1) {\n            var currRequestParams = this._buffer.shift();\n            var cred = currRequestParams.credentials;\n            var sessionInfo = currRequestParams.sessionInfo;\n            if (i === 0) {\n                group.push(currRequestParams);\n                preCred = cred;\n            }\n            else {\n                if (isEqual(sessionInfo, this._sessionInfo) &&\n                    cred.sessionToken === preCred.sessionToken &&\n                    cred.identityId === preCred.identityId) {\n                    logger.debug('no change for cred, put event in the same group');\n                    group.push(currRequestParams);\n                }\n                else {\n                    eventsGroups.push(group);\n                    group = [];\n                    group.push(currRequestParams);\n                    preCred = cred;\n                    this._sessionInfo = sessionInfo;\n                }\n            }\n        }\n        eventsGroups.push(group);\n        eventsGroups.map(function (group) {\n            _this._sendEvents(group);\n        });\n    };\n    /**\n     * Generate the record payload for single event\n     * @private\n     * @param params - RequestParams\n     */\n    AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n        var eventData = params.eventData, sentAt = params.sentAt;\n        var trackPayload = {};\n        trackPayload.sentAt = sentAt;\n        trackPayload.properties = eventData.properties;\n        trackPayload.eventId =\n            this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n        trackPayload.eventType = eventData.eventType;\n        return trackPayload;\n    };\n    /**\n     * Initialize the personalize client\n     * @private\n     * @param params - RequestParams\n     */\n    AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n        logger.debug('init clients');\n        if (this._personalize &&\n            this._config.credentials &&\n            this._config.credentials.sessionToken === credentials.sessionToken &&\n            this._config.credentials.identityId === credentials.identityId) {\n            logger.debug('no change for analytics config, directly return from init');\n            return true;\n        }\n        this._config.credentials = credentials;\n        var region = config.region;\n        logger.debug('initialize personalize with credentials', credentials);\n        this._personalize = new PersonalizeEvents({\n            apiVersion: '2018-03-22',\n            region: region,\n            credentials: credentials,\n        });\n        return true;\n    };\n    /**\n     * check if current credentials exists\n     * @private\n     */\n    AmazonPersonalizeProvider.prototype._getCredentials = function () {\n        var that = this;\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return null;\n            logger.debug('set credentials for analytics', that._config.credentials);\n            return Credentials.shear(credentials);\n        })\n            .catch(function (err) {\n            logger.debug('ensure credentials error', err);\n            return null;\n        });\n    };\n    return AmazonPersonalizeProvider;\n}());\nexport default AmazonPersonalizeProvider;\n//# sourceMappingURL=AmazonPersonalizeProvider.js.map"]},"metadata":{},"sourceType":"module"}