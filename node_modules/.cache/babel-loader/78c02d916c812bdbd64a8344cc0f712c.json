{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crc32_1 = require(\"@aws-crypto/crc32\"); // All prelude components are unsigned, 32-bit integers\n\n\nvar PRELUDE_MEMBER_LENGTH = 4; // The prelude consists of two components\n\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2; // Checksums are always CRC32 hashes.\n\nvar CHECKSUM_LENGTH = 4; // Messages must include a full prelude, a prelude checksum, and a message checksum\n\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n/**\n * @internal\n */\n\nfunction splitMessage(_a) {\n  var byteLength = _a.byteLength,\n      byteOffset = _a.byteOffset,\n      buffer = _a.buffer;\n\n  if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n    throw new Error('Provided message too short to accommodate event stream message overhead');\n  }\n\n  var view = new DataView(buffer, byteOffset, byteLength);\n  var messageLength = view.getUint32(0, false);\n\n  if (byteLength !== messageLength) {\n    throw new Error('Reported message length does not match received message length');\n  }\n\n  var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n  var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n  var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n  var checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n\n  if (expectedPreludeChecksum !== checksummer.digest()) {\n    throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n  }\n\n  checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n\n  if (expectedMessageChecksum !== checksummer.digest()) {\n    throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n  }\n\n  return {\n    headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n    body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n  };\n}\n\nexports.splitMessage = splitMessage;","map":{"version":3,"sources":["../src/splitMessage.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA,C,CAEA;;;AACA,IAAM,qBAAqB,GAAG,CAA9B,C,CACA;;AACA,IAAM,cAAc,GAAG,qBAAqB,GAAG,CAA/C,C,CACA;;AACA,IAAM,eAAe,GAAG,CAAxB,C,CACA;;AACA,IAAM,sBAAsB,GAAG,cAAc,GAAG,eAAe,GAAG,CAAlE;AAUA;;;;AAGA,SAAgB,YAAhB,CACI,EADJ,EACuD;MAAjD,UAAA,GAAA,EAAA,CAAA,U;MAAY,UAAA,GAAA,EAAA,CAAA,U;MAAY,MAAA,GAAA,EAAA,CAAA,M;;AAE1B,MAAI,UAAU,GAAG,sBAAjB,EAAyC;AACrC,UAAM,IAAI,KAAJ,CACF,yEADE,CAAN;AAGH;;AAED,MAAM,IAAI,GAAG,IAAI,QAAJ,CAAa,MAAb,EAAqB,UAArB,EAAiC,UAAjC,CAAb;AAEA,MAAM,aAAa,GAAG,IAAI,CAAC,SAAL,CAAe,CAAf,EAAkB,KAAlB,CAAtB;;AAEA,MAAI,UAAU,KAAK,aAAnB,EAAkC;AAC9B,UAAM,IAAI,KAAJ,CACF,gEADE,CAAN;AAGH;;AAED,MAAM,YAAY,GAAG,IAAI,CAAC,SAAL,CAAe,qBAAf,EAAsC,KAAtC,CAArB;AACA,MAAM,uBAAuB,GAAG,IAAI,CAAC,SAAL,CAAe,cAAf,EAA+B,KAA/B,CAAhC;AACA,MAAM,uBAAuB,GAAG,IAAI,CAAC,SAAL,CAC5B,UAAU,GAAG,eADe,EAE5B,KAF4B,CAAhC;AAKA,MAAM,WAAW,GAAI,IAAI,OAAA,CAAA,KAAJ,EAAD,CAAY,MAAZ,CAChB,IAAI,UAAJ,CAAe,MAAf,EAAuB,UAAvB,EAAmC,cAAnC,CADgB,CAApB;;AAGA,MACI,uBAAuB,KAAK,WAAW,CAAC,MAAZ,EADhC,EAEE;AACE,UAAM,IAAI,KAAJ,CACF,oDACI,uBADJ,GAC2B,kDAD3B,GAGI,WAAW,CAAC,MAAZ,EAHJ,GAGwB,GAJtB,CAAN;AAOH;;AAED,EAAA,WAAW,CAAC,MAAZ,CAAmB,IAAI,UAAJ,CACf,MADe,EAEf,UAAU,GAAG,cAFE,EAGf,UAAU,IAAI,cAAc,GAAG,eAArB,CAHK,CAAnB;;AAKA,MAAI,uBAAuB,KAAK,WAAW,CAAC,MAAZ,EAAhC,EAAsD;AAClD,UAAM,IAAI,KAAJ,CACF,2BACI,WAAW,CAAC,MAAZ,EADJ,GACwB,wCADxB,GAEyC,uBAHvC,CAAN;AAKH;;AAED,SAAO;AACH,IAAA,OAAO,EAAE,IAAI,QAAJ,CACL,MADK,EAEL,UAAU,GAAG,cAAb,GAA8B,eAFzB,EAGL,YAHK,CADN;AAMH,IAAA,IAAI,EAAE,IAAI,UAAJ,CACF,MADE,EAEF,UAAU,GAAG,cAAb,GAA8B,eAA9B,GAAgD,YAF9C,EAGF,aAAa,GAAG,YAAhB,IACI,cAAc,GAAG,eAAjB,GAAmC,eADvC,CAHE;AANH,GAAP;AAcH;;AApED,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar crc32_1 = require(\"@aws-crypto/crc32\");\n// All prelude components are unsigned, 32-bit integers\nvar PRELUDE_MEMBER_LENGTH = 4;\n// The prelude consists of two components\nvar PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\n// Checksums are always CRC32 hashes.\nvar CHECKSUM_LENGTH = 4;\n// Messages must include a full prelude, a prelude checksum, and a message checksum\nvar MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\n/**\n * @internal\n */\nfunction splitMessage(_a) {\n    var byteLength = _a.byteLength, byteOffset = _a.byteOffset, buffer = _a.buffer;\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\n        throw new Error('Provided message too short to accommodate event stream message overhead');\n    }\n    var view = new DataView(buffer, byteOffset, byteLength);\n    var messageLength = view.getUint32(0, false);\n    if (byteLength !== messageLength) {\n        throw new Error('Reported message length does not match received message length');\n    }\n    var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\n    var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\n    var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\n    var checksummer = (new crc32_1.Crc32).update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\n    if (expectedPreludeChecksum !== checksummer.digest()) {\n        throw new Error(\"The prelude checksum specified in the message (\" + expectedPreludeChecksum + \") does not match the calculated CRC32 checksum (\" + checksummer.digest() + \")\");\n    }\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\n    if (expectedMessageChecksum !== checksummer.digest()) {\n        throw new Error(\"The message checksum (\" + checksummer.digest() + \") did not match the expected value of \" + expectedMessageChecksum);\n    }\n    return {\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))\n    };\n}\nexports.splitMessage = splitMessage;\n//# sourceMappingURL=splitMessage.js.map"]},"metadata":{},"sourceType":"script"}