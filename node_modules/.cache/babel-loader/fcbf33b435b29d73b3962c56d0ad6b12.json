{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  var message = \"Unknown type \\\"\".concat(typeName, \"\\\".\");\n\n  if (suggestedTypes.length) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedTypes), \"?\");\n  }\n\n  return message;\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n\n      if (!type) {\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/validation/rules/KnownTypeNames.mjs"],"names":["GraphQLError","suggestionList","quotedOrList","unknownTypeMessage","typeName","suggestedTypes","message","concat","length","KnownTypeNames","context","ObjectTypeDefinition","InterfaceTypeDefinition","UnionTypeDefinition","InputObjectTypeDefinition","NamedType","node","schema","getSchema","name","value","type","getType","reportError","Object","keys","getTypeMap"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,OAAO,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,cAAtC,EAAsD;AAC3D,MAAIC,OAAO,GAAG,kBAAkBC,MAAlB,CAAyBH,QAAzB,EAAmC,KAAnC,CAAd;;AAEA,MAAIC,cAAc,CAACG,MAAnB,EAA2B;AACzBF,IAAAA,OAAO,IAAI,iBAAiBC,MAAjB,CAAwBL,YAAY,CAACG,cAAD,CAApC,EAAsD,GAAtD,CAAX;AACD;;AAED,SAAOC,OAAP;AACD;AACD;;;;;;;AAOA,OAAO,SAASG,cAAT,CAAwBC,OAAxB,EAAiC;AACtC,SAAO;AACL;AACA;AACA;AACAC,IAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,aAAO,KAAP;AACD,KANI;AAOLC,IAAAA,uBAAuB,EAAE,SAASA,uBAAT,GAAmC;AAC1D,aAAO,KAAP;AACD,KATI;AAULC,IAAAA,mBAAmB,EAAE,SAASA,mBAAT,GAA+B;AAClD,aAAO,KAAP;AACD,KAZI;AAaLC,IAAAA,yBAAyB,EAAE,SAASA,yBAAT,GAAqC;AAC9D,aAAO,KAAP;AACD,KAfI;AAgBLC,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AAClC,UAAIC,MAAM,GAAGP,OAAO,CAACQ,SAAR,EAAb;AACA,UAAId,QAAQ,GAAGY,IAAI,CAACG,IAAL,CAAUC,KAAzB;AACA,UAAIC,IAAI,GAAGJ,MAAM,CAACK,OAAP,CAAelB,QAAf,CAAX;;AAEA,UAAI,CAACiB,IAAL,EAAW;AACTX,QAAAA,OAAO,CAACa,WAAR,CAAoB,IAAIvB,YAAJ,CAAiBG,kBAAkB,CAACC,QAAD,EAAWH,cAAc,CAACG,QAAD,EAAWoB,MAAM,CAACC,IAAP,CAAYR,MAAM,CAACS,UAAP,EAAZ,CAAX,CAAzB,CAAnC,EAA2G,CAACV,IAAD,CAA3G,CAApB;AACD;AACF;AAxBI,GAAP;AA0BD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport suggestionList from '../../jsutils/suggestionList';\nimport quotedOrList from '../../jsutils/quotedOrList';\nexport function unknownTypeMessage(typeName, suggestedTypes) {\n  var message = \"Unknown type \\\"\".concat(typeName, \"\\\".\");\n\n  if (suggestedTypes.length) {\n    message += \" Did you mean \".concat(quotedOrList(suggestedTypes), \"?\");\n  }\n\n  return message;\n}\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\n\nexport function KnownTypeNames(context) {\n  return {\n    // TODO: when validating IDL, re-enable these. Experimental version does not\n    // add unreferenced types, resulting in false-positive errors. Squelched\n    // errors for now.\n    ObjectTypeDefinition: function ObjectTypeDefinition() {\n      return false;\n    },\n    InterfaceTypeDefinition: function InterfaceTypeDefinition() {\n      return false;\n    },\n    UnionTypeDefinition: function UnionTypeDefinition() {\n      return false;\n    },\n    InputObjectTypeDefinition: function InputObjectTypeDefinition() {\n      return false;\n    },\n    NamedType: function NamedType(node) {\n      var schema = context.getSchema();\n      var typeName = node.name.value;\n      var type = schema.getType(typeName);\n\n      if (!type) {\n        context.reportError(new GraphQLError(unknownTypeMessage(typeName, suggestionList(typeName, Object.keys(schema.getTypeMap()))), [node]));\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}