{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n// The GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery // @deprecated, use getIntrospectionQuery() - will be removed in v15\n, introspectionQuery } from './introspectionQuery'; // Gets the target Operation from a Document\n\nexport { getOperationAST } from './getOperationAST'; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from './getOperationRootType'; // Convert a GraphQLSchema to an IntrospectionQuery\n\nexport { introspectionFromSchema } from './introspectionFromSchema'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16\n, getDescription } from './buildASTSchema'; // Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\n\nexport { extendSchema } from './extendSchema'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport { printSchema, printType, printIntrospectionSchema } from './schemaPrinter'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue'; // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n\nexport { TypeInfo } from './TypeInfo'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceValue } from './coerceValue'; // @deprecated use coerceValue - will be removed in v15\n\nexport { isValidJSValue } from './isValidJSValue'; // @deprecated use validation - will be removed in v15\n\nexport { isValidLiteralValue } from './isValidLiteralValue'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations'; // Comparators for types\n\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from './typeComparators'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from './assertValidName'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from './findBreakingChanges'; // Report all deprecated usage within a GraphQL document.\n\nexport { findDeprecatedUsages } from './findDeprecatedUsages';","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/utilities/index.mjs"],"names":["getIntrospectionQuery","introspectionQuery","getOperationAST","getOperationRootType","introspectionFromSchema","buildClientSchema","buildASTSchema","buildSchema","getDescription","extendSchema","lexicographicSortSchema","printSchema","printType","printIntrospectionSchema","typeFromAST","valueFromAST","valueFromASTUntyped","astFromValue","TypeInfo","coerceValue","isValidJSValue","isValidLiteralValue","concatAST","separateOperations","isEqualType","isTypeSubTypeOf","doTypesOverlap","assertValidName","isValidNameError","BreakingChangeType","DangerousChangeType","findBreakingChanges","findDangerousChanges","findDeprecatedUsages"],"mappings":"AAAA;;;;;;;;AAQA;AACA,SAASA,qBAAT,CAAgC;AAAhC,EACAC,kBADA,QAC0B,sBAD1B,C,CAEA;;AACA,SAASC,eAAT,QAAgC,mBAAhC,C,CAAqD;;AAErD,SAASC,oBAAT,QAAqC,wBAArC,C,CAA+D;;AAE/D,SAASC,uBAAT,QAAwC,2BAAxC,C,CAAqE;;AAErE,SAASC,iBAAT,QAAkC,qBAAlC,C,CAAyD;;AAEzD,SAASC,cAAT,EAAyBC,WAAzB,CAAsC;AACtC;AADA,EAEAC,cAFA,QAEsB,kBAFtB,C,CAGA;;AACA,SAASC,YAAT,QAA6B,gBAA7B,C,CAA+C;;AAE/C,SAASC,uBAAT,QAAwC,2BAAxC,C,CAAqE;;AAErE,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,wBAAjC,QAAiE,iBAAjE,C,CAAoF;;AAEpF,SAASC,WAAT,QAA4B,eAA5B,C,CAA6C;;AAE7C,SAASC,YAAT,QAA6B,gBAA7B,C,CAA+C;;AAE/C,SAASC,mBAAT,QAAoC,uBAApC,C,CAA6D;;AAE7D,SAASC,YAAT,QAA6B,gBAA7B,C,CAA+C;AAC/C;;AAEA,SAASC,QAAT,QAAyB,YAAzB,C,CAAuC;;AAEvC,SAASC,WAAT,QAA4B,eAA5B,C,CAA6C;;AAE7C,SAASC,cAAT,QAA+B,kBAA/B,C,CAAmD;;AAEnD,SAASC,mBAAT,QAAoC,uBAApC,C,CAA6D;;AAE7D,SAASC,SAAT,QAA0B,aAA1B,C,CAAyC;;AAEzC,SAASC,kBAAT,QAAmC,sBAAnC,C,CAA2D;;AAE3D,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,cAAvC,QAA6D,mBAA7D,C,CAAkF;;AAElF,SAASC,eAAT,EAA0BC,gBAA1B,QAAkD,mBAAlD,C,CAAuE;;AAEvE,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,mBAAlD,EAAuEC,oBAAvE,QAAmG,uBAAnG,C,CACA;;AACA,SAASC,oBAAT,QAAqC,wBAArC","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n// The GraphQL query recommended for a full schema introspection.\nexport { getIntrospectionQuery, // @deprecated, use getIntrospectionQuery() - will be removed in v15\nintrospectionQuery } from './introspectionQuery';\n// Gets the target Operation from a Document\nexport { getOperationAST } from './getOperationAST'; // Gets the Type for the target Operation AST.\n\nexport { getOperationRootType } from './getOperationRootType'; // Convert a GraphQLSchema to an IntrospectionQuery\n\nexport { introspectionFromSchema } from './introspectionFromSchema'; // Build a GraphQLSchema from an introspection result.\n\nexport { buildClientSchema } from './buildClientSchema'; // Build a GraphQLSchema from GraphQL Schema language.\n\nexport { buildASTSchema, buildSchema, // @deprecated: Get the description from a schema AST node and supports legacy\n// syntax for specifying descriptions - will be removed in v16\ngetDescription } from './buildASTSchema';\n// Extends an existing GraphQLSchema from a parsed GraphQL Schema language AST.\nexport { extendSchema } from './extendSchema'; // Sort a GraphQLSchema.\n\nexport { lexicographicSortSchema } from './lexicographicSortSchema'; // Print a GraphQLSchema to GraphQL Schema language.\n\nexport { printSchema, printType, printIntrospectionSchema } from './schemaPrinter'; // Create a GraphQLType from a GraphQL language AST.\n\nexport { typeFromAST } from './typeFromAST'; // Create a JavaScript value from a GraphQL language AST with a type.\n\nexport { valueFromAST } from './valueFromAST'; // Create a JavaScript value from a GraphQL language AST without a type.\n\nexport { valueFromASTUntyped } from './valueFromASTUntyped'; // Create a GraphQL language AST from a JavaScript value.\n\nexport { astFromValue } from './astFromValue'; // A helper to use within recursive-descent visitors which need to be aware of\n// the GraphQL type system.\n\nexport { TypeInfo } from './TypeInfo'; // Coerces a JavaScript value to a GraphQL type, or produces errors.\n\nexport { coerceValue } from './coerceValue'; // @deprecated use coerceValue - will be removed in v15\n\nexport { isValidJSValue } from './isValidJSValue'; // @deprecated use validation - will be removed in v15\n\nexport { isValidLiteralValue } from './isValidLiteralValue'; // Concatenates multiple AST together.\n\nexport { concatAST } from './concatAST'; // Separates an AST into an AST per Operation.\n\nexport { separateOperations } from './separateOperations'; // Comparators for types\n\nexport { isEqualType, isTypeSubTypeOf, doTypesOverlap } from './typeComparators'; // Asserts that a string is a valid GraphQL name\n\nexport { assertValidName, isValidNameError } from './assertValidName'; // Compares two GraphQLSchemas and detects breaking changes.\n\nexport { BreakingChangeType, DangerousChangeType, findBreakingChanges, findDangerousChanges } from './findBreakingChanges';\n// Report all deprecated usage within a GraphQL document.\nexport { findDeprecatedUsages } from './findDeprecatedUsages';"]},"metadata":{},"sourceType":"module"}