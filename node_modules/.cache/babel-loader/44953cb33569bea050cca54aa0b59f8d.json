{"ast":null,"code":"var AWS = require('../core');\n\nAWS.util.update(AWS.SQS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.buildEndpoint);\n\n    if (request.service.config.computeChecksums) {\n      if (request.operation === 'sendMessage') {\n        request.addListener('extractData', this.verifySendMessageChecksum);\n      } else if (request.operation === 'sendMessageBatch') {\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);\n      } else if (request.operation === 'receiveMessage') {\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {\n    if (!response.data) return;\n    var md5 = response.data.MD5OfMessageBody;\n    var body = this.params.MessageBody;\n    var calculatedMd5 = this.service.calculateChecksum(body);\n\n    if (calculatedMd5 !== md5) {\n      var msg = 'Got \"' + response.data.MD5OfMessageBody + '\", expecting \"' + calculatedMd5 + '\".';\n      this.service.throwInvalidChecksumError(response, [response.data.MessageId], msg);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {\n    if (!response.data) return;\n    var service = this.service;\n    var entries = {};\n    var errors = [];\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Successful, function (entry) {\n      entries[entry.Id] = entry;\n    });\n    AWS.util.arrayEach(this.params.Entries, function (entry) {\n      if (entries[entry.Id]) {\n        var md5 = entries[entry.Id].MD5OfMessageBody;\n        var body = entry.MessageBody;\n\n        if (!service.isChecksumValid(md5, body)) {\n          errors.push(entry.Id);\n          messageIds.push(entries[entry.Id].MessageId);\n        }\n      }\n    });\n\n    if (errors.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds, 'Invalid messages: ' + errors.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {\n    if (!response.data) return;\n    var service = this.service;\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Messages, function (message) {\n      var md5 = message.MD5OfBody;\n      var body = message.Body;\n\n      if (!service.isChecksumValid(md5, body)) {\n        messageIds.push(message.MessageId);\n      }\n    });\n\n    if (messageIds.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds, 'Invalid messages: ' + messageIds.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {\n    response.error = AWS.util.error(new Error(), {\n      retryable: true,\n      code: 'InvalidChecksum',\n      messageIds: ids,\n      message: response.request.operation + ' returned an invalid MD5 response. ' + message\n    });\n  },\n\n  /**\n   * @api private\n   */\n  isChecksumValid: function isChecksumValid(checksum, data) {\n    return this.calculateChecksum(data) === checksum;\n  },\n\n  /**\n   * @api private\n   */\n  calculateChecksum: function calculateChecksum(data) {\n    return AWS.util.crypto.md5(data, 'hex');\n  },\n\n  /**\n   * @api private\n   */\n  buildEndpoint: function buildEndpoint(request) {\n    var url = request.httpRequest.params.QueueUrl;\n\n    if (url) {\n      request.httpRequest.endpoint = new AWS.Endpoint(url); // signature version 4 requires the region name to be set,\n      // sqs queue urls contain the region name\n\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);\n      if (matches) request.httpRequest.region = matches[1];\n    }\n  }\n});","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/services/sqs.js"],"names":["AWS","require","util","update","SQS","prototype","setupRequestListeners","request","addListener","buildEndpoint","service","config","computeChecksums","operation","verifySendMessageChecksum","verifySendMessageBatchChecksum","verifyReceiveMessageChecksum","response","data","md5","MD5OfMessageBody","body","params","MessageBody","calculatedMd5","calculateChecksum","msg","throwInvalidChecksumError","MessageId","entries","errors","messageIds","arrayEach","Successful","entry","Id","Entries","isChecksumValid","push","length","join","Messages","message","MD5OfBody","Body","ids","error","Error","retryable","code","checksum","crypto","url","httpRequest","QueueUrl","endpoint","Endpoint","matches","host","match","region"],"mappings":"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","sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.SQS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('build', this.buildEndpoint);\n\n    if (request.service.config.computeChecksums) {\n      if (request.operation === 'sendMessage') {\n        request.addListener('extractData', this.verifySendMessageChecksum);\n      } else if (request.operation === 'sendMessageBatch') {\n        request.addListener('extractData', this.verifySendMessageBatchChecksum);\n      } else if (request.operation === 'receiveMessage') {\n        request.addListener('extractData', this.verifyReceiveMessageChecksum);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageChecksum: function verifySendMessageChecksum(response) {\n    if (!response.data) return;\n\n    var md5 = response.data.MD5OfMessageBody;\n    var body = this.params.MessageBody;\n    var calculatedMd5 = this.service.calculateChecksum(body);\n    if (calculatedMd5 !== md5) {\n      var msg = 'Got \"' + response.data.MD5OfMessageBody +\n        '\", expecting \"' + calculatedMd5 + '\".';\n      this.service.throwInvalidChecksumError(response,\n        [response.data.MessageId], msg);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var entries = {};\n    var errors = [];\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Successful, function (entry) {\n      entries[entry.Id] = entry;\n    });\n    AWS.util.arrayEach(this.params.Entries, function (entry) {\n      if (entries[entry.Id]) {\n        var md5 = entries[entry.Id].MD5OfMessageBody;\n        var body = entry.MessageBody;\n        if (!service.isChecksumValid(md5, body)) {\n          errors.push(entry.Id);\n          messageIds.push(entries[entry.Id].MessageId);\n        }\n      }\n    });\n\n    if (errors.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + errors.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {\n    if (!response.data) return;\n\n    var service = this.service;\n    var messageIds = [];\n    AWS.util.arrayEach(response.data.Messages, function(message) {\n      var md5 = message.MD5OfBody;\n      var body = message.Body;\n      if (!service.isChecksumValid(md5, body)) {\n        messageIds.push(message.MessageId);\n      }\n    });\n\n    if (messageIds.length > 0) {\n      service.throwInvalidChecksumError(response, messageIds,\n        'Invalid messages: ' + messageIds.join(', '));\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {\n    response.error = AWS.util.error(new Error(), {\n      retryable: true,\n      code: 'InvalidChecksum',\n      messageIds: ids,\n      message: response.request.operation +\n               ' returned an invalid MD5 response. ' + message\n    });\n  },\n\n  /**\n   * @api private\n   */\n  isChecksumValid: function isChecksumValid(checksum, data) {\n    return this.calculateChecksum(data) === checksum;\n  },\n\n  /**\n   * @api private\n   */\n  calculateChecksum: function calculateChecksum(data) {\n    return AWS.util.crypto.md5(data, 'hex');\n  },\n\n  /**\n   * @api private\n   */\n  buildEndpoint: function buildEndpoint(request) {\n    var url = request.httpRequest.params.QueueUrl;\n    if (url) {\n      request.httpRequest.endpoint = new AWS.Endpoint(url);\n\n      // signature version 4 requires the region name to be set,\n      // sqs queue urls contain the region name\n      var matches = request.httpRequest.endpoint.host.match(/^sqs\\.(.+?)\\./);\n      if (matches) request.httpRequest.region = matches[1];\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}