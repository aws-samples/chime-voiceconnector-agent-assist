{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\nimport AWS from'aws-sdk';import{Auth}from'aws-amplify';import awsExports from'../aws-exports';import{MERGE_AUDIO_LAMBDA_FUNCTION_NAME}from'../constants';const defaultRegion=awsExports.aws_project_region;AWS.config.update({region:defaultRegion});export function getMergedAudioURL(bucket,oneAudioObject,otherAudioObject,transactionId){return Auth.currentCredentials().then(creds=>{const lambda=new AWS.Lambda({region:defaultRegion,credentials:Auth.essentialCredentials(creds)});const params={FunctionName:MERGE_AUDIO_LAMBDA_FUNCTION_NAME,InvocationType:'RequestResponse'};params['Payload']=Buffer.from(JSON.stringify({bucket:bucket,oneAudioObject:oneAudioObject,otherAudioObject:otherAudioObject,transactionId:transactionId}));return lambda.invoke(params).promise().then(data=>{const body=JSON.parse(data.Payload).body;if(body!==undefined){const urlFromLambda=body.url;if(urlFromLambda===undefined){return'';}return urlFromLambda;}else{return'';}});});}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/src/utils/audio.js"],"names":["AWS","Auth","awsExports","MERGE_AUDIO_LAMBDA_FUNCTION_NAME","defaultRegion","aws_project_region","config","update","region","getMergedAudioURL","bucket","oneAudioObject","otherAudioObject","transactionId","currentCredentials","then","creds","lambda","Lambda","credentials","essentialCredentials","params","FunctionName","InvocationType","Buffer","from","JSON","stringify","invoke","promise","data","body","parse","Payload","undefined","urlFromLambda","url"],"mappings":"AAAA;AACA;AAEA,MAAOA,CAAAA,GAAP,KAAgB,SAAhB,CACA,OAASC,IAAT,KAAqB,aAArB,CAEA,MAAOC,CAAAA,UAAP,KAAuB,gBAAvB,CACA,OAASC,gCAAT,KAAiD,cAAjD,CAEA,KAAMC,CAAAA,aAAa,CAAGF,UAAU,CAACG,kBAAjC,CACAL,GAAG,CAACM,MAAJ,CAAWC,MAAX,CAAkB,CAAEC,MAAM,CAAEJ,aAAV,CAAlB,EAEA,MAAO,SAASK,CAAAA,iBAAT,CAA2BC,MAA3B,CAAmCC,cAAnC,CAAmDC,gBAAnD,CAAqEC,aAArE,CAAoF,CACzF,MAAOZ,CAAAA,IAAI,CAACa,kBAAL,GAA0BC,IAA1B,CAA+BC,KAAK,EAAI,CAC7C,KAAMC,CAAAA,MAAM,CAAG,GAAIjB,CAAAA,GAAG,CAACkB,MAAR,CAAe,CAC5BV,MAAM,CAAEJ,aADoB,CAE5Be,WAAW,CAAElB,IAAI,CAACmB,oBAAL,CAA0BJ,KAA1B,CAFe,CAAf,CAAf,CAKA,KAAMK,CAAAA,MAAM,CAAG,CACbC,YAAY,CAAEnB,gCADD,CAEboB,cAAc,CAAE,iBAFH,CAAf,CAKAF,MAAM,CAAC,SAAD,CAAN,CAAoBG,MAAM,CAACC,IAAP,CAClBC,IAAI,CAACC,SAAL,CAAe,CACbjB,MAAM,CAAEA,MADK,CAEbC,cAAc,CAAEA,cAFH,CAGbC,gBAAgB,CAAEA,gBAHL,CAIbC,aAAa,CAAEA,aAJF,CAAf,CADkB,CAApB,CAQA,MAAOI,CAAAA,MAAM,CACVW,MADI,CACGP,MADH,EAEJQ,OAFI,GAGJd,IAHI,CAGCe,IAAI,EAAI,CACZ,KAAMC,CAAAA,IAAI,CAAGL,IAAI,CAACM,KAAL,CAAWF,IAAI,CAACG,OAAhB,EAAyBF,IAAtC,CACA,GAAIA,IAAI,GAAKG,SAAb,CAAwB,CACtB,KAAMC,CAAAA,aAAa,CAAGJ,IAAI,CAACK,GAA3B,CAEA,GAAID,aAAa,GAAKD,SAAtB,CAAiC,CAC/B,MAAO,EAAP,CACD,CACD,MAAOC,CAAAA,aAAP,CACD,CAPD,IAOO,CACL,MAAO,EAAP,CACD,CACF,CAfI,CAAP,CAgBD,CAnCM,CAAP,CAoCD","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport AWS from 'aws-sdk';\nimport { Auth } from 'aws-amplify';\n\nimport awsExports from '../aws-exports';\nimport { MERGE_AUDIO_LAMBDA_FUNCTION_NAME } from '../constants';\n\nconst defaultRegion = awsExports.aws_project_region;\nAWS.config.update({ region: defaultRegion });\n\nexport function getMergedAudioURL(bucket, oneAudioObject, otherAudioObject, transactionId) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      FunctionName: MERGE_AUDIO_LAMBDA_FUNCTION_NAME,\n      InvocationType: 'RequestResponse',\n    };\n\n    params['Payload'] = Buffer.from(\n      JSON.stringify({\n        bucket: bucket,\n        oneAudioObject: oneAudioObject,\n        otherAudioObject: otherAudioObject,\n        transactionId: transactionId,\n      })\n    );\n    return lambda\n      .invoke(params)\n      .promise()\n      .then(data => {\n        const body = JSON.parse(data.Payload).body;\n        if (body !== undefined) {\n          const urlFromLambda = body.url;\n\n          if (urlFromLambda === undefined) {\n            return '';\n          }\n          return urlFromLambda;\n        } else {\n          return '';\n        }\n      });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}