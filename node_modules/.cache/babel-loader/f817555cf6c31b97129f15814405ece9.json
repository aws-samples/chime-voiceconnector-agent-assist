{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport default function promiseForObject(object) {\n  var keys = Object.keys(object);\n  var valuesAndPromises = keys.map(function (name) {\n    return object[name];\n  });\n  return Promise.all(valuesAndPromises).then(function (values) {\n    return values.reduce(function (resolvedObject, value, i) {\n      resolvedObject[keys[i]] = value;\n      return resolvedObject;\n    }, Object.create(null));\n  });\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/jsutils/promiseForObject.mjs"],"names":["promiseForObject","object","keys","Object","valuesAndPromises","map","name","Promise","all","then","values","reduce","resolvedObject","value","i","create"],"mappings":"AAAA;;;;;;;;;AASA;;;;;;;AAOA,eAAe,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;AAC/C,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,MAAZ,CAAX;AACA,MAAIG,iBAAiB,GAAGF,IAAI,CAACG,GAAL,CAAS,UAAUC,IAAV,EAAgB;AAC/C,WAAOL,MAAM,CAACK,IAAD,CAAb;AACD,GAFuB,CAAxB;AAGA,SAAOC,OAAO,CAACC,GAAR,CAAYJ,iBAAZ,EAA+BK,IAA/B,CAAoC,UAAUC,MAAV,EAAkB;AAC3D,WAAOA,MAAM,CAACC,MAAP,CAAc,UAAUC,cAAV,EAA0BC,KAA1B,EAAiCC,CAAjC,EAAoC;AACvDF,MAAAA,cAAc,CAACV,IAAI,CAACY,CAAD,CAAL,CAAd,GAA0BD,KAA1B;AACA,aAAOD,cAAP;AACD,KAHM,EAGJT,MAAM,CAACY,MAAP,CAAc,IAAd,CAHI,CAAP;AAID,GALM,CAAP;AAMD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\n\n/**\n * This function transforms a JS object `ObjMap<Promise<T>>` into\n * a `Promise<ObjMap<T>>`\n *\n * This is akin to bluebird's `Promise.props`, but implemented only using\n * `Promise.all` so it will work with any implementation of ES6 promises.\n */\nexport default function promiseForObject(object) {\n  var keys = Object.keys(object);\n  var valuesAndPromises = keys.map(function (name) {\n    return object[name];\n  });\n  return Promise.all(valuesAndPromises).then(function (values) {\n    return values.reduce(function (resolvedObject, value, i) {\n      resolvedObject[keys[i]] = value;\n      return resolvedObject;\n    }, Object.create(null));\n  });\n}"]},"metadata":{},"sourceType":"module"}