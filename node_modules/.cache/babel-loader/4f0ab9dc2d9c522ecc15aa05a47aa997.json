{"ast":null,"code":"var AWS = require('../core'),\n    url = AWS.util.url,\n    crypto = AWS.util.crypto.lib,\n    base64Encode = AWS.util.base64.encode,\n    inherit = AWS.util.inherit;\n\nvar queryEncode = function queryEncode(string) {\n  var replacements = {\n    '+': '-',\n    '=': '_',\n    '/': '~'\n  };\n  return string.replace(/[\\+=\\/]/g, function (match) {\n    return replacements[match];\n  });\n};\n\nvar signPolicy = function signPolicy(policy, privateKey) {\n  var sign = crypto.createSign('RSA-SHA1');\n  sign.write(policy);\n  return queryEncode(sign.sign(privateKey, 'base64'));\n};\n\nvar signWithCannedPolicy = function signWithCannedPolicy(url, expires, keyPairId, privateKey) {\n  var policy = JSON.stringify({\n    Statement: [{\n      Resource: url,\n      Condition: {\n        DateLessThan: {\n          'AWS:EpochTime': expires\n        }\n      }\n    }]\n  });\n  return {\n    Expires: expires,\n    'Key-Pair-Id': keyPairId,\n    Signature: signPolicy(policy.toString(), privateKey)\n  };\n};\n\nvar signWithCustomPolicy = function signWithCustomPolicy(policy, keyPairId, privateKey) {\n  policy = policy.replace(/\\s/mg, '');\n  return {\n    Policy: queryEncode(base64Encode(policy)),\n    'Key-Pair-Id': keyPairId,\n    Signature: signPolicy(policy, privateKey)\n  };\n};\n\nvar determineScheme = function determineScheme(url) {\n  var parts = url.split('://');\n\n  if (parts.length < 2) {\n    throw new Error('Invalid URL.');\n  }\n\n  return parts[0].replace('*', '');\n};\n\nvar getRtmpUrl = function getRtmpUrl(rtmpUrl) {\n  var parsed = url.parse(rtmpUrl);\n  return parsed.path.replace(/^\\//, '') + (parsed.hash || '');\n};\n\nvar getResource = function getResource(url) {\n  switch (determineScheme(url)) {\n    case 'http':\n    case 'https':\n      return url;\n\n    case 'rtmp':\n      return getRtmpUrl(url);\n\n    default:\n      throw new Error('Invalid URI scheme. Scheme must be one of' + ' http, https, or rtmp');\n  }\n};\n\nvar handleError = function handleError(err, callback) {\n  if (!callback || typeof callback !== 'function') {\n    throw err;\n  }\n\n  callback(err);\n};\n\nvar handleSuccess = function handleSuccess(result, callback) {\n  if (!callback || typeof callback !== 'function') {\n    return result;\n  }\n\n  callback(null, result);\n};\n\nAWS.CloudFront.Signer = inherit({\n  /**\n   * A signer object can be used to generate signed URLs and cookies for granting\n   * access to content on restricted CloudFront distributions.\n   *\n   * @see http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\n   *\n   * @param keyPairId [String]    (Required) The ID of the CloudFront key pair\n   *                              being used.\n   * @param privateKey [String]   (Required) A private key in RSA format.\n   */\n  constructor: function Signer(keyPairId, privateKey) {\n    if (keyPairId === void 0 || privateKey === void 0) {\n      throw new Error('A key pair ID and private key are required');\n    }\n\n    this.keyPairId = keyPairId;\n    this.privateKey = privateKey;\n  },\n\n  /**\n   * Create a signed Amazon CloudFront Cookie.\n   *\n   * @param options [Object]            The options to create a signed cookie.\n   * @option options url [String]     The URL to which the signature will grant\n   *                                  access. Required unless you pass in a full\n   *                                  policy.\n   * @option options expires [Number] A Unix UTC timestamp indicating when the\n   *                                  signature should expire. Required unless you\n   *                                  pass in a full policy.\n   * @option options policy [String]  A CloudFront JSON policy. Required unless\n   *                                  you pass in a url and an expiry time.\n   *\n   * @param cb [Function] if a callback is provided, this function will\n   *   pass the hash as the second parameter (after the error parameter) to\n   *   the callback function.\n   *\n   * @return [Object] if called synchronously (with no callback), returns the\n   *   signed cookie parameters.\n   * @return [null] nothing is returned if a callback is provided.\n   */\n  getSignedCookie: function getSignedCookie(options, cb) {\n    var signatureHash = 'policy' in options ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey) : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);\n    var cookieHash = {};\n\n    for (var key in signatureHash) {\n      if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {\n        cookieHash['CloudFront-' + key] = signatureHash[key];\n      }\n    }\n\n    return handleSuccess(cookieHash, cb);\n  },\n\n  /**\n   * Create a signed Amazon CloudFront URL.\n   *\n   * Keep in mind that URLs meant for use in media/flash players may have\n   * different requirements for URL formats (e.g. some require that the\n   * extension be removed, some require the file name to be prefixed\n   * - mp4:<path>, some require you to add \"/cfx/st\" into your URL).\n   *\n   * @param options [Object]          The options to create a signed URL.\n   * @option options url [String]     The URL to which the signature will grant\n   *                                  access. Any query params included with\n   *                                  the URL should be encoded. Required.\n   * @option options expires [Number] A Unix UTC timestamp indicating when the\n   *                                  signature should expire. Required unless you\n   *                                  pass in a full policy.\n   * @option options policy [String]  A CloudFront JSON policy. Required unless\n   *                                  you pass in a url and an expiry time.\n   *\n   * @param cb [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   *\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   */\n  getSignedUrl: function getSignedUrl(options, cb) {\n    try {\n      var resource = getResource(options.url);\n    } catch (err) {\n      return handleError(err, cb);\n    }\n\n    var parsedUrl = url.parse(options.url, true),\n        signatureHash = Object.prototype.hasOwnProperty.call(options, 'policy') ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey) : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);\n    parsedUrl.search = null;\n\n    for (var key in signatureHash) {\n      if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {\n        parsedUrl.query[key] = signatureHash[key];\n      }\n    }\n\n    try {\n      var signedUrl = determineScheme(options.url) === 'rtmp' ? getRtmpUrl(url.format(parsedUrl)) : url.format(parsedUrl);\n    } catch (err) {\n      return handleError(err, cb);\n    }\n\n    return handleSuccess(signedUrl, cb);\n  }\n});\n/**\n * @api private\n */\n\nmodule.exports = AWS.CloudFront.Signer;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/cloudfront/signer.js"],"names":["AWS","require","url","util","crypto","lib","base64Encode","base64","encode","inherit","queryEncode","string","replacements","replace","match","signPolicy","policy","privateKey","sign","createSign","write","signWithCannedPolicy","expires","keyPairId","JSON","stringify","Statement","Resource","Condition","DateLessThan","Expires","Signature","toString","signWithCustomPolicy","Policy","determineScheme","parts","split","length","Error","getRtmpUrl","rtmpUrl","parsed","parse","path","hash","getResource","handleError","err","callback","handleSuccess","result","CloudFront","Signer","constructor","getSignedCookie","options","cb","signatureHash","cookieHash","key","Object","prototype","hasOwnProperty","call","getSignedUrl","resource","parsedUrl","search","query","signedUrl","format","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core'),\n    url = AWS.util.url,\n    crypto = AWS.util.crypto.lib,\n    base64Encode = AWS.util.base64.encode,\n    inherit = AWS.util.inherit;\n\nvar queryEncode = function (string) {\n    var replacements = {\n        '+': '-',\n        '=': '_',\n        '/': '~'\n    };\n    return string.replace(/[\\+=\\/]/g, function (match) {\n        return replacements[match];\n    });\n};\n\nvar signPolicy = function (policy, privateKey) {\n    var sign = crypto.createSign('RSA-SHA1');\n    sign.write(policy);\n    return queryEncode(sign.sign(privateKey, 'base64'));\n};\n\nvar signWithCannedPolicy = function (url, expires, keyPairId, privateKey) {\n    var policy = JSON.stringify({\n        Statement: [\n            {\n                Resource: url,\n                Condition: { DateLessThan: { 'AWS:EpochTime': expires } }\n            }\n        ]\n    });\n\n    return {\n        Expires: expires,\n        'Key-Pair-Id': keyPairId,\n        Signature: signPolicy(policy.toString(), privateKey)\n    };\n};\n\nvar signWithCustomPolicy = function (policy, keyPairId, privateKey) {\n    policy = policy.replace(/\\s/mg, '');\n\n    return {\n        Policy: queryEncode(base64Encode(policy)),\n        'Key-Pair-Id': keyPairId,\n        Signature: signPolicy(policy, privateKey)\n    };\n};\n\nvar determineScheme = function (url) {\n    var parts = url.split('://');\n    if (parts.length < 2) {\n        throw new Error('Invalid URL.');\n    }\n\n    return parts[0].replace('*', '');\n};\n\nvar getRtmpUrl = function (rtmpUrl) {\n    var parsed = url.parse(rtmpUrl);\n    return parsed.path.replace(/^\\//, '') + (parsed.hash || '');\n};\n\nvar getResource = function (url) {\n    switch (determineScheme(url)) {\n        case 'http':\n        case 'https':\n            return url;\n        case 'rtmp':\n            return getRtmpUrl(url);\n        default:\n            throw new Error('Invalid URI scheme. Scheme must be one of'\n                + ' http, https, or rtmp');\n    }\n};\n\nvar handleError = function (err, callback) {\n    if (!callback || typeof callback !== 'function') {\n        throw err;\n    }\n\n    callback(err);\n};\n\nvar handleSuccess = function (result, callback) {\n    if (!callback || typeof callback !== 'function') {\n        return result;\n    }\n\n    callback(null, result);\n};\n\nAWS.CloudFront.Signer = inherit({\n    /**\n     * A signer object can be used to generate signed URLs and cookies for granting\n     * access to content on restricted CloudFront distributions.\n     *\n     * @see http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PrivateContent.html\n     *\n     * @param keyPairId [String]    (Required) The ID of the CloudFront key pair\n     *                              being used.\n     * @param privateKey [String]   (Required) A private key in RSA format.\n     */\n    constructor: function Signer(keyPairId, privateKey) {\n        if (keyPairId === void 0 || privateKey === void 0) {\n            throw new Error('A key pair ID and private key are required');\n        }\n\n        this.keyPairId = keyPairId;\n        this.privateKey = privateKey;\n    },\n\n    /**\n     * Create a signed Amazon CloudFront Cookie.\n     *\n     * @param options [Object]            The options to create a signed cookie.\n     * @option options url [String]     The URL to which the signature will grant\n     *                                  access. Required unless you pass in a full\n     *                                  policy.\n     * @option options expires [Number] A Unix UTC timestamp indicating when the\n     *                                  signature should expire. Required unless you\n     *                                  pass in a full policy.\n     * @option options policy [String]  A CloudFront JSON policy. Required unless\n     *                                  you pass in a url and an expiry time.\n     *\n     * @param cb [Function] if a callback is provided, this function will\n     *   pass the hash as the second parameter (after the error parameter) to\n     *   the callback function.\n     *\n     * @return [Object] if called synchronously (with no callback), returns the\n     *   signed cookie parameters.\n     * @return [null] nothing is returned if a callback is provided.\n     */\n    getSignedCookie: function (options, cb) {\n        var signatureHash = 'policy' in options\n            ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)\n            : signWithCannedPolicy(options.url, options.expires, this.keyPairId, this.privateKey);\n\n        var cookieHash = {};\n        for (var key in signatureHash) {\n            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {\n                cookieHash['CloudFront-' + key] = signatureHash[key];\n            }\n        }\n\n        return handleSuccess(cookieHash, cb);\n    },\n\n    /**\n     * Create a signed Amazon CloudFront URL.\n     *\n     * Keep in mind that URLs meant for use in media/flash players may have\n     * different requirements for URL formats (e.g. some require that the\n     * extension be removed, some require the file name to be prefixed\n     * - mp4:<path>, some require you to add \"/cfx/st\" into your URL).\n     *\n     * @param options [Object]          The options to create a signed URL.\n     * @option options url [String]     The URL to which the signature will grant\n     *                                  access. Any query params included with\n     *                                  the URL should be encoded. Required.\n     * @option options expires [Number] A Unix UTC timestamp indicating when the\n     *                                  signature should expire. Required unless you\n     *                                  pass in a full policy.\n     * @option options policy [String]  A CloudFront JSON policy. Required unless\n     *                                  you pass in a url and an expiry time.\n     *\n     * @param cb [Function] if a callback is provided, this function will\n     *   pass the URL as the second parameter (after the error parameter) to\n     *   the callback function.\n     *\n     * @return [String] if called synchronously (with no callback), returns the\n     *   signed URL.\n     * @return [null] nothing is returned if a callback is provided.\n     */\n    getSignedUrl: function (options, cb) {\n        try {\n            var resource = getResource(options.url);\n        } catch (err) {\n            return handleError(err, cb);\n        }\n\n        var parsedUrl = url.parse(options.url, true),\n            signatureHash = Object.prototype.hasOwnProperty.call(options, 'policy')\n                ? signWithCustomPolicy(options.policy, this.keyPairId, this.privateKey)\n                : signWithCannedPolicy(resource, options.expires, this.keyPairId, this.privateKey);\n\n        parsedUrl.search = null;\n        for (var key in signatureHash) {\n            if (Object.prototype.hasOwnProperty.call(signatureHash, key)) {\n                parsedUrl.query[key] = signatureHash[key];\n            }\n        }\n\n        try {\n            var signedUrl = determineScheme(options.url) === 'rtmp'\n                    ? getRtmpUrl(url.format(parsedUrl))\n                    : url.format(parsedUrl);\n        } catch (err) {\n            return handleError(err, cb);\n        }\n\n        return handleSuccess(signedUrl, cb);\n    }\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.CloudFront.Signer;\n"]},"metadata":{},"sourceType":"script"}