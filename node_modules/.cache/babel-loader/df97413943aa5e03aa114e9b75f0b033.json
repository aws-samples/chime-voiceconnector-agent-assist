{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport * as Observable from 'zen-observable';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { CONTROL_MSG } from '@aws-amplify/pubsub';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchApiEvent = function dispatchApiEvent(event, data, message) {\n  Hub.dispatch('api', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar MAX_DELAY_MS = 5000;\nvar NON_RETRYABLE_CODES = [400, 401, 403];\nvar MESSAGE_TYPES;\n\n(function (MESSAGE_TYPES) {\n  /**\n   * Client -> Server message.\n   * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n   */\n  MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n  /**\n   * Server -> Client message\n   * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n  /**\n   * Client -> Server message.\n   * This message type is for register subscriptions with AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n   */\n\n  MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n  /**\n   * Server -> Client message.\n   * This message type is for subscription message from AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n  /**\n   * Server -> Client message.\n   * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n  /**\n   * Client -> Server message.\n   * This message type is for unregister subscriptions with AWS AppSync RealTime\n   */\n\n  MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n  /**\n   * Server -> Client message.\n   * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n   */\n\n  MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n  /**\n   * Server -> Client message.\n   * This message type is for sending error messages from AWS AppSync RealTime to the client\n   */\n\n  MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\n\nvar SUBSCRIPTION_STATUS;\n\n(function (SUBSCRIPTION_STATUS) {\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n  SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\n\nvar SOCKET_STATUS;\n\n(function (SOCKET_STATUS) {\n  SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n  SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n  SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\n\nvar AWS_APPSYNC_REALTIME_HEADERS = {\n  accept: 'application/json, text/javascript',\n  'content-encoding': 'amz-1.0',\n  'content-type': 'application/json; charset=UTF-8'\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\n\nvar CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\n\nvar START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\n\nvar DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n\nvar AWSAppSyncRealTimeProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSAppSyncRealTimeProvider, _super);\n\n  function AWSAppSyncRealTimeProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.socketStatus = SOCKET_STATUS.CLOSED;\n    _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n    _this.subscriptionObserverMap = new Map();\n    _this.promiseArray = [];\n    return _this;\n  }\n\n  AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncRealTimeProvider';\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n    throw new Error('Not used here');\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint;\n    return new Observable(function (observer) {\n      if (!appSyncGraphqlEndpoint) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\"))]\n        });\n        observer.complete();\n      } else {\n        var subscriptionId_1 = uuid();\n\n        _this._startSubscriptionWithAWSAppSyncRealTime({\n          options: options,\n          observer: observer,\n          subscriptionId: subscriptionId_1\n        });\n\n        return function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var subscriptionState, err_1;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2, 3, 4]); // Waiting that subscription has been connected before trying to unsubscribe\n\n\n                  return [4\n                  /*yield*/\n                  , this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n\n                case 1:\n                  // Waiting that subscription has been connected before trying to unsubscribe\n                  _a.sent();\n\n                  subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n\n                  if (!subscriptionState) {\n                    // subscription already unsubscribed\n                    return [2\n                    /*return*/\n                    ];\n                  }\n\n                  if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                  } else {\n                    throw new Error('Subscription never connected');\n                  }\n\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 2:\n                  err_1 = _a.sent();\n                  logger.debug(\"Error while unsubscribing \" + err_1);\n                  return [3\n                  /*break*/\n                  , 4];\n\n                case 3:\n                  this._removeSubscriptionObserver(subscriptionId_1);\n\n                  return [7\n                  /*endfinally*/\n                  ];\n\n                case 4:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        };\n      }\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n    var options = _a.options,\n        observer = _a.observer,\n        subscriptionId = _a.subscriptionId;\n    return __awaiter(this, void 0, void 0, function () {\n      var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _b, graphql_headers, subscriptionState, data, dataString, headerObj, _c, _d, subscriptionMessage, stringToAWSRealTime, err_2, _e, message, subscriptionFailedCallback_1, _f, subscriptionFailedCallback, subscriptionReadyCallback;\n\n      var _g;\n\n      var _this = this;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _b = options.graphql_headers, graphql_headers = _b === void 0 ? function () {\n              return {};\n            } : _b;\n            subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n            data = {\n              query: query,\n              variables: variables\n            }; // Having a subscription id map will make it simple to forward messages received\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              query: query,\n              variables: variables,\n              subscriptionState: subscriptionState,\n              startAckTimeoutId: null\n            });\n            dataString = JSON.stringify(data);\n            _c = [{}];\n            return [4\n            /*yield*/\n            , this._awsRealTimeHeaderBasedAuth({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              payload: dataString,\n              canonicalUri: '',\n              region: region\n            })];\n\n          case 1:\n            _d = [__assign.apply(void 0, _c.concat([_h.sent()]))];\n            return [4\n            /*yield*/\n            , graphql_headers()];\n\n          case 2:\n            headerObj = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([_h.sent()])), (_g = {}, _g[USER_AGENT_HEADER] = Constants.userAgent, _g)]);\n            subscriptionMessage = {\n              id: subscriptionId,\n              payload: {\n                data: dataString,\n                extensions: {\n                  authorization: __assign({}, headerObj)\n                }\n              },\n              type: MESSAGE_TYPES.GQL_START\n            };\n            stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n            _h.label = 3;\n\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this._initializeWebSocketConnection({\n              apiKey: apiKey,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              authenticationType: authenticationType,\n              region: region\n            })];\n\n          case 4:\n            _h.sent();\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            err_2 = _h.sent();\n            logger.debug({\n              err: err_2\n            });\n            _e = err_2.message, message = _e === void 0 ? '' : _e;\n            observer.error({\n              errors: [__assign({}, new GraphQLError(\"Connection failed: \" + message))]\n            });\n            observer.complete();\n            subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback; // Notify concurrent unsubscription\n\n            if (typeof subscriptionFailedCallback_1 === 'function') {\n              subscriptionFailedCallback_1();\n            }\n\n            return [2\n            /*return*/\n            ];\n\n          case 6:\n            _f = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _f.subscriptionFailedCallback, subscriptionReadyCallback = _f.subscriptionReadyCallback; // This must be done before sending the message in order to be listening immediately\n\n            this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: subscriptionReadyCallback,\n              subscriptionFailedCallback: subscriptionFailedCallback,\n              startAckTimeoutId: setTimeout(function () {\n                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n              }, START_ACK_TIMEOUT)\n            });\n            this.awsRealTimeSocket.send(stringToAWSRealTime);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Waiting that subscription has been connected before trying to unsubscribe\n\n\n  AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var subscriptionState;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        subscriptionState = this.subscriptionObserverMap.get(subscriptionId).subscriptionState; // This in case unsubscribe is invoked before sending start subscription message\n\n        if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n          return [2\n          /*return*/\n          , new Promise(function (res, rej) {\n            var _a = _this.subscriptionObserverMap.get(subscriptionId),\n                observer = _a.observer,\n                subscriptionState = _a.subscriptionState,\n                variables = _a.variables,\n                query = _a.query;\n\n            _this.subscriptionObserverMap.set(subscriptionId, {\n              observer: observer,\n              subscriptionState: subscriptionState,\n              variables: variables,\n              query: query,\n              subscriptionReadyCallback: res,\n              subscriptionFailedCallback: rej\n            });\n          })];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n    try {\n      if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN && this.socketStatus === SOCKET_STATUS.READY) {\n        // Preparing unsubscribe message to stop receiving messages for that subscription\n        var unsubscribeMessage = {\n          id: subscriptionId,\n          type: MESSAGE_TYPES.GQL_STOP\n        };\n        var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n        this.awsRealTimeSocket.send(stringToAWSRealTime);\n      }\n    } catch (err) {\n      // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n      logger.debug({\n        err: err\n      });\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n    this.subscriptionObserverMap.delete(subscriptionId); // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n\n    setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n    if (this.subscriptionObserverMap.size > 0) {\n      // Active subscriptions on the WebSocket\n      return;\n    }\n\n    if (!this.awsRealTimeSocket) {\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n      return;\n    }\n\n    if (this.awsRealTimeSocket.bufferedAmount > 0) {\n      // Still data on the WebSocket\n      setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    } else {\n      logger.debug('closing WebSocket...');\n      clearTimeout(this.keepAliveTimeoutId);\n      var tempSocket = this.awsRealTimeSocket; // Cleaning callbacks to avoid race condition, socket still exists\n\n      tempSocket.onclose = undefined;\n      tempSocket.onerror = undefined;\n      tempSocket.close(1000);\n      this.awsRealTimeSocket = null;\n      this.socketStatus = SOCKET_STATUS.CLOSED;\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n    logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n\n    var _a = JSON.parse(message.data),\n        _b = _a.id,\n        id = _b === void 0 ? '' : _b,\n        payload = _a.payload,\n        type = _a.type;\n\n    var _c = this.subscriptionObserverMap.get(id) || {},\n        _d = _c.observer,\n        observer = _d === void 0 ? null : _d,\n        _e = _c.query,\n        query = _e === void 0 ? '' : _e,\n        _f = _c.variables,\n        variables = _f === void 0 ? {} : _f,\n        startAckTimeoutId = _c.startAckTimeoutId,\n        subscriptionReadyCallback = _c.subscriptionReadyCallback,\n        subscriptionFailedCallback = _c.subscriptionFailedCallback;\n\n    logger.debug({\n      id: id,\n      observer: observer,\n      query: query,\n      variables: variables\n    });\n\n    if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n      if (observer) {\n        observer.next(payload);\n      } else {\n        logger.debug(\"observer not found for id: \" + id);\n      }\n\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_START_ACK) {\n      logger.debug(\"subscription ready for \" + JSON.stringify({\n        query: query,\n        variables: variables\n      }));\n\n      if (typeof subscriptionReadyCallback === 'function') {\n        subscriptionReadyCallback();\n      }\n\n      clearTimeout(startAckTimeoutId);\n      dispatchApiEvent('connected', {\n        query: query,\n        variables: variables\n      }, 'Connection established for subscription');\n      var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: null,\n        subscriptionState: subscriptionState,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback\n      }); // TODO: emit event on hub but it requires to store the id first\n\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n      clearTimeout(this.keepAliveTimeoutId);\n      this.keepAliveTimeoutId = setTimeout(this._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.GQL_ERROR) {\n      var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n      this.subscriptionObserverMap.set(id, {\n        observer: observer,\n        query: query,\n        variables: variables,\n        startAckTimeoutId: startAckTimeoutId,\n        subscriptionReadyCallback: subscriptionReadyCallback,\n        subscriptionFailedCallback: subscriptionFailedCallback,\n        subscriptionState: subscriptionState\n      });\n      observer.error({\n        errors: [__assign({}, new GraphQLError(\"Connection failed: \" + JSON.stringify(payload)))]\n      });\n      clearTimeout(startAckTimeoutId);\n      observer.complete();\n\n      if (typeof subscriptionFailedCallback === 'function') {\n        subscriptionFailedCallback();\n      }\n    }\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n    logger.debug(\"Disconnect error: \" + msg);\n    this.subscriptionObserverMap.forEach(function (_a) {\n      var observer = _a.observer;\n\n      if (!observer.closed) {\n        observer.error({\n          errors: [__assign({}, new GraphQLError(msg))]\n        });\n      }\n    });\n    this.subscriptionObserverMap.clear();\n\n    if (this.awsRealTimeSocket) {\n      this.awsRealTimeSocket.close();\n    }\n\n    this.socketStatus = SOCKET_STATUS.CLOSED;\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n    var _a = this.subscriptionObserverMap.get(subscriptionId) || {},\n        observer = _a.observer,\n        query = _a.query,\n        variables = _a.variables;\n\n    if (!observer) {\n      return;\n    }\n\n    this.subscriptionObserverMap.set(subscriptionId, {\n      observer: observer,\n      query: query,\n      variables: variables,\n      subscriptionState: SUBSCRIPTION_STATUS.FAILED\n    });\n\n    if (observer && !observer.closed) {\n      observer.error({\n        errors: [__assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({\n          query: query,\n          variables: variables\n        })))]\n      }); // Cleanup will be automatically executed\n\n      observer.complete();\n    }\n\n    logger.debug('timeoutStartSubscription', JSON.stringify({\n      query: query,\n      variables: variables\n    }));\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n    var _this = this;\n\n    var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        authenticationType = _a.authenticationType,\n        apiKey = _a.apiKey,\n        region = _a.region;\n\n    if (this.socketStatus === SOCKET_STATUS.READY) {\n      return;\n    }\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var discoverableEndpoint, payloadString, headerString, _a, _b, headerQs, payloadQs, awsRealTimeUrl, err_3;\n\n        return __generator(this, function (_c) {\n          switch (_c.label) {\n            case 0:\n              this.promiseArray.push({\n                res: res,\n                rej: rej\n              });\n              if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3\n              /*break*/\n              , 5];\n              _c.label = 1;\n\n            case 1:\n              _c.trys.push([1, 4,, 5]);\n\n              this.socketStatus = SOCKET_STATUS.CONNECTING;\n              discoverableEndpoint = appSyncGraphqlEndpoint.replace('https://', 'wss://').replace('appsync-api', 'appsync-realtime-api').replace('gogi-beta', 'grt-beta');\n              payloadString = '{}';\n              _b = (_a = JSON).stringify;\n              return [4\n              /*yield*/\n              , this._awsRealTimeHeaderBasedAuth({\n                authenticationType: authenticationType,\n                payload: payloadString,\n                canonicalUri: '/connect',\n                apiKey: apiKey,\n                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                region: region\n              })];\n\n            case 2:\n              headerString = _b.apply(_a, [_c.sent()]);\n              headerQs = Buffer.from(headerString).toString('base64');\n              payloadQs = Buffer.from(payloadString).toString('base64');\n              awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n              return [4\n              /*yield*/\n              , this._initializeRetryableHandshake({\n                awsRealTimeUrl: awsRealTimeUrl\n              })];\n\n            case 3:\n              _c.sent();\n\n              this.promiseArray.forEach(function (_a) {\n                var res = _a.res;\n                logger.debug('Notifying connection successful');\n                res();\n              });\n              this.socketStatus = SOCKET_STATUS.READY;\n              this.promiseArray = [];\n              return [3\n              /*break*/\n              , 5];\n\n            case 4:\n              err_3 = _c.sent();\n              this.promiseArray.forEach(function (_a) {\n                var rej = _a.rej;\n                return rej(err_3);\n              });\n              this.promiseArray = [];\n\n              if (this.awsRealTimeSocket && this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                this.awsRealTimeSocket.close(3001);\n              }\n\n              this.awsRealTimeSocket = null;\n              this.socketStatus = SOCKET_STATUS.CLOSED;\n              return [3\n              /*break*/\n              , 5];\n\n            case 5:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializaling retryable Handshake\");\n            return [4\n            /*yield*/\n            , jitteredExponentialRetry(this._initializeHandshake.bind(this), [{\n              awsRealTimeUrl: awsRealTimeUrl\n            }], MAX_DELAY_MS)];\n\n          case 1:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (_a) {\n    var awsRealTimeUrl = _a.awsRealTimeUrl;\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4, errorType, errorCode;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                var newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');\n\n                newSocket.onerror = function () {\n                  logger.debug(\"WebSocket connection error\");\n                };\n\n                newSocket.onclose = function () {\n                  rej(new Error('Connection handshake error'));\n                };\n\n                newSocket.onopen = function () {\n                  _this.awsRealTimeSocket = newSocket;\n                  return res();\n                };\n              });\n            }()];\n\n          case 2:\n            _b.sent(); // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n\n\n            return [4\n            /*yield*/\n            , function () {\n              return new Promise(function (res, rej) {\n                var ackOk = false;\n\n                _this.awsRealTimeSocket.onerror = function (error) {\n                  logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                };\n\n                _this.awsRealTimeSocket.onclose = function (event) {\n                  logger.debug(\"WebSocket closed \" + event.reason);\n                  rej(new Error(JSON.stringify(event)));\n                };\n\n                _this.awsRealTimeSocket.onmessage = function (message) {\n                  logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                  var data = JSON.parse(message.data);\n                  var type = data.type,\n                      _a = data.payload,\n                      _b = (_a === void 0 ? {} : _a).connectionTimeoutMs,\n                      connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                    ackOk = true;\n                    _this.keepAliveTimeout = connectionTimeoutMs;\n                    _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n\n                    _this.awsRealTimeSocket.onerror = function (err) {\n                      logger.debug(err);\n\n                      _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                    };\n\n                    res('Cool, connected to AWS AppSyncRealTime');\n                    return;\n                  }\n\n                  if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                    var _c = data.payload,\n                        _d = (_c === void 0 ? {} : _c).errors,\n                        _e = (_d === void 0 ? [] : _d)[0],\n                        _f = _e === void 0 ? {} : _e,\n                        _g = _f.errorType,\n                        errorType = _g === void 0 ? '' : _g,\n                        _h = _f.errorCode,\n                        errorCode = _h === void 0 ? 0 : _h;\n\n                    rej({\n                      errorType: errorType,\n                      errorCode: errorCode\n                    });\n                  }\n                };\n\n                var gqlInit = {\n                  type: MESSAGE_TYPES.GQL_CONNECTION_INIT\n                };\n\n                _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n\n                function checkAckOk() {\n                  if (!ackOk) {\n                    rej(new Error(\"Connection timeout: ack from AWSRealTime was not received on \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                  }\n                }\n\n                setTimeout(checkAckOk.bind(_this), CONNECTION_INIT_TIMEOUT);\n              });\n            }()];\n\n          case 3:\n            // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_4 = _b.sent();\n            errorType = err_4.errorType, errorCode = err_4.errorCode;\n\n            if (NON_RETRYABLE_CODES.includes(errorCode)) {\n              throw new NonRetryableError(errorType);\n            } else if (errorType) {\n              throw new Error(errorType);\n            } else {\n              throw err_4;\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n    var authenticationType = _a.authenticationType,\n        payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        apiKey = _a.apiKey,\n        region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var headerHandler, handler, host, result;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            headerHandler = {\n              API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n              AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n              OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n              AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this)\n            };\n            handler = headerHandler[authenticationType];\n\n            if (typeof handler !== 'function') {\n              logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n              return [2\n              /*return*/\n              , ''];\n            }\n\n            host = url.parse(appSyncGraphqlEndpoint).host;\n            return [4\n            /*yield*/\n            , handler({\n              payload: payload,\n              canonicalUri: canonicalUri,\n              appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n              apiKey: apiKey,\n              region: region,\n              host: host\n            })];\n\n          case 1:\n            result = _b.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var session;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Auth.currentSession()];\n\n          case 1:\n            session = _b.sent();\n            return [2\n            /*return*/\n            , {\n              Authorization: session.getAccessToken().getJwtToken(),\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n    var host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var federatedInfo;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem('federatedInfo')];\n\n          case 1:\n            federatedInfo = _b.sent();\n\n            if (!federatedInfo || !federatedInfo.token) {\n              throw new Error('No federated jwt');\n            }\n\n            return [2\n            /*return*/\n            , {\n              Authorization: federatedInfo.token,\n              host: host\n            }];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n    var apiKey = _a.apiKey,\n        host = _a.host;\n    return __awaiter(this, void 0, void 0, function () {\n      var dt, dtStr;\n      return __generator(this, function (_b) {\n        dt = new Date();\n        dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n        return [2\n        /*return*/\n        , {\n          host: host,\n          'x-amz-date': dtStr,\n          'x-api-key': apiKey\n        }];\n      });\n    });\n  };\n\n  AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n    var payload = _a.payload,\n        canonicalUri = _a.canonicalUri,\n        appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint,\n        region = _a.region;\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointInfo, credentialsOK, creds, request, signed_params;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            endpointInfo = {\n              region: region,\n              service: 'appsync'\n            };\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _b.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get().then(function (credentials) {\n              return {\n                secret_key: credentials.secretAccessKey,\n                access_key: credentials.accessKeyId,\n                session_token: credentials.sessionToken\n              };\n            })];\n\n          case 2:\n            creds = _b.sent();\n            request = {\n              url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n              data: payload,\n              method: 'POST',\n              headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS)\n            };\n            signed_params = Signer.sign(request, creds, endpointInfo);\n            return [2\n            /*return*/\n            , signed_params.headers];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n\n  return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider);\n\nexport { AWSAppSyncRealTimeProvider };","map":{"version":3,"sources":["../../src/Providers/AWSAppSyncRealTimeProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport * as Observable from 'zen-observable';\nimport { GraphQLError } from 'graphql';\nimport * as url from 'url';\nimport { v4 as uuid } from 'uuid';\nimport { Buffer } from 'buffer';\nimport { Logger, Credentials, Signer, Hub, Constants, USER_AGENT_HEADER, jitteredExponentialRetry, NonRetryableError, } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nimport Auth from '@aws-amplify/auth';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { CONTROL_MSG } from '@aws-amplify/pubsub';\nvar logger = new Logger('AWSAppSyncRealTimeProvider');\nvar AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\n    typeof Symbol.for === 'function'\n    ? Symbol.for('amplify_default')\n    : '@@amplify_default');\nvar dispatchApiEvent = function (event, data, message) {\n    Hub.dispatch('api', { event: event, data: data, message: message }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar MAX_DELAY_MS = 5000;\nvar NON_RETRYABLE_CODES = [400, 401, 403];\nvar MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n    /**\n     * Client -> Server message.\n     * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n    /**\n     * Server -> Client message\n     * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n    /**\n     * Client -> Server message.\n     * This message type is for register subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n     */\n    MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n    /**\n     * Server -> Client message.\n     * This message type is for subscription message from AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n    /**\n     * Server -> Client message.\n     * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n    /**\n     * Client -> Server message.\n     * This message type is for unregister subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n     */\n    MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n    /**\n     * Server -> Client message.\n     * This message type is for sending error messages from AWS AppSync RealTime to the client\n     */\n    MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nvar SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nvar SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n    SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n    SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n    SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nvar AWS_APPSYNC_REALTIME_HEADERS = {\n    accept: 'application/json, text/javascript',\n    'content-encoding': 'amz-1.0',\n    'content-type': 'application/json; charset=UTF-8',\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nvar CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nvar START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nvar DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\nvar AWSAppSyncRealTimeProvider = /** @class */ (function (_super) {\n    __extends(AWSAppSyncRealTimeProvider, _super);\n    function AWSAppSyncRealTimeProvider() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.socketStatus = SOCKET_STATUS.CLOSED;\n        _this.keepAliveTimeout = DEFAULT_KEEP_ALIVE_TIMEOUT;\n        _this.subscriptionObserverMap = new Map();\n        _this.promiseArray = [];\n        return _this;\n    }\n    AWSAppSyncRealTimeProvider.prototype.getProviderName = function () {\n        return 'AWSAppSyncRealTimeProvider';\n    };\n    AWSAppSyncRealTimeProvider.prototype.newClient = function () {\n        throw new Error('Not used here');\n    };\n    AWSAppSyncRealTimeProvider.prototype.publish = function (_topics, _msg, _options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Operation not supported');\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype.subscribe = function (_topics, options) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint;\n        return new Observable(function (observer) {\n            if (!appSyncGraphqlEndpoint) {\n                observer.error({\n                    errors: [\n                        __assign({}, new GraphQLError(\"Subscribe only available for AWS AppSync endpoint\")),\n                    ],\n                });\n                observer.complete();\n            }\n            else {\n                var subscriptionId_1 = uuid();\n                _this._startSubscriptionWithAWSAppSyncRealTime({\n                    options: options,\n                    observer: observer,\n                    subscriptionId: subscriptionId_1,\n                });\n                return function () { return __awaiter(_this, void 0, void 0, function () {\n                    var subscriptionState, err_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, 3, 4]);\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                return [4 /*yield*/, this._waitForSubscriptionToBeConnected(subscriptionId_1)];\n                            case 1:\n                                // Waiting that subscription has been connected before trying to unsubscribe\n                                _a.sent();\n                                subscriptionState = (this.subscriptionObserverMap.get(subscriptionId_1) || {}).subscriptionState;\n                                if (!subscriptionState) {\n                                    // subscription already unsubscribed\n                                    return [2 /*return*/];\n                                }\n                                if (subscriptionState === SUBSCRIPTION_STATUS.CONNECTED) {\n                                    this._sendUnsubscriptionMessage(subscriptionId_1);\n                                }\n                                else {\n                                    throw new Error('Subscription never connected');\n                                }\n                                return [3 /*break*/, 4];\n                            case 2:\n                                err_1 = _a.sent();\n                                logger.debug(\"Error while unsubscribing \" + err_1);\n                                return [3 /*break*/, 4];\n                            case 3:\n                                this._removeSubscriptionObserver(subscriptionId_1);\n                                return [7 /*endfinally*/];\n                            case 4: return [2 /*return*/];\n                        }\n                    });\n                }); };\n            }\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._startSubscriptionWithAWSAppSyncRealTime = function (_a) {\n        var options = _a.options, observer = _a.observer, subscriptionId = _a.subscriptionId;\n        return __awaiter(this, void 0, void 0, function () {\n            var appSyncGraphqlEndpoint, authenticationType, query, variables, apiKey, region, _b, graphql_headers, subscriptionState, data, dataString, headerObj, _c, _d, subscriptionMessage, stringToAWSRealTime, err_2, _e, message, subscriptionFailedCallback_1, _f, subscriptionFailedCallback, subscriptionReadyCallback;\n            var _g;\n            var _this = this;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        appSyncGraphqlEndpoint = options.appSyncGraphqlEndpoint, authenticationType = options.authenticationType, query = options.query, variables = options.variables, apiKey = options.apiKey, region = options.region, _b = options.graphql_headers, graphql_headers = _b === void 0 ? function () { return ({}); } : _b;\n                        subscriptionState = SUBSCRIPTION_STATUS.PENDING;\n                        data = {\n                            query: query,\n                            variables: variables,\n                        };\n                        // Having a subscription id map will make it simple to forward messages received\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            query: query,\n                            variables: variables,\n                            subscriptionState: subscriptionState,\n                            startAckTimeoutId: null,\n                        });\n                        dataString = JSON.stringify(data);\n                        _c = [{}];\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                payload: dataString,\n                                canonicalUri: '',\n                                region: region,\n                            })];\n                    case 1:\n                        _d = [__assign.apply(void 0, _c.concat([(_h.sent())]))];\n                        return [4 /*yield*/, graphql_headers()];\n                    case 2:\n                        headerObj = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), (_g = {}, _g[USER_AGENT_HEADER] = Constants.userAgent, _g)]);\n                        subscriptionMessage = {\n                            id: subscriptionId,\n                            payload: {\n                                data: dataString,\n                                extensions: {\n                                    authorization: __assign({}, headerObj),\n                                },\n                            },\n                            type: MESSAGE_TYPES.GQL_START,\n                        };\n                        stringToAWSRealTime = JSON.stringify(subscriptionMessage);\n                        _h.label = 3;\n                    case 3:\n                        _h.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this._initializeWebSocketConnection({\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                authenticationType: authenticationType,\n                                region: region,\n                            })];\n                    case 4:\n                        _h.sent();\n                        return [3 /*break*/, 6];\n                    case 5:\n                        err_2 = _h.sent();\n                        logger.debug({ err: err_2 });\n                        _e = err_2.message, message = _e === void 0 ? '' : _e;\n                        observer.error({\n                            errors: [\n                                __assign({}, new GraphQLError(\"Connection failed: \" + message)),\n                            ],\n                        });\n                        observer.complete();\n                        subscriptionFailedCallback_1 = (this.subscriptionObserverMap.get(subscriptionId) || {}).subscriptionFailedCallback;\n                        // Notify concurrent unsubscription\n                        if (typeof subscriptionFailedCallback_1 === 'function') {\n                            subscriptionFailedCallback_1();\n                        }\n                        return [2 /*return*/];\n                    case 6:\n                        _f = this.subscriptionObserverMap.get(subscriptionId), subscriptionFailedCallback = _f.subscriptionFailedCallback, subscriptionReadyCallback = _f.subscriptionReadyCallback;\n                        // This must be done before sending the message in order to be listening immediately\n                        this.subscriptionObserverMap.set(subscriptionId, {\n                            observer: observer,\n                            subscriptionState: subscriptionState,\n                            variables: variables,\n                            query: query,\n                            subscriptionReadyCallback: subscriptionReadyCallback,\n                            subscriptionFailedCallback: subscriptionFailedCallback,\n                            startAckTimeoutId: setTimeout(function () {\n                                _this._timeoutStartSubscriptionAck.call(_this, subscriptionId);\n                            }, START_ACK_TIMEOUT),\n                        });\n                        this.awsRealTimeSocket.send(stringToAWSRealTime);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // Waiting that subscription has been connected before trying to unsubscribe\n    AWSAppSyncRealTimeProvider.prototype._waitForSubscriptionToBeConnected = function (subscriptionId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var subscriptionState;\n            var _this = this;\n            return __generator(this, function (_a) {\n                subscriptionState = this.subscriptionObserverMap.get(subscriptionId).subscriptionState;\n                // This in case unsubscribe is invoked before sending start subscription message\n                if (subscriptionState === SUBSCRIPTION_STATUS.PENDING) {\n                    return [2 /*return*/, new Promise(function (res, rej) {\n                            var _a = _this.subscriptionObserverMap.get(subscriptionId), observer = _a.observer, subscriptionState = _a.subscriptionState, variables = _a.variables, query = _a.query;\n                            _this.subscriptionObserverMap.set(subscriptionId, {\n                                observer: observer,\n                                subscriptionState: subscriptionState,\n                                variables: variables,\n                                query: query,\n                                subscriptionReadyCallback: res,\n                                subscriptionFailedCallback: rej,\n                            });\n                        })];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._sendUnsubscriptionMessage = function (subscriptionId) {\n        try {\n            if (this.awsRealTimeSocket &&\n                this.awsRealTimeSocket.readyState === WebSocket.OPEN &&\n                this.socketStatus === SOCKET_STATUS.READY) {\n                // Preparing unsubscribe message to stop receiving messages for that subscription\n                var unsubscribeMessage = {\n                    id: subscriptionId,\n                    type: MESSAGE_TYPES.GQL_STOP,\n                };\n                var stringToAWSRealTime = JSON.stringify(unsubscribeMessage);\n                this.awsRealTimeSocket.send(stringToAWSRealTime);\n            }\n        }\n        catch (err) {\n            // If GQL_STOP is not sent because of disconnection issue, then there is nothing the client can do\n            logger.debug({ err: err });\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._removeSubscriptionObserver = function (subscriptionId) {\n        this.subscriptionObserverMap.delete(subscriptionId);\n        // Verifying 1000ms after removing subscription in case there are new subscription unmount/mount\n        setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n    };\n    AWSAppSyncRealTimeProvider.prototype._closeSocketIfRequired = function () {\n        if (this.subscriptionObserverMap.size > 0) {\n            // Active subscriptions on the WebSocket\n            return;\n        }\n        if (!this.awsRealTimeSocket) {\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n            return;\n        }\n        if (this.awsRealTimeSocket.bufferedAmount > 0) {\n            // Still data on the WebSocket\n            setTimeout(this._closeSocketIfRequired.bind(this), 1000);\n        }\n        else {\n            logger.debug('closing WebSocket...');\n            clearTimeout(this.keepAliveTimeoutId);\n            var tempSocket = this.awsRealTimeSocket;\n            // Cleaning callbacks to avoid race condition, socket still exists\n            tempSocket.onclose = undefined;\n            tempSocket.onerror = undefined;\n            tempSocket.close(1000);\n            this.awsRealTimeSocket = null;\n            this.socketStatus = SOCKET_STATUS.CLOSED;\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._handleIncomingSubscriptionMessage = function (message) {\n        logger.debug(\"subscription message from AWS AppSync RealTime: \" + message.data);\n        var _a = JSON.parse(message.data), _b = _a.id, id = _b === void 0 ? '' : _b, payload = _a.payload, type = _a.type;\n        var _c = this.subscriptionObserverMap.get(id) || {}, _d = _c.observer, observer = _d === void 0 ? null : _d, _e = _c.query, query = _e === void 0 ? '' : _e, _f = _c.variables, variables = _f === void 0 ? {} : _f, startAckTimeoutId = _c.startAckTimeoutId, subscriptionReadyCallback = _c.subscriptionReadyCallback, subscriptionFailedCallback = _c.subscriptionFailedCallback;\n        logger.debug({ id: id, observer: observer, query: query, variables: variables });\n        if (type === MESSAGE_TYPES.GQL_DATA && payload && payload.data) {\n            if (observer) {\n                observer.next(payload);\n            }\n            else {\n                logger.debug(\"observer not found for id: \" + id);\n            }\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_START_ACK) {\n            logger.debug(\"subscription ready for \" + JSON.stringify({ query: query, variables: variables }));\n            if (typeof subscriptionReadyCallback === 'function') {\n                subscriptionReadyCallback();\n            }\n            clearTimeout(startAckTimeoutId);\n            dispatchApiEvent('connected', { query: query, variables: variables }, 'Connection established for subscription');\n            var subscriptionState = SUBSCRIPTION_STATUS.CONNECTED;\n            this.subscriptionObserverMap.set(id, {\n                observer: observer,\n                query: query,\n                variables: variables,\n                startAckTimeoutId: null,\n                subscriptionState: subscriptionState,\n                subscriptionReadyCallback: subscriptionReadyCallback,\n                subscriptionFailedCallback: subscriptionFailedCallback,\n            });\n            // TODO: emit event on hub but it requires to store the id first\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_CONNECTION_KEEP_ALIVE) {\n            clearTimeout(this.keepAliveTimeoutId);\n            this.keepAliveTimeoutId = setTimeout(this._errorDisconnect.bind(this, CONTROL_MSG.TIMEOUT_DISCONNECT), this.keepAliveTimeout);\n            return;\n        }\n        if (type === MESSAGE_TYPES.GQL_ERROR) {\n            var subscriptionState = SUBSCRIPTION_STATUS.FAILED;\n            this.subscriptionObserverMap.set(id, {\n                observer: observer,\n                query: query,\n                variables: variables,\n                startAckTimeoutId: startAckTimeoutId,\n                subscriptionReadyCallback: subscriptionReadyCallback,\n                subscriptionFailedCallback: subscriptionFailedCallback,\n                subscriptionState: subscriptionState,\n            });\n            observer.error({\n                errors: [\n                    __assign({}, new GraphQLError(\"Connection failed: \" + JSON.stringify(payload))),\n                ],\n            });\n            clearTimeout(startAckTimeoutId);\n            observer.complete();\n            if (typeof subscriptionFailedCallback === 'function') {\n                subscriptionFailedCallback();\n            }\n        }\n    };\n    AWSAppSyncRealTimeProvider.prototype._errorDisconnect = function (msg) {\n        logger.debug(\"Disconnect error: \" + msg);\n        this.subscriptionObserverMap.forEach(function (_a) {\n            var observer = _a.observer;\n            if (!observer.closed) {\n                observer.error({\n                    errors: [__assign({}, new GraphQLError(msg))],\n                });\n            }\n        });\n        this.subscriptionObserverMap.clear();\n        if (this.awsRealTimeSocket) {\n            this.awsRealTimeSocket.close();\n        }\n        this.socketStatus = SOCKET_STATUS.CLOSED;\n    };\n    AWSAppSyncRealTimeProvider.prototype._timeoutStartSubscriptionAck = function (subscriptionId) {\n        var _a = this.subscriptionObserverMap.get(subscriptionId) || {}, observer = _a.observer, query = _a.query, variables = _a.variables;\n        if (!observer) {\n            return;\n        }\n        this.subscriptionObserverMap.set(subscriptionId, {\n            observer: observer,\n            query: query,\n            variables: variables,\n            subscriptionState: SUBSCRIPTION_STATUS.FAILED,\n        });\n        if (observer && !observer.closed) {\n            observer.error({\n                errors: [\n                    __assign({}, new GraphQLError(\"Subscription timeout \" + JSON.stringify({ query: query, variables: variables }))),\n                ],\n            });\n            // Cleanup will be automatically executed\n            observer.complete();\n        }\n        logger.debug('timeoutStartSubscription', JSON.stringify({ query: query, variables: variables }));\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeWebSocketConnection = function (_a) {\n        var _this = this;\n        var appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, authenticationType = _a.authenticationType, apiKey = _a.apiKey, region = _a.region;\n        if (this.socketStatus === SOCKET_STATUS.READY) {\n            return;\n        }\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var discoverableEndpoint, payloadString, headerString, _a, _b, headerQs, payloadQs, awsRealTimeUrl, err_3;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this.promiseArray.push({ res: res, rej: rej });\n                        if (!(this.socketStatus === SOCKET_STATUS.CLOSED)) return [3 /*break*/, 5];\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 4, , 5]);\n                        this.socketStatus = SOCKET_STATUS.CONNECTING;\n                        discoverableEndpoint = appSyncGraphqlEndpoint\n                            .replace('https://', 'wss://')\n                            .replace('appsync-api', 'appsync-realtime-api')\n                            .replace('gogi-beta', 'grt-beta');\n                        payloadString = '{}';\n                        _b = (_a = JSON).stringify;\n                        return [4 /*yield*/, this._awsRealTimeHeaderBasedAuth({\n                                authenticationType: authenticationType,\n                                payload: payloadString,\n                                canonicalUri: '/connect',\n                                apiKey: apiKey,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                region: region,\n                            })];\n                    case 2:\n                        headerString = _b.apply(_a, [_c.sent()]);\n                        headerQs = Buffer.from(headerString).toString('base64');\n                        payloadQs = Buffer.from(payloadString).toString('base64');\n                        awsRealTimeUrl = discoverableEndpoint + \"?header=\" + headerQs + \"&payload=\" + payloadQs;\n                        return [4 /*yield*/, this._initializeRetryableHandshake({ awsRealTimeUrl: awsRealTimeUrl })];\n                    case 3:\n                        _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var res = _a.res;\n                            logger.debug('Notifying connection successful');\n                            res();\n                        });\n                        this.socketStatus = SOCKET_STATUS.READY;\n                        this.promiseArray = [];\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_3 = _c.sent();\n                        this.promiseArray.forEach(function (_a) {\n                            var rej = _a.rej;\n                            return rej(err_3);\n                        });\n                        this.promiseArray = [];\n                        if (this.awsRealTimeSocket &&\n                            this.awsRealTimeSocket.readyState === WebSocket.OPEN) {\n                            this.awsRealTimeSocket.close(3001);\n                        }\n                        this.awsRealTimeSocket = null;\n                        this.socketStatus = SOCKET_STATUS.CLOSED;\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeRetryableHandshake = function (_a) {\n        var awsRealTimeUrl = _a.awsRealTimeUrl;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug(\"Initializaling retryable Handshake\");\n                        return [4 /*yield*/, jitteredExponentialRetry(this._initializeHandshake.bind(this), [{ awsRealTimeUrl: awsRealTimeUrl }], MAX_DELAY_MS)];\n                    case 1:\n                        _b.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._initializeHandshake = function (_a) {\n        var awsRealTimeUrl = _a.awsRealTimeUrl;\n        return __awaiter(this, void 0, void 0, function () {\n            var err_4, errorType, errorCode;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug(\"Initializing handshake \" + awsRealTimeUrl);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 4, , 5]);\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    var newSocket = new WebSocket(awsRealTimeUrl, 'graphql-ws');\n                                    newSocket.onerror = function () {\n                                        logger.debug(\"WebSocket connection error\");\n                                    };\n                                    newSocket.onclose = function () {\n                                        rej(new Error('Connection handshake error'));\n                                    };\n                                    newSocket.onopen = function () {\n                                        _this.awsRealTimeSocket = newSocket;\n                                        return res();\n                                    };\n                                });\n                            })()];\n                    case 2:\n                        _b.sent();\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        return [4 /*yield*/, (function () {\n                                return new Promise(function (res, rej) {\n                                    var ackOk = false;\n                                    _this.awsRealTimeSocket.onerror = function (error) {\n                                        logger.debug(\"WebSocket error \" + JSON.stringify(error));\n                                    };\n                                    _this.awsRealTimeSocket.onclose = function (event) {\n                                        logger.debug(\"WebSocket closed \" + event.reason);\n                                        rej(new Error(JSON.stringify(event)));\n                                    };\n                                    _this.awsRealTimeSocket.onmessage = function (message) {\n                                        logger.debug(\"subscription message from AWS AppSyncRealTime: \" + message.data + \" \");\n                                        var data = JSON.parse(message.data);\n                                        var type = data.type, _a = data.payload, _b = (_a === void 0 ? {} : _a).connectionTimeoutMs, connectionTimeoutMs = _b === void 0 ? DEFAULT_KEEP_ALIVE_TIMEOUT : _b;\n                                        if (type === MESSAGE_TYPES.GQL_CONNECTION_ACK) {\n                                            ackOk = true;\n                                            _this.keepAliveTimeout = connectionTimeoutMs;\n                                            _this.awsRealTimeSocket.onmessage = _this._handleIncomingSubscriptionMessage.bind(_this);\n                                            _this.awsRealTimeSocket.onerror = function (err) {\n                                                logger.debug(err);\n                                                _this._errorDisconnect(CONTROL_MSG.CONNECTION_CLOSED);\n                                            };\n                                            res('Cool, connected to AWS AppSyncRealTime');\n                                            return;\n                                        }\n                                        if (type === MESSAGE_TYPES.GQL_CONNECTION_ERROR) {\n                                            var _c = data.payload, _d = (_c === void 0 ? {} : _c).errors, _e = (_d === void 0 ? [] : _d)[0], _f = _e === void 0 ? {} : _e, _g = _f.errorType, errorType = _g === void 0 ? '' : _g, _h = _f.errorCode, errorCode = _h === void 0 ? 0 : _h;\n                                            rej({ errorType: errorType, errorCode: errorCode });\n                                        }\n                                    };\n                                    var gqlInit = {\n                                        type: MESSAGE_TYPES.GQL_CONNECTION_INIT,\n                                    };\n                                    _this.awsRealTimeSocket.send(JSON.stringify(gqlInit));\n                                    function checkAckOk() {\n                                        if (!ackOk) {\n                                            rej(new Error(\"Connection timeout: ack from AWSRealTime was not received on \" + CONNECTION_INIT_TIMEOUT + \" ms\"));\n                                        }\n                                    }\n                                    setTimeout(checkAckOk.bind(_this), CONNECTION_INIT_TIMEOUT);\n                                });\n                            })()];\n                    case 3:\n                        // Step 2: wait for ack from AWS AppSyncReaTime after sending init\n                        _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_4 = _b.sent();\n                        errorType = err_4.errorType, errorCode = err_4.errorCode;\n                        if (NON_RETRYABLE_CODES.includes(errorCode)) {\n                            throw new NonRetryableError(errorType);\n                        }\n                        else if (errorType) {\n                            throw new Error(errorType);\n                        }\n                        else {\n                            throw err_4;\n                        }\n                        return [3 /*break*/, 5];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeHeaderBasedAuth = function (_a) {\n        var authenticationType = _a.authenticationType, payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, apiKey = _a.apiKey, region = _a.region;\n        return __awaiter(this, void 0, void 0, function () {\n            var headerHandler, handler, host, result;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        headerHandler = {\n                            API_KEY: this._awsRealTimeApiKeyHeader.bind(this),\n                            AWS_IAM: this._awsRealTimeIAMHeader.bind(this),\n                            OPENID_CONNECT: this._awsRealTimeOPENIDHeader.bind(this),\n                            AMAZON_COGNITO_USER_POOLS: this._awsRealTimeCUPHeader.bind(this),\n                        };\n                        handler = headerHandler[authenticationType];\n                        if (typeof handler !== 'function') {\n                            logger.debug(\"Authentication type \" + authenticationType + \" not supported\");\n                            return [2 /*return*/, ''];\n                        }\n                        host = url.parse(appSyncGraphqlEndpoint).host;\n                        return [4 /*yield*/, handler({\n                                payload: payload,\n                                canonicalUri: canonicalUri,\n                                appSyncGraphqlEndpoint: appSyncGraphqlEndpoint,\n                                apiKey: apiKey,\n                                region: region,\n                                host: host,\n                            })];\n                    case 1:\n                        result = _b.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeCUPHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var session;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Auth.currentSession()];\n                    case 1:\n                        session = _b.sent();\n                        return [2 /*return*/, {\n                                Authorization: session.getAccessToken().getJwtToken(),\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeOPENIDHeader = function (_a) {\n        var host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var federatedInfo;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, Cache.getItem('federatedInfo')];\n                    case 1:\n                        federatedInfo = _b.sent();\n                        if (!federatedInfo || !federatedInfo.token) {\n                            throw new Error('No federated jwt');\n                        }\n                        return [2 /*return*/, {\n                                Authorization: federatedInfo.token,\n                                host: host,\n                            }];\n                }\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeApiKeyHeader = function (_a) {\n        var apiKey = _a.apiKey, host = _a.host;\n        return __awaiter(this, void 0, void 0, function () {\n            var dt, dtStr;\n            return __generator(this, function (_b) {\n                dt = new Date();\n                dtStr = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n                return [2 /*return*/, {\n                        host: host,\n                        'x-amz-date': dtStr,\n                        'x-api-key': apiKey,\n                    }];\n            });\n        });\n    };\n    AWSAppSyncRealTimeProvider.prototype._awsRealTimeIAMHeader = function (_a) {\n        var payload = _a.payload, canonicalUri = _a.canonicalUri, appSyncGraphqlEndpoint = _a.appSyncGraphqlEndpoint, region = _a.region;\n        return __awaiter(this, void 0, void 0, function () {\n            var endpointInfo, credentialsOK, creds, request, signed_params;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        endpointInfo = {\n                            region: region,\n                            service: 'appsync',\n                        };\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _b.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        return [4 /*yield*/, Credentials.get().then(function (credentials) { return ({\n                                secret_key: credentials.secretAccessKey,\n                                access_key: credentials.accessKeyId,\n                                session_token: credentials.sessionToken,\n                            }); })];\n                    case 2:\n                        creds = _b.sent();\n                        request = {\n                            url: \"\" + appSyncGraphqlEndpoint + canonicalUri,\n                            data: payload,\n                            method: 'POST',\n                            headers: __assign({}, AWS_APPSYNC_REALTIME_HEADERS),\n                        };\n                        signed_params = Signer.sign(request, creds, endpointInfo);\n                        return [2 /*return*/, signed_params.headers];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AWSAppSyncRealTimeProvider.prototype._ensureCredentials = function () {\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return false;\n            var cred = Credentials.shear(credentials);\n            logger.debug('set credentials for AWSAppSyncRealTimeProvider', cred);\n            return true;\n        })\n            .catch(function (err) {\n            logger.warn('ensure credentials error', err);\n            return false;\n        });\n    };\n    return AWSAppSyncRealTimeProvider;\n}(AbstractPubSubProvider));\nexport { AWSAppSyncRealTimeProvider };\n//# sourceMappingURL=AWSAppSyncRealTimeProvider.js.map"]},"metadata":{},"sourceType":"module"}