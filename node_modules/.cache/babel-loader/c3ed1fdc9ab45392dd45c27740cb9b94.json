{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport keyMap from '../../jsutils/keyMap';\nimport orList from '../../jsutils/orList';\nimport suggestionList from '../../jsutils/suggestionList';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \") + \"\".concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, message) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName) + (message ? \"; \".concat(message) : '.');\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var inputFields = type.getFields();\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      var _arr = Object.keys(inputFields);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var fieldName = _arr[_i];\n        var fieldDef = inputFields[fieldName];\n        var fieldNode = fieldNodeMap[fieldName];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldName, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        var didYouMean = suggestions.length !== 0 ? \"Did you mean \".concat(orList(suggestions), \"?\") : undefined;\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)), node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  if (isEnumType(type)) {\n    var suggestions = suggestionList(print(node), type.getValues().map(function (value) {\n      return value.name;\n    }));\n\n    if (suggestions.length !== 0) {\n      return \"Did you mean the enum value \".concat(orList(suggestions), \"?\");\n    }\n  }\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/validation/rules/ValuesOfCorrectType.mjs"],"names":["GraphQLError","print","isScalarType","isEnumType","isInputObjectType","isListType","isNonNullType","isRequiredInputField","getNullableType","getNamedType","inspect","isInvalid","keyMap","orList","suggestionList","badValueMessage","typeName","valueName","message","concat","requiredFieldMessage","fieldName","fieldTypeName","unknownFieldMessage","ValuesOfCorrectType","context","NullValue","node","type","getInputType","reportError","ListValue","getParentInputType","isValidScalar","ObjectValue","inputFields","getFields","fieldNodeMap","fields","field","name","value","_arr","Object","keys","_i","length","fieldDef","fieldNode","typeStr","ObjectField","parentType","fieldType","suggestions","didYouMean","undefined","EnumValue","getValue","enumTypeSuggestion","IntValue","FloatValue","StringValue","BooleanValue","locationType","parseResult","parseLiteral","error","getValues","map"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { print } from '../../language/printer';\nimport { isScalarType, isEnumType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from '../../type/definition';\nimport inspect from '../../jsutils/inspect';\nimport isInvalid from '../../jsutils/isInvalid';\nimport keyMap from '../../jsutils/keyMap';\nimport orList from '../../jsutils/orList';\nimport suggestionList from '../../jsutils/suggestionList';\nexport function badValueMessage(typeName, valueName, message) {\n  return \"Expected type \".concat(typeName, \", found \").concat(valueName) + (message ? \"; \".concat(message) : '.');\n}\nexport function requiredFieldMessage(typeName, fieldName, fieldTypeName) {\n  return \"Field \".concat(typeName, \".\").concat(fieldName, \" of required type \") + \"\".concat(fieldTypeName, \" was not provided.\");\n}\nexport function unknownFieldMessage(typeName, fieldName, message) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" is not defined by type \").concat(typeName) + (message ? \"; \".concat(message) : '.');\n}\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\n\nexport function ValuesOfCorrectType(context) {\n  return {\n    NullValue: function NullValue(node) {\n      var type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(badValueMessage(inspect(type), print(node)), node));\n      }\n    },\n    ListValue: function ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      var type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n    ObjectValue: function ObjectValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidScalar(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      var inputFields = type.getFields();\n      var fieldNodeMap = keyMap(node.fields, function (field) {\n        return field.name.value;\n      });\n\n      var _arr = Object.keys(inputFields);\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var fieldName = _arr[_i];\n        var fieldDef = inputFields[fieldName];\n        var fieldNode = fieldNodeMap[fieldName];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          var typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(requiredFieldMessage(type.name, fieldName, typeStr), node));\n        }\n      }\n    },\n    ObjectField: function ObjectField(node) {\n      var parentType = getNamedType(context.getParentInputType());\n      var fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        var suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        var didYouMean = suggestions.length !== 0 ? \"Did you mean \".concat(orList(suggestions), \"?\") : undefined;\n        context.reportError(new GraphQLError(unknownFieldMessage(parentType.name, node.name.value, didYouMean), node));\n      }\n    },\n    EnumValue: function EnumValue(node) {\n      var type = getNamedType(context.getInputType());\n\n      if (!isEnumType(type)) {\n        isValidScalar(context, node);\n      } else if (!type.getValue(node.value)) {\n        context.reportError(new GraphQLError(badValueMessage(type.name, print(node), enumTypeSuggestion(type, node)), node));\n      }\n    },\n    IntValue: function IntValue(node) {\n      return isValidScalar(context, node);\n    },\n    FloatValue: function FloatValue(node) {\n      return isValidScalar(context, node);\n    },\n    StringValue: function StringValue(node) {\n      return isValidScalar(context, node);\n    },\n    BooleanValue: function BooleanValue(node) {\n      return isValidScalar(context, node);\n    }\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidScalar(context, node) {\n  // Report any error at the full type expected by the location.\n  var locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  var type = getNamedType(locationType);\n\n  if (!isScalarType(type)) {\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), enumTypeSuggestion(type, node)), node));\n    return;\n  } // Scalars determine if a literal value is valid via parseLiteral() which\n  // may throw or return an invalid value to indicate failure.\n\n\n  try {\n    var parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (isInvalid(parseResult)) {\n      context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node)), node));\n    }\n  } catch (error) {\n    // Ensure a reference to the original error is maintained.\n    context.reportError(new GraphQLError(badValueMessage(inspect(locationType), print(node), error.message), node, undefined, undefined, undefined, error));\n  }\n}\n\nfunction enumTypeSuggestion(type, node) {\n  if (isEnumType(type)) {\n    var suggestions = suggestionList(print(node), type.getValues().map(function (value) {\n      return value.name;\n    }));\n\n    if (suggestions.length !== 0) {\n      return \"Did you mean the enum value \".concat(orList(suggestions), \"?\");\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}