{"ast":null,"code":"var AWS = require('../core');\n\nAWS.util.update(AWS.EC2.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);\n    request.addListener('extractError', this.extractError);\n\n    if (request.operation === 'copySnapshot') {\n      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {\n    if (req.params.PresignedUrl || req._subRequest) {\n      return done();\n    }\n\n    req.params = AWS.util.copy(req.params);\n    req.params.DestinationRegion = req.service.config.region;\n    var config = AWS.util.copy(req.service.config);\n    delete config.endpoint;\n    config.region = req.params.SourceRegion;\n    var svc = new req.service.constructor(config);\n    var newReq = svc[req.operation](req.params);\n    newReq._subRequest = true;\n    newReq.presign(function (err, url) {\n      if (err) done(err);else {\n        req.params.PresignedUrl = url;\n        done();\n      }\n    });\n  },\n\n  /**\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    // EC2 nests the error code and message deeper than other AWS Query services.\n    var httpResponse = resp.httpResponse;\n    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');\n\n    if (data.Errors) {\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Errors.Error.Code,\n        message: data.Errors.Error.Message\n      });\n    } else {\n      resp.error = AWS.util.error(new Error(), {\n        code: httpResponse.statusCode,\n        message: null\n      });\n    }\n\n    resp.error.requestId = data.RequestID || null;\n  }\n});","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/services/ec2.js"],"names":["AWS","require","util","update","EC2","prototype","setupRequestListeners","request","removeListener","EventListeners","Query","EXTRACT_ERROR","addListener","extractError","operation","onAsync","buildCopySnapshotPresignedUrl","req","done","params","PresignedUrl","_subRequest","copy","DestinationRegion","service","config","region","endpoint","SourceRegion","svc","constructor","newReq","presign","err","url","resp","httpResponse","data","XML","Parser","parse","body","toString","Errors","error","Error","code","Code","message","Message","statusCode","requestId","RequestID"],"mappings":"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","sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.EC2.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);\n    request.addListener('extractError', this.extractError);\n\n    if (request.operation === 'copySnapshot') {\n      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {\n    if (req.params.PresignedUrl || req._subRequest) {\n      return done();\n    }\n\n    req.params = AWS.util.copy(req.params);\n    req.params.DestinationRegion = req.service.config.region;\n\n    var config = AWS.util.copy(req.service.config);\n    delete config.endpoint;\n    config.region = req.params.SourceRegion;\n    var svc = new req.service.constructor(config);\n    var newReq = svc[req.operation](req.params);\n    newReq._subRequest = true;\n    newReq.presign(function(err, url) {\n      if (err) done(err);\n      else {\n        req.params.PresignedUrl = url;\n        done();\n      }\n    });\n  },\n\n  /**\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    // EC2 nests the error code and message deeper than other AWS Query services.\n    var httpResponse = resp.httpResponse;\n    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');\n    if (data.Errors) {\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Errors.Error.Code,\n        message: data.Errors.Error.Message\n      });\n    } else {\n      resp.error = AWS.util.error(new Error(), {\n        code: httpResponse.statusCode,\n        message: null\n      });\n    }\n    resp.error.requestId = data.RequestID || null;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}