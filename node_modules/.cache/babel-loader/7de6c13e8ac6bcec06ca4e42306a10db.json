{"ast":null,"code":"import { isEmpty, isEqual } from 'lodash';\nimport { v1 as uuid } from 'uuid';\nimport { ConsoleLogger as Logger, JS } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nvar PERSONALIZE_CACHE = '_awsct';\nvar PERSONALIZE_CACHE_USERID = '_awsct_uid';\nvar PERSONALIZE_CACHE_SESSIONID = '_awsct_sid';\nvar DEFAULT_CACHE_PREFIX = 'peronslize';\nvar TIMER_INTERVAL = 30 * 1000;\nvar DELIMITER = '.';\nvar CACHE_EXPIRY_IN_DAYS = 7;\nvar logger = new Logger('AmazonPersonalizeProvider');\n\nvar SessionInfoManager =\n/** @class */\nfunction () {\n  function SessionInfoManager(prefixKey) {\n    if (prefixKey === void 0) {\n      prefixKey = '';\n    }\n\n    this._isBrowser = JS.browserOrNode().isBrowser;\n    this._timerKey = uuid().substr(0, 15);\n\n    this._refreshTimer();\n  }\n\n  SessionInfoManager.prototype._refreshTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var that = this;\n    this._timer = setInterval(function () {\n      that._timerKey = uuid().substr(0, 15);\n    }, TIMER_INTERVAL);\n  };\n\n  SessionInfoManager.prototype.storeValue = function (key, value) {\n    var today = new Date();\n    var expire = new Date();\n    expire.setTime(today.getTime() + 3600000 * 24 * CACHE_EXPIRY_IN_DAYS);\n    Cache.setItem(this._getCachePrefix(key), value, {\n      expires: expire.getTime()\n    });\n  };\n\n  SessionInfoManager.prototype.retrieveValue = function (key) {\n    return Cache.getItem(this._getCachePrefix(key));\n  };\n\n  SessionInfoManager.prototype._getCachePrefix = function (key) {\n    if (this._isBrowser) {\n      return key + DELIMITER + window.location.host;\n    }\n\n    return DEFAULT_CACHE_PREFIX;\n  };\n\n  SessionInfoManager.prototype.getTimerKey = function () {\n    return this._timerKey;\n  };\n\n  SessionInfoManager.prototype.updateSessionInfo = function (userId, sessionInfo) {\n    var existUserId = sessionInfo.userId;\n    var existSessionId = sessionInfo.sessionId;\n\n    if (this._isRequireNewSession(userId, existUserId, existSessionId)) {\n      var newSessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, newSessionId);\n      sessionInfo.sessionId = newSessionId;\n    } else if (this._isRequireUpdateSessionInfo(userId, existUserId, existSessionId)) {\n      this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n    }\n\n    sessionInfo.userId = userId;\n  };\n\n  SessionInfoManager.prototype._isRequireUpdateSessionInfo = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // anonymouse => sign in : hasSession && s_userId == null && curr_userId !=null\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    return !isNoCachedSession && isEmpty(cachedSessionUserId) && !isEmpty(userId);\n  };\n\n  SessionInfoManager.prototype.retrieveSessionInfo = function (trackingId) {\n    var sessionInfo = {};\n    sessionInfo.trackingId = trackingId;\n    sessionInfo.sessionId = this.retrieveValue(PERSONALIZE_CACHE_SESSIONID);\n    sessionInfo.userId = this.retrieveValue(PERSONALIZE_CACHE_USERID);\n\n    if (isEmpty(sessionInfo.sessionId)) {\n      sessionInfo.sessionId = uuid();\n      this.storeValue(PERSONALIZE_CACHE_SESSIONID, sessionInfo.sessionId);\n    }\n\n    this.storeValue(PERSONALIZE_CACHE, trackingId);\n    return sessionInfo;\n  };\n\n  SessionInfoManager.prototype._isRequireNewSession = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n    // new session => 1. no cached session info 2. signOut: s_userId !=null && curr_userId ==null\n    // 3. switch account: s_userId !=null && curr_userId !=null && s_userId != curr_userId\n    var isNoCachedSession = isEmpty(cachedSessionSessionId);\n    var isSignoutCase = isEmpty(userId) && !isEmpty(cachedSessionUserId);\n    var isSwitchUserCase = !isEmpty(userId) && !isEmpty(cachedSessionUserId) && !isEqual(userId, cachedSessionUserId);\n    return isNoCachedSession || isSignoutCase || isSwitchUserCase;\n  };\n\n  return SessionInfoManager;\n}();\n\nexport { SessionInfoManager };","map":{"version":3,"sources":["../../../src/Providers/AmazonPersonalizeHelper/SessionInfoManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { isEmpty, isEqual } from 'lodash';\nimport { v1 as uuid } from 'uuid';\nimport { ConsoleLogger as Logger, JS } from '@aws-amplify/core';\nimport Cache from '@aws-amplify/cache';\nvar PERSONALIZE_CACHE = '_awsct';\nvar PERSONALIZE_CACHE_USERID = '_awsct_uid';\nvar PERSONALIZE_CACHE_SESSIONID = '_awsct_sid';\nvar DEFAULT_CACHE_PREFIX = 'peronslize';\nvar TIMER_INTERVAL = 30 * 1000;\nvar DELIMITER = '.';\nvar CACHE_EXPIRY_IN_DAYS = 7;\nvar logger = new Logger('AmazonPersonalizeProvider');\nvar SessionInfoManager = /** @class */ (function () {\n    function SessionInfoManager(prefixKey) {\n        if (prefixKey === void 0) { prefixKey = ''; }\n        this._isBrowser = JS.browserOrNode().isBrowser;\n        this._timerKey = uuid().substr(0, 15);\n        this._refreshTimer();\n    }\n    SessionInfoManager.prototype._refreshTimer = function () {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        var that = this;\n        this._timer = setInterval(function () {\n            that._timerKey = uuid().substr(0, 15);\n        }, TIMER_INTERVAL);\n    };\n    SessionInfoManager.prototype.storeValue = function (key, value) {\n        var today = new Date();\n        var expire = new Date();\n        expire.setTime(today.getTime() + 3600000 * 24 * CACHE_EXPIRY_IN_DAYS);\n        Cache.setItem(this._getCachePrefix(key), value, {\n            expires: expire.getTime(),\n        });\n    };\n    SessionInfoManager.prototype.retrieveValue = function (key) {\n        return Cache.getItem(this._getCachePrefix(key));\n    };\n    SessionInfoManager.prototype._getCachePrefix = function (key) {\n        if (this._isBrowser) {\n            return key + DELIMITER + window.location.host;\n        }\n        return DEFAULT_CACHE_PREFIX;\n    };\n    SessionInfoManager.prototype.getTimerKey = function () {\n        return this._timerKey;\n    };\n    SessionInfoManager.prototype.updateSessionInfo = function (userId, sessionInfo) {\n        var existUserId = sessionInfo.userId;\n        var existSessionId = sessionInfo.sessionId;\n        if (this._isRequireNewSession(userId, existUserId, existSessionId)) {\n            var newSessionId = uuid();\n            this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n            this.storeValue(PERSONALIZE_CACHE_SESSIONID, newSessionId);\n            sessionInfo.sessionId = newSessionId;\n        }\n        else if (this._isRequireUpdateSessionInfo(userId, existUserId, existSessionId)) {\n            this.storeValue(PERSONALIZE_CACHE_USERID, userId);\n        }\n        sessionInfo.userId = userId;\n    };\n    SessionInfoManager.prototype._isRequireUpdateSessionInfo = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n        // anonymouse => sign in : hasSession && s_userId == null && curr_userId !=null\n        var isNoCachedSession = isEmpty(cachedSessionSessionId);\n        return (!isNoCachedSession && isEmpty(cachedSessionUserId) && !isEmpty(userId));\n    };\n    SessionInfoManager.prototype.retrieveSessionInfo = function (trackingId) {\n        var sessionInfo = {};\n        sessionInfo.trackingId = trackingId;\n        sessionInfo.sessionId = this.retrieveValue(PERSONALIZE_CACHE_SESSIONID);\n        sessionInfo.userId = this.retrieveValue(PERSONALIZE_CACHE_USERID);\n        if (isEmpty(sessionInfo.sessionId)) {\n            sessionInfo.sessionId = uuid();\n            this.storeValue(PERSONALIZE_CACHE_SESSIONID, sessionInfo.sessionId);\n        }\n        this.storeValue(PERSONALIZE_CACHE, trackingId);\n        return sessionInfo;\n    };\n    SessionInfoManager.prototype._isRequireNewSession = function (userId, cachedSessionUserId, cachedSessionSessionId) {\n        // new session => 1. no cached session info 2. signOut: s_userId !=null && curr_userId ==null\n        // 3. switch account: s_userId !=null && curr_userId !=null && s_userId != curr_userId\n        var isNoCachedSession = isEmpty(cachedSessionSessionId);\n        var isSignoutCase = isEmpty(userId) && !isEmpty(cachedSessionUserId);\n        var isSwitchUserCase = !isEmpty(userId) &&\n            !isEmpty(cachedSessionUserId) &&\n            !isEqual(userId, cachedSessionUserId);\n        return isNoCachedSession || isSignoutCase || isSwitchUserCase;\n    };\n    return SessionInfoManager;\n}());\nexport { SessionInfoManager };\n//# sourceMappingURL=SessionInfoManager.js.map"]},"metadata":{},"sourceType":"module"}