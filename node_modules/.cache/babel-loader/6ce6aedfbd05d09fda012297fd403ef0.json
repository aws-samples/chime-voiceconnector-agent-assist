{"ast":null,"code":"var util = require('../util');\n\nvar JsonBuilder = require('../json/builder');\n\nvar JsonParser = require('../json/parser');\n\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';\n\n  if (typeof error.code === 'string') {\n    error.code = error.code.split(':')[0];\n  }\n\n  if (httpResponse.body.length > 0) {\n    try {\n      var e = JSON.parse(httpResponse.body.toString());\n\n      if (e.__type || e.code) {\n        error.code = (e.__type || e.code).split('#').pop();\n      }\n\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = e.message || e.Message || null;\n      }\n    } catch (e) {\n      error.statusCode = httpResponse.statusCode;\n      error.message = httpResponse.statusMessage;\n    }\n  } else {\n    error.statusCode = httpResponse.statusCode;\n    error.message = httpResponse.statusCode.toString();\n  }\n\n  resp.error = util.error(new Error(), error);\n}\n\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n/**\n * @api private\n */\n\n\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/@aws-amplify/core/node_modules/aws-sdk/lib/protocol/json.js"],"names":["util","require","JsonBuilder","JsonParser","populateHostPrefix","buildRequest","req","httpRequest","api","service","target","targetPrefix","operations","operation","name","version","jsonVersion","input","builder","body","build","params","headers","extractError","resp","error","httpResponse","code","split","length","e","JSON","parse","toString","__type","pop","message","Message","statusCode","statusMessage","Error","extractData","request","config","convertResponseTypes","data","shape","output","parser","module","exports"],"mappings":"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","sourcesContent":["var util = require('../util');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\nvar populateHostPrefix = require('./helpers').populateHostPrefix;\n\nfunction buildRequest(req) {\n  var httpRequest = req.httpRequest;\n  var api = req.service.api;\n  var target = api.targetPrefix + '.' + api.operations[req.operation].name;\n  var version = api.jsonVersion || '1.0';\n  var input = api.operations[req.operation].input;\n  var builder = new JsonBuilder();\n\n  if (version === 1) version = '1.0';\n  httpRequest.body = builder.build(req.params || {}, input);\n  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;\n  httpRequest.headers['X-Amz-Target'] = target;\n\n  populateHostPrefix(req);\n}\n\nfunction extractError(resp) {\n  var error = {};\n  var httpResponse = resp.httpResponse;\n\n  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';\n  if (typeof error.code === 'string') {\n    error.code = error.code.split(':')[0];\n  }\n\n  if (httpResponse.body.length > 0) {\n    try {\n      var e = JSON.parse(httpResponse.body.toString());\n      if (e.__type || e.code) {\n        error.code = (e.__type || e.code).split('#').pop();\n      }\n      if (error.code === 'RequestEntityTooLarge') {\n        error.message = 'Request body must be less than 1 MB';\n      } else {\n        error.message = (e.message || e.Message || null);\n      }\n    } catch (e) {\n      error.statusCode = httpResponse.statusCode;\n      error.message = httpResponse.statusMessage;\n    }\n  } else {\n    error.statusCode = httpResponse.statusCode;\n    error.message = httpResponse.statusCode.toString();\n  }\n\n  resp.error = util.error(new Error(), error);\n}\n\nfunction extractData(resp) {\n  var body = resp.httpResponse.body.toString() || '{}';\n  if (resp.request.service.config.convertResponseTypes === false) {\n    resp.data = JSON.parse(body);\n  } else {\n    var operation = resp.request.service.api.operations[resp.request.operation];\n    var shape = operation.output || {};\n    var parser = new JsonParser();\n    resp.data = parser.parse(body, shape);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"]},"metadata":{},"sourceType":"script"}