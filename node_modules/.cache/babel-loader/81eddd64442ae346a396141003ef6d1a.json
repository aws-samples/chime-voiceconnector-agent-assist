{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\n\n\nvar CognitoUserSession = function () {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {CognitoIdToken} IdToken The session's Id token.\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\n   * @param {CognitoAccessToken} AccessToken The session's access token.\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\n   */\n  function CognitoUserSession() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        IdToken = _ref.IdToken,\n        RefreshToken = _ref.RefreshToken,\n        AccessToken = _ref.AccessToken,\n        ClockDrift = _ref.ClockDrift;\n\n    _classCallCheck(this, CognitoUserSession);\n\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n  }\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n\n\n  CognitoUserSession.prototype.getIdToken = function getIdToken() {\n    return this.idToken;\n  };\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n\n\n  CognitoUserSession.prototype.getRefreshToken = function getRefreshToken() {\n    return this.refreshToken;\n  };\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n\n\n  CognitoUserSession.prototype.getAccessToken = function getAccessToken() {\n    return this.accessToken;\n  };\n  /**\n   * @returns {int} the session's clock drift\n   */\n\n\n  CognitoUserSession.prototype.getClockDrift = function getClockDrift() {\n    return this.clockDrift;\n  };\n  /**\n   * @returns {int} the computer's clock drift\n   */\n\n\n  CognitoUserSession.prototype.calculateClockDrift = function calculateClockDrift() {\n    var now = Math.floor(new Date() / 1000);\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n    return now - iat;\n  };\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time (adjusted with clock drift)\n   * @returns {boolean} if the session is still valid\n   */\n\n\n  CognitoUserSession.prototype.isValid = function isValid() {\n    var now = Math.floor(new Date() / 1000);\n    var adjusted = now - this.clockDrift;\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n  };\n\n  return CognitoUserSession;\n}();\n\nexport default CognitoUserSession;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js"],"names":["_classCallCheck","instance","Constructor","TypeError","CognitoUserSession","_ref","arguments","length","undefined","IdToken","RefreshToken","AccessToken","ClockDrift","Error","idToken","refreshToken","accessToken","clockDrift","calculateClockDrift","prototype","getIdToken","getRefreshToken","getAccessToken","getClockDrift","now","Math","floor","Date","iat","min","getIssuedAt","isValid","adjusted","getExpiration"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;AAEzJ;;;;;;;;;;;;;;;;;AAiBA;;;AACA,IAAIC,kBAAkB,GAAG,YAAY;AACpC;;;;;;;AAOA,WAASA,kBAAT,GAA8B;AAC7B,QAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,QACIG,OAAO,GAAGJ,IAAI,CAACI,OADnB;AAAA,QAEIC,YAAY,GAAGL,IAAI,CAACK,YAFxB;AAAA,QAGIC,WAAW,GAAGN,IAAI,CAACM,WAHvB;AAAA,QAIIC,UAAU,GAAGP,IAAI,CAACO,UAJtB;;AAMAZ,IAAAA,eAAe,CAAC,IAAD,EAAOI,kBAAP,CAAf;;AAEA,QAAIO,WAAW,IAAI,IAAf,IAAuBF,OAAO,IAAI,IAAtC,EAA4C;AAC3C,YAAM,IAAII,KAAJ,CAAU,4CAAV,CAAN;AACA;;AAED,SAAKC,OAAL,GAAeL,OAAf;AACA,SAAKM,YAAL,GAAoBL,YAApB;AACA,SAAKM,WAAL,GAAmBL,WAAnB;AACA,SAAKM,UAAL,GAAkBL,UAAU,KAAKJ,SAAf,GAA2B,KAAKU,mBAAL,EAA3B,GAAwDN,UAA1E;AACA;AAED;;;;;AAKAR,EAAAA,kBAAkB,CAACe,SAAnB,CAA6BC,UAA7B,GAA0C,SAASA,UAAT,GAAsB;AAC/D,WAAO,KAAKN,OAAZ;AACA,GAFD;AAIA;;;;;AAKAV,EAAAA,kBAAkB,CAACe,SAAnB,CAA6BE,eAA7B,GAA+C,SAASA,eAAT,GAA2B;AACzE,WAAO,KAAKN,YAAZ;AACA,GAFD;AAIA;;;;;AAKAX,EAAAA,kBAAkB,CAACe,SAAnB,CAA6BG,cAA7B,GAA8C,SAASA,cAAT,GAA0B;AACvE,WAAO,KAAKN,WAAZ;AACA,GAFD;AAIA;;;;;AAKAZ,EAAAA,kBAAkB,CAACe,SAAnB,CAA6BI,aAA7B,GAA6C,SAASA,aAAT,GAAyB;AACrE,WAAO,KAAKN,UAAZ;AACA,GAFD;AAIA;;;;;AAKAb,EAAAA,kBAAkB,CAACe,SAAnB,CAA6BD,mBAA7B,GAAmD,SAASA,mBAAT,GAA+B;AACjF,QAAIM,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAa,IAAxB,CAAV;AACA,QAAIC,GAAG,GAAGH,IAAI,CAACI,GAAL,CAAS,KAAKb,WAAL,CAAiBc,WAAjB,EAAT,EAAyC,KAAKhB,OAAL,CAAagB,WAAb,EAAzC,CAAV;AAEA,WAAON,GAAG,GAAGI,GAAb;AACA,GALD;AAOA;;;;;;;AAOAxB,EAAAA,kBAAkB,CAACe,SAAnB,CAA6BY,OAA7B,GAAuC,SAASA,OAAT,GAAmB;AACzD,QAAIP,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAW,IAAIC,IAAJ,KAAa,IAAxB,CAAV;AACA,QAAIK,QAAQ,GAAGR,GAAG,GAAG,KAAKP,UAA1B;AAEA,WAAOe,QAAQ,GAAG,KAAKhB,WAAL,CAAiBiB,aAAjB,EAAX,IAA+CD,QAAQ,GAAG,KAAKlB,OAAL,CAAamB,aAAb,EAAjE;AACA,GALD;;AAOA,SAAO7B,kBAAP;AACA,CA1FwB,EAAzB;;AA4FA,eAAeA,kBAAf","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nvar CognitoUserSession = function () {\n\t/**\n  * Constructs a new CognitoUserSession object\n  * @param {CognitoIdToken} IdToken The session's Id token.\n  * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\n  * @param {CognitoAccessToken} AccessToken The session's access token.\n  * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\n  */\n\tfunction CognitoUserSession() {\n\t\tvar _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t\t    IdToken = _ref.IdToken,\n\t\t    RefreshToken = _ref.RefreshToken,\n\t\t    AccessToken = _ref.AccessToken,\n\t\t    ClockDrift = _ref.ClockDrift;\n\n\t\t_classCallCheck(this, CognitoUserSession);\n\n\t\tif (AccessToken == null || IdToken == null) {\n\t\t\tthrow new Error('Id token and Access Token must be present.');\n\t\t}\n\n\t\tthis.idToken = IdToken;\n\t\tthis.refreshToken = RefreshToken;\n\t\tthis.accessToken = AccessToken;\n\t\tthis.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n\t}\n\n\t/**\n  * @returns {CognitoIdToken} the session's Id token\n  */\n\n\n\tCognitoUserSession.prototype.getIdToken = function getIdToken() {\n\t\treturn this.idToken;\n\t};\n\n\t/**\n  * @returns {CognitoRefreshToken} the session's refresh token\n  */\n\n\n\tCognitoUserSession.prototype.getRefreshToken = function getRefreshToken() {\n\t\treturn this.refreshToken;\n\t};\n\n\t/**\n  * @returns {CognitoAccessToken} the session's access token\n  */\n\n\n\tCognitoUserSession.prototype.getAccessToken = function getAccessToken() {\n\t\treturn this.accessToken;\n\t};\n\n\t/**\n  * @returns {int} the session's clock drift\n  */\n\n\n\tCognitoUserSession.prototype.getClockDrift = function getClockDrift() {\n\t\treturn this.clockDrift;\n\t};\n\n\t/**\n  * @returns {int} the computer's clock drift\n  */\n\n\n\tCognitoUserSession.prototype.calculateClockDrift = function calculateClockDrift() {\n\t\tvar now = Math.floor(new Date() / 1000);\n\t\tvar iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n\n\t\treturn now - iat;\n\t};\n\n\t/**\n  * Checks to see if the session is still valid based on session expiry information found\n  * in tokens and the current time (adjusted with clock drift)\n  * @returns {boolean} if the session is still valid\n  */\n\n\n\tCognitoUserSession.prototype.isValid = function isValid() {\n\t\tvar now = Math.floor(new Date() / 1000);\n\t\tvar adjusted = now - this.clockDrift;\n\n\t\treturn adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n\t};\n\n\treturn CognitoUserSession;\n}();\n\nexport default CognitoUserSession;"]},"metadata":{},"sourceType":"module"}