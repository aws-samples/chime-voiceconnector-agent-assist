{"ast":null,"code":"var AWS = require('../core');\n\nvar EventEmitter = require('events').EventEmitter;\n\nrequire('../http');\n/**\n * @api private\n */\n\n\nAWS.XHRClient = AWS.util.inherit({\n  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {\n    var self = this;\n    var endpoint = httpRequest.endpoint;\n    var emitter = new EventEmitter();\n    var href = endpoint.protocol + '//' + endpoint.hostname;\n\n    if (endpoint.port !== 80 && endpoint.port !== 443) {\n      href += ':' + endpoint.port;\n    }\n\n    href += httpRequest.path;\n    var xhr = new XMLHttpRequest(),\n        headersEmitted = false;\n    httpRequest.stream = xhr;\n    xhr.addEventListener('readystatechange', function () {\n      try {\n        if (xhr.status === 0) return; // 0 code is invalid\n      } catch (e) {\n        return;\n      }\n\n      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {\n        emitter.statusCode = xhr.status;\n        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());\n        emitter.emit('headers', emitter.statusCode, emitter.headers, xhr.statusText);\n        headersEmitted = true;\n      }\n\n      if (this.readyState === this.DONE) {\n        self.finishRequest(xhr, emitter);\n      }\n    }, false);\n    xhr.upload.addEventListener('progress', function (evt) {\n      emitter.emit('sendProgress', evt);\n    });\n    xhr.addEventListener('progress', function (evt) {\n      emitter.emit('receiveProgress', evt);\n    }, false);\n    xhr.addEventListener('timeout', function () {\n      errCallback(AWS.util.error(new Error('Timeout'), {\n        code: 'TimeoutError'\n      }));\n    }, false);\n    xhr.addEventListener('error', function () {\n      errCallback(AWS.util.error(new Error('Network Failure'), {\n        code: 'NetworkingError'\n      }));\n    }, false);\n    xhr.addEventListener('abort', function () {\n      errCallback(AWS.util.error(new Error('Request aborted'), {\n        code: 'RequestAbortedError'\n      }));\n    }, false);\n    callback(emitter);\n    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);\n    AWS.util.each(httpRequest.headers, function (key, value) {\n      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {\n        xhr.setRequestHeader(key, value);\n      }\n    });\n\n    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {\n      xhr.timeout = httpOptions.timeout;\n    }\n\n    if (httpOptions.xhrWithCredentials) {\n      xhr.withCredentials = true;\n    }\n\n    try {\n      xhr.responseType = 'arraybuffer';\n    } catch (e) {}\n\n    try {\n      if (httpRequest.body) {\n        xhr.send(httpRequest.body);\n      } else {\n        xhr.send();\n      }\n    } catch (err) {\n      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {\n        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly\n      } else {\n        throw err;\n      }\n    }\n\n    return emitter;\n  },\n  parseHeaders: function parseHeaders(rawHeaders) {\n    var headers = {};\n    AWS.util.arrayEach(rawHeaders.split(/\\r?\\n/), function (line) {\n      var key = line.split(':', 1)[0];\n      var value = line.substring(key.length + 2);\n      if (key.length > 0) headers[key.toLowerCase()] = value;\n    });\n    return headers;\n  },\n  finishRequest: function finishRequest(xhr, emitter) {\n    var buffer;\n\n    if (xhr.responseType === 'arraybuffer' && xhr.response) {\n      var ab = xhr.response;\n      buffer = new AWS.util.Buffer(ab.byteLength);\n      var view = new Uint8Array(ab);\n\n      for (var i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n      }\n    }\n\n    try {\n      if (!buffer && typeof xhr.responseText === 'string') {\n        buffer = new AWS.util.Buffer(xhr.responseText);\n      }\n    } catch (e) {}\n\n    if (buffer) emitter.emit('data', buffer);\n    emitter.emit('end');\n  }\n});\n/**\n * @api private\n */\n\nAWS.HttpClient.prototype = AWS.XHRClient.prototype;\n/**\n * @api private\n */\n\nAWS.HttpClient.streamsApiVersion = 1;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/http/xhr.js"],"names":["AWS","require","EventEmitter","XHRClient","util","inherit","handleRequest","httpRequest","httpOptions","callback","errCallback","self","endpoint","emitter","href","protocol","hostname","port","path","xhr","XMLHttpRequest","headersEmitted","stream","addEventListener","status","e","readyState","HEADERS_RECEIVED","statusCode","headers","parseHeaders","getAllResponseHeaders","emit","statusText","DONE","finishRequest","upload","evt","error","Error","code","open","method","xhrAsync","each","key","value","setRequestHeader","timeout","xhrWithCredentials","withCredentials","responseType","body","send","err","buffer","rawHeaders","arrayEach","split","line","substring","length","toLowerCase","response","ab","Buffer","byteLength","view","Uint8Array","i","responseText","HttpClient","prototype","streamsApiVersion"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar EventEmitter = require('events').EventEmitter;\nrequire('../http');\n\n/**\n * @api private\n */\nAWS.XHRClient = AWS.util.inherit({\n  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {\n    var self = this;\n    var endpoint = httpRequest.endpoint;\n    var emitter = new EventEmitter();\n    var href = endpoint.protocol + '//' + endpoint.hostname;\n    if (endpoint.port !== 80 && endpoint.port !== 443) {\n      href += ':' + endpoint.port;\n    }\n    href += httpRequest.path;\n\n    var xhr = new XMLHttpRequest(), headersEmitted = false;\n    httpRequest.stream = xhr;\n\n    xhr.addEventListener('readystatechange', function() {\n      try {\n        if (xhr.status === 0) return; // 0 code is invalid\n      } catch (e) { return; }\n\n      if (this.readyState >= this.HEADERS_RECEIVED && !headersEmitted) {\n        emitter.statusCode = xhr.status;\n        emitter.headers = self.parseHeaders(xhr.getAllResponseHeaders());\n        emitter.emit(\n          'headers',\n          emitter.statusCode,\n          emitter.headers,\n          xhr.statusText\n        );\n        headersEmitted = true;\n      }\n      if (this.readyState === this.DONE) {\n        self.finishRequest(xhr, emitter);\n      }\n    }, false);\n    xhr.upload.addEventListener('progress', function (evt) {\n      emitter.emit('sendProgress', evt);\n    });\n    xhr.addEventListener('progress', function (evt) {\n      emitter.emit('receiveProgress', evt);\n    }, false);\n    xhr.addEventListener('timeout', function () {\n      errCallback(AWS.util.error(new Error('Timeout'), {code: 'TimeoutError'}));\n    }, false);\n    xhr.addEventListener('error', function () {\n      errCallback(AWS.util.error(new Error('Network Failure'), {\n        code: 'NetworkingError'\n      }));\n    }, false);\n    xhr.addEventListener('abort', function () {\n      errCallback(AWS.util.error(new Error('Request aborted'), {\n        code: 'RequestAbortedError'\n      }));\n    }, false);\n\n    callback(emitter);\n    xhr.open(httpRequest.method, href, httpOptions.xhrAsync !== false);\n    AWS.util.each(httpRequest.headers, function (key, value) {\n      if (key !== 'Content-Length' && key !== 'User-Agent' && key !== 'Host') {\n        xhr.setRequestHeader(key, value);\n      }\n    });\n\n    if (httpOptions.timeout && httpOptions.xhrAsync !== false) {\n      xhr.timeout = httpOptions.timeout;\n    }\n\n    if (httpOptions.xhrWithCredentials) {\n      xhr.withCredentials = true;\n    }\n    try { xhr.responseType = 'arraybuffer'; } catch (e) {}\n\n    try {\n      if (httpRequest.body) {\n        xhr.send(httpRequest.body);\n      } else {\n        xhr.send();\n      }\n    } catch (err) {\n      if (httpRequest.body && typeof httpRequest.body.buffer === 'object') {\n        xhr.send(httpRequest.body.buffer); // send ArrayBuffer directly\n      } else {\n        throw err;\n      }\n    }\n\n    return emitter;\n  },\n\n  parseHeaders: function parseHeaders(rawHeaders) {\n    var headers = {};\n    AWS.util.arrayEach(rawHeaders.split(/\\r?\\n/), function (line) {\n      var key = line.split(':', 1)[0];\n      var value = line.substring(key.length + 2);\n      if (key.length > 0) headers[key.toLowerCase()] = value;\n    });\n    return headers;\n  },\n\n  finishRequest: function finishRequest(xhr, emitter) {\n    var buffer;\n    if (xhr.responseType === 'arraybuffer' && xhr.response) {\n      var ab = xhr.response;\n      buffer = new AWS.util.Buffer(ab.byteLength);\n      var view = new Uint8Array(ab);\n      for (var i = 0; i < buffer.length; ++i) {\n        buffer[i] = view[i];\n      }\n    }\n\n    try {\n      if (!buffer && typeof xhr.responseText === 'string') {\n        buffer = new AWS.util.Buffer(xhr.responseText);\n      }\n    } catch (e) {}\n\n    if (buffer) emitter.emit('data', buffer);\n    emitter.emit('end');\n  }\n});\n\n/**\n * @api private\n */\nAWS.HttpClient.prototype = AWS.XHRClient.prototype;\n\n/**\n * @api private\n */\nAWS.HttpClient.streamsApiVersion = 1;\n"]},"metadata":{},"sourceType":"script"}