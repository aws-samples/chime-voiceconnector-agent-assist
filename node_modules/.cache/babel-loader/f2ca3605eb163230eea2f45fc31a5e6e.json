{"ast":null,"code":"/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport { JS } from '@aws-amplify/core';\nvar HTTP_PORT = '80';\nvar HTTPS_PORT = '443';\nvar DEFAULT_PORT = RegExp(':(' + HTTP_PORT + '|' + HTTPS_PORT + ')$');\nvar a = JS.browserOrNode().isBrowser ? document.createElement('a') : null;\nvar cache = {};\n/**\n * Parses the given url and returns an object mimicing a `Location` object.\n * @param {string} url The url to parse.\n * @return {!Object} An object with the same properties as a `Location`.\n */\n\nexport default function parseUrl(u) {\n  var url = u; // All falsy values (as well as \".\") should map to the current URL.\n\n  url = !url || url === '.' ? location.href : url;\n  if (cache[url]) return cache[url];\n  a.href = url; // When parsing file relative paths (e.g. `../index.html`), IE will correctly\n  // resolve the `href` property but will keep the `..` in the `path` property.\n  // It will also not include the `host` or `hostname` properties. Furthermore,\n  // IE will sometimes return no protocol or just a colon, especially for things\n  // like relative protocol URLs (e.g. \"//google.com\").\n  // To workaround all of these issues, we reparse with the full URL from the\n  // `href` property.\n\n  if (url.charAt(0) === '.' || url.charAt(0) === '/') return parseUrl(a.href); // Don't include default ports.\n\n  var port = a.port === HTTP_PORT || a.port === HTTPS_PORT ? '' : a.port; // PhantomJS sets the port to \"0\" when using the file: protocol.\n\n  port = port === '0' ? '' : port; // Sometimes IE incorrectly includes a port for default ports\n  // (e.g. `:80` or `:443`) even when no port is specified in the URL.\n  // http://bit.ly/1rQNoMg\n\n  var host = a.host.replace(DEFAULT_PORT, ''); // Not all browser support `origin` so we have to build it.\n\n  var origin = a['origin'] ? a['origin'] : a.protocol + '//' + host; // Sometimes IE doesn't include the leading slash for pathname.\n  // http://bit.ly/1rQNoMg\n\n  var pathname = a.pathname.charAt(0) === '/' ? a.pathname : '/' + a.pathname;\n  return cache[url] = {\n    hash: a.hash,\n    host: host,\n    hostname: a.hostname,\n    href: a.href,\n    origin: origin,\n    pathname: pathname,\n    port: port,\n    protocol: a.protocol,\n    search: a.search\n  };\n}","map":{"version":3,"sources":["../../../src/vendor/dom-utils/parse-url.ts"],"names":[],"mappings":"AAAA;;;AAIA,SAAS,EAAT,QAAmB,mBAAnB;AAEA,IAAM,SAAS,GAAG,IAAlB;AACA,IAAM,UAAU,GAAG,KAAnB;AACA,IAAM,YAAY,GAAG,MAAM,CAAC,OAAO,SAAP,GAAmB,GAAnB,GAAyB,UAAzB,GAAsC,IAAvC,CAA3B;AAEA,IAAM,CAAC,GAAG,EAAE,CAAC,aAAH,GAAmB,SAAnB,GAA+B,QAAQ,CAAC,aAAT,CAAuB,GAAvB,CAA/B,GAA6D,IAAvE;AACA,IAAM,KAAK,GAAG,EAAd;AAEA;;;;;;AAKA,eAAc,SAAU,QAAV,CAAmB,CAAnB,EAAoB;AACjC,MAAI,GAAG,GAAG,CAAV,CADiC,CAEjC;;AACA,EAAA,GAAG,GAAG,CAAC,GAAD,IAAQ,GAAG,KAAK,GAAhB,GAAsB,QAAQ,CAAC,IAA/B,GAAsC,GAA5C;AAEA,MAAI,KAAK,CAAC,GAAD,CAAT,EAAgB,OAAO,KAAK,CAAC,GAAD,CAAZ;AAEhB,EAAA,CAAC,CAAC,IAAF,GAAS,GAAT,CAPiC,CASjC;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI,GAAG,CAAC,MAAJ,CAAW,CAAX,MAAkB,GAAlB,IAAyB,GAAG,CAAC,MAAJ,CAAW,CAAX,MAAkB,GAA/C,EAAoD,OAAO,QAAQ,CAAC,CAAC,CAAC,IAAH,CAAf,CAhBnB,CAkBjC;;AACA,MAAI,IAAI,GAAG,CAAC,CAAC,IAAF,KAAW,SAAX,IAAwB,CAAC,CAAC,IAAF,KAAW,UAAnC,GAAgD,EAAhD,GAAqD,CAAC,CAAC,IAAlE,CAnBiC,CAqBjC;;AACA,EAAA,IAAI,GAAG,IAAI,KAAK,GAAT,GAAe,EAAf,GAAoB,IAA3B,CAtBiC,CAwBjC;AACA;AACA;;AACA,MAAM,IAAI,GAAG,CAAC,CAAC,IAAF,CAAO,OAAP,CAAe,YAAf,EAA6B,EAA7B,CAAb,CA3BiC,CA6BjC;;AACA,MAAM,MAAM,GAAG,CAAC,CAAC,QAAD,CAAD,GAAc,CAAC,CAAC,QAAD,CAAf,GAA4B,CAAC,CAAC,QAAF,GAAa,IAAb,GAAoB,IAA/D,CA9BiC,CAgCjC;AACA;;AACA,MAAM,QAAQ,GAAG,CAAC,CAAC,QAAF,CAAW,MAAX,CAAkB,CAAlB,MAAyB,GAAzB,GAA+B,CAAC,CAAC,QAAjC,GAA4C,MAAM,CAAC,CAAC,QAArE;AAEA,SAAQ,KAAK,CAAC,GAAD,CAAL,GAAa;AACpB,IAAA,IAAI,EAAE,CAAC,CAAC,IADY;AAEpB,IAAA,IAAI,EAAA,IAFgB;AAGpB,IAAA,QAAQ,EAAE,CAAC,CAAC,QAHQ;AAIpB,IAAA,IAAI,EAAE,CAAC,CAAC,IAJY;AAKpB,IAAA,MAAM,EAAA,MALc;AAMpB,IAAA,QAAQ,EAAA,QANY;AAOpB,IAAA,IAAI,EAAA,IAPgB;AAQpB,IAAA,QAAQ,EAAE,CAAC,CAAC,QARQ;AASpB,IAAA,MAAM,EAAE,CAAC,CAAC;AATU,GAArB;AAWA","sourceRoot":"","sourcesContent":["/**\n * Copyright (c) 2017, Philip Walton <philip@philipwalton.com>\n */\nimport { JS } from '@aws-amplify/core';\nvar HTTP_PORT = '80';\nvar HTTPS_PORT = '443';\nvar DEFAULT_PORT = RegExp(':(' + HTTP_PORT + '|' + HTTPS_PORT + ')$');\nvar a = JS.browserOrNode().isBrowser ? document.createElement('a') : null;\nvar cache = {};\n/**\n * Parses the given url and returns an object mimicing a `Location` object.\n * @param {string} url The url to parse.\n * @return {!Object} An object with the same properties as a `Location`.\n */\nexport default function parseUrl(u) {\n    var url = u;\n    // All falsy values (as well as \".\") should map to the current URL.\n    url = !url || url === '.' ? location.href : url;\n    if (cache[url])\n        return cache[url];\n    a.href = url;\n    // When parsing file relative paths (e.g. `../index.html`), IE will correctly\n    // resolve the `href` property but will keep the `..` in the `path` property.\n    // It will also not include the `host` or `hostname` properties. Furthermore,\n    // IE will sometimes return no protocol or just a colon, especially for things\n    // like relative protocol URLs (e.g. \"//google.com\").\n    // To workaround all of these issues, we reparse with the full URL from the\n    // `href` property.\n    if (url.charAt(0) === '.' || url.charAt(0) === '/')\n        return parseUrl(a.href);\n    // Don't include default ports.\n    var port = a.port === HTTP_PORT || a.port === HTTPS_PORT ? '' : a.port;\n    // PhantomJS sets the port to \"0\" when using the file: protocol.\n    port = port === '0' ? '' : port;\n    // Sometimes IE incorrectly includes a port for default ports\n    // (e.g. `:80` or `:443`) even when no port is specified in the URL.\n    // http://bit.ly/1rQNoMg\n    var host = a.host.replace(DEFAULT_PORT, '');\n    // Not all browser support `origin` so we have to build it.\n    var origin = a['origin'] ? a['origin'] : a.protocol + '//' + host;\n    // Sometimes IE doesn't include the leading slash for pathname.\n    // http://bit.ly/1rQNoMg\n    var pathname = a.pathname.charAt(0) === '/' ? a.pathname : '/' + a.pathname;\n    return (cache[url] = {\n        hash: a.hash,\n        host: host,\n        hostname: a.hostname,\n        href: a.href,\n        origin: origin,\n        pathname: pathname,\n        port: port,\n        protocol: a.protocol,\n        search: a.search,\n    });\n}\n//# sourceMappingURL=parse-url.js.map"]},"metadata":{},"sourceType":"module"}