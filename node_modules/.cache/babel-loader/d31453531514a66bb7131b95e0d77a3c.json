{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { getNamedType, isLeafType } from '../../type/definition';\nexport function noSubselectionAllowedMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since \") + \"type \\\"\".concat(type, \"\\\" has no subfields.\");\n}\nexport function requiredSubselectionMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" of type \\\"\").concat(type, \"\\\" must have a \") + \"selection of subfields. Did you mean \\\"\".concat(fieldName, \" { ... }\\\"?\");\n}\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\nexport function ScalarLeafs(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            context.reportError(new GraphQLError(noSubselectionAllowedMessage(node.name.value, inspect(type)), [selectionSet]));\n          }\n        } else if (!selectionSet) {\n          context.reportError(new GraphQLError(requiredSubselectionMessage(node.name.value, inspect(type)), [node]));\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/validation/rules/ScalarLeafs.mjs"],"names":["inspect","GraphQLError","getNamedType","isLeafType","noSubselectionAllowedMessage","fieldName","type","concat","requiredSubselectionMessage","ScalarLeafs","context","Field","node","getType","selectionSet","reportError","name","value"],"mappings":"AAAA;;;;;;;;AAQA,OAAOA,OAAP,MAAoB,uBAApB;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,uBAAzC;AACA,OAAO,SAASC,4BAAT,CAAsCC,SAAtC,EAAiDC,IAAjD,EAAuD;AAC5D,SAAO,WAAWC,MAAX,CAAkBF,SAAlB,EAA6B,qCAA7B,IAAsE,UAAUE,MAAV,CAAiBD,IAAjB,EAAuB,sBAAvB,CAA7E;AACD;AACD,OAAO,SAASE,2BAAT,CAAqCH,SAArC,EAAgDC,IAAhD,EAAsD;AAC3D,SAAO,WAAWC,MAAX,CAAkBF,SAAlB,EAA6B,eAA7B,EAA8CE,MAA9C,CAAqDD,IAArD,EAA2D,iBAA3D,IAAgF,0CAA0CC,MAA1C,CAAiDF,SAAjD,EAA4D,aAA5D,CAAvF;AACD;AACD;;;;;;;AAOA,OAAO,SAASI,WAAT,CAAqBC,OAArB,EAA8B;AACnC,SAAO;AACLC,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,IAAf,EAAqB;AAC1B,UAAIN,IAAI,GAAGI,OAAO,CAACG,OAAR,EAAX;AACA,UAAIC,YAAY,GAAGF,IAAI,CAACE,YAAxB;;AAEA,UAAIR,IAAJ,EAAU;AACR,YAAIH,UAAU,CAACD,YAAY,CAACI,IAAD,CAAb,CAAd,EAAoC;AAClC,cAAIQ,YAAJ,EAAkB;AAChBJ,YAAAA,OAAO,CAACK,WAAR,CAAoB,IAAId,YAAJ,CAAiBG,4BAA4B,CAACQ,IAAI,CAACI,IAAL,CAAUC,KAAX,EAAkBjB,OAAO,CAACM,IAAD,CAAzB,CAA7C,EAA+E,CAACQ,YAAD,CAA/E,CAApB;AACD;AACF,SAJD,MAIO,IAAI,CAACA,YAAL,EAAmB;AACxBJ,UAAAA,OAAO,CAACK,WAAR,CAAoB,IAAId,YAAJ,CAAiBO,2BAA2B,CAACI,IAAI,CAACI,IAAL,CAAUC,KAAX,EAAkBjB,OAAO,CAACM,IAAD,CAAzB,CAA5C,EAA8E,CAACM,IAAD,CAA9E,CAApB;AACD;AACF;AACF;AAdI,GAAP;AAgBD","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport inspect from '../../jsutils/inspect';\nimport { GraphQLError } from '../../error/GraphQLError';\nimport { getNamedType, isLeafType } from '../../type/definition';\nexport function noSubselectionAllowedMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" must not have a selection since \") + \"type \\\"\".concat(type, \"\\\" has no subfields.\");\n}\nexport function requiredSubselectionMessage(fieldName, type) {\n  return \"Field \\\"\".concat(fieldName, \"\\\" of type \\\"\").concat(type, \"\\\" must have a \") + \"selection of subfields. Did you mean \\\"\".concat(fieldName, \" { ... }\\\"?\");\n}\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\n\nexport function ScalarLeafs(context) {\n  return {\n    Field: function Field(node) {\n      var type = context.getType();\n      var selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            context.reportError(new GraphQLError(noSubselectionAllowedMessage(node.name.value, inspect(type)), [selectionSet]));\n          }\n        } else if (!selectionSet) {\n          context.reportError(new GraphQLError(requiredSubselectionMessage(node.name.value, inspect(type)), [node]));\n        }\n      }\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}