{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Credentials } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport * as Rekognition from 'aws-sdk/clients/rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport * as Textract from 'aws-sdk/clients/textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\n\nvar AmazonAIIdentifyPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Rekognition.Image>} - Promise resolving to the converted source object.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: parsedURL[2]\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: buffer\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: buffer\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        } // everything else can be directly passed to Rekognition / Textract.\n\n\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, format, featureTypes, textractParam_1, rekognitionParam, param;\n\n        var _this = this;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _f.sent();\n              if (!credentials) return [2\n              /*return*/\n              , rej('No credentials')];\n              _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              this.textract = new Textract({\n                region: region,\n                credentials: credentials\n              });\n              return [4\n              /*yield*/\n              , this.configureSource(input.text.source).then(function (data) {\n                return inputDocument = data;\n              }).catch(function (err) {\n                rej(err);\n              })];\n\n            case 2:\n              _f.sent();\n\n              format = input.text.format || configFormat;\n              featureTypes = [];\n              if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n              if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n\n              if (featureTypes.length === 0) {\n                textractParam_1 = {\n                  Document: inputDocument\n                };\n                rekognitionParam = {\n                  Image: inputDocument\n                };\n                this.rekognition.detectText(rekognitionParam, function (rekognitionErr, rekognitionData) {\n                  if (rekognitionErr) return rej(rekognitionErr);\n                  var rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n\n                  if (rekognitionResponse.text.words.length < 50) {\n                    // did not hit the word limit, return the data\n                    return res(rekognitionResponse);\n                  }\n\n                  _this.textract.detectDocumentText(textractParam_1, function (textractErr, textractData) {\n                    if (textractErr) return rej(textractErr); // use the service that identified more texts.\n\n                    if (rekognitionData.TextDetections.length > textractData.Blocks.length) {\n                      return res(rekognitionResponse);\n                    } else {\n                      return res(categorizeTextractBlocks(textractData.Blocks));\n                    }\n                  });\n                });\n              } else {\n                param = {\n                  Document: inputDocument,\n                  FeatureTypes: featureTypes\n                };\n                this.textract.analyzeDocument(param, function (err, data) {\n                  if (err) return rej(err);\n                  var blocks = data.Blocks;\n                  res(categorizeTextractBlocks(blocks));\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, type, inputImage, param, servicePromises, entityType;\n\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _f.sent();\n              if (!credentials) return [2\n              /*return*/\n              , rej('No credentials')];\n              _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              return [4\n              /*yield*/\n              , this.configureSource(input.labels.source).then(function (data) {\n                inputImage = data;\n              }).catch(function (err) {\n                return rej(err);\n              })];\n\n            case 2:\n              _f.sent();\n\n              param = {\n                Image: inputImage\n              };\n              servicePromises = [];\n              entityType = input.labels.type || type;\n\n              if (entityType === 'LABELS' || entityType === 'ALL') {\n                servicePromises.push(this.detectLabels(param));\n              }\n\n              if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                servicePromises.push(this.detectModerationLabels(param));\n              } // if (servicePromises.length === 0) {\n              //     rej('You must specify entity type: LABELS | UNSAFE | ALL');\n              // }\n\n\n              Promise.all(servicePromises).then(function (data) {\n                var identifyResult = {}; // concatenate resolved promises to a single object\n\n                data.forEach(function (val) {\n                  identifyResult = __assign(__assign({}, identifyResult), val);\n                });\n                res(identifyResult);\n              }).catch(function (err) {\n                return rej(err);\n              });\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      _this.rekognition.detectLabels(param, function (err, data) {\n        if (err) return rej(err);\n        if (!data.Labels) return res({\n          labels: null\n        }); // no image was detected\n\n        var detectLabelData = data.Labels.map(function (val) {\n          var boxes = val.Instances ? val.Instances.map(function (val) {\n            return makeCamelCase(val.BoundingBox);\n          }) : undefined;\n          return {\n            name: val.Name,\n            boundingBoxes: boxes,\n            metadata: {\n              confidence: val.Confidence,\n              parents: makeCamelCaseArray(val.Parents)\n            }\n          };\n        });\n        return res({\n          labels: detectLabelData\n        });\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      _this.rekognition.detectModerationLabels(param, function (err, data) {\n        if (err) return rej(err);\n\n        if (data.ModerationLabels.length !== 0) {\n          return res({\n            unsafe: 'YES'\n          });\n        } else {\n          return res({\n            unsafe: 'NO'\n          });\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    var _this = this;\n\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, _j, _k, collectionId, _l, maxFaces, updatedParam;\n\n        var _this = this;\n\n        return __generator(this, function (_m) {\n          switch (_m.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , Credentials.get()];\n\n            case 1:\n              credentials = _m.sent();\n              if (!credentials) return [2\n              /*return*/\n              , rej('No credentials')];\n              _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h; // default arguments\n\n              this.rekognition = new Rekognition({\n                region: region,\n                credentials: credentials\n              });\n              return [4\n              /*yield*/\n              , this.configureSource(input.entities.source).then(function (data) {\n                return inputImage = data;\n              }).catch(function (err) {\n                return rej(err);\n              })];\n\n            case 2:\n              _m.sent();\n\n              param = {\n                Image: inputImage\n              };\n\n              if (isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection) {\n                if (!celebrityDetectionEnabled) {\n                  return [2\n                  /*return*/\n                  , rej('Error: You have to enable celebrity detection first')];\n                }\n\n                this.rekognition.recognizeCelebrities(param, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.CelebrityFaces.map(function (celebrity) {\n                    return {\n                      boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                      landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                      metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                        pose: makeCamelCase(celebrity.Face.Pose)\n                      })\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              } else if (isIdentifyFromCollection(input.entities) && input.entities.collection) {\n                _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                updatedParam = __assign(__assign({}, param), {\n                  CollectionId: collectionId,\n                  MaxFaces: maxFaces\n                });\n                this.rekognition.searchFacesByImage(updatedParam, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.FaceMatches.map(function (val) {\n                    return {\n                      boundingBox: makeCamelCase(val.Face.BoundingBox),\n                      metadata: {\n                        externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                        similarity: val.Similarity\n                      }\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              } else {\n                this.rekognition.detectFaces(param, function (err, data) {\n                  if (err) return rej(err);\n                  var faces = data.FaceDetails.map(function (detail) {\n                    // face attributes keys we want to extract from Rekognition's response\n                    var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n                    var faceAttributes = makeCamelCase(detail, attributeKeys);\n\n                    if (detail.Emotions) {\n                      faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                        return emotion.Type;\n                      });\n                    }\n\n                    return {\n                      boundingBox: makeCamelCase(detail.BoundingBox),\n                      landmarks: makeCamelCaseArray(detail.Landmarks),\n                      ageRange: makeCamelCase(detail.AgeRange),\n                      attributes: makeCamelCase(detail, attributeKeys),\n                      metadata: {\n                        confidence: detail.Confidence,\n                        pose: makeCamelCase(detail.Pose)\n                      }\n                    };\n                  });\n                  res({\n                    entities: faces\n                  });\n                });\n              }\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\n\nexport default AmazonAIIdentifyPredictionsProvider;","map":{"version":3,"sources":["../../src/Providers/AmazonAIIdentifyPredictionsProvider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Credentials } from '@aws-amplify/core';\nimport Storage from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport * as Rekognition from 'aws-sdk/clients/rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection, } from '../types';\nimport * as Textract from 'aws-sdk/clients/textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks, } from './IdentifyTextUtils';\nvar AmazonAIIdentifyPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIIdentifyPredictionsProvider, _super);\n    function AmazonAIIdentifyPredictionsProvider() {\n        return _super.call(this) || this;\n    }\n    AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIIdentifyPredictionsProvider';\n    };\n    /**\n     * Verify user input source and converts it into source object readable by Rekognition and Textract.\n     * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n     * @param {IdentifySource} source - User input source that directs to the object user wants\n     * to identify (storage, file, or bytes).\n     * @return {Promise<Rekognition.Image>} - Promise resolving to the converted source object.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n        return new Promise(function (res, rej) {\n            if (isStorageSource(source)) {\n                var storageConfig = {\n                    level: source.level,\n                    identityId: source.identityId,\n                };\n                Storage.get(source.key, storageConfig)\n                    .then(function (url) {\n                    var parser = /https:\\/\\/([a-zA-Z0-9%-_.]+)\\.s3\\.[A-Za-z0-9%-._~]+\\/([a-zA-Z0-9%-._~/]+)\\?/;\n                    var parsedURL = url.match(parser);\n                    if (parsedURL.length < 3)\n                        rej('Invalid S3 key was given.');\n                    res({ S3Object: { Bucket: parsedURL[1], Name: parsedURL[2] } });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isFileSource(source)) {\n                blobToArrayBuffer(source.file)\n                    .then(function (buffer) {\n                    res({ Bytes: buffer });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isBytesSource(source)) {\n                var bytes = source.bytes;\n                if (bytes instanceof Blob) {\n                    blobToArrayBuffer(bytes)\n                        .then(function (buffer) {\n                        res({ Bytes: buffer });\n                    })\n                        .catch(function (err) { return rej(err); });\n                }\n                // everything else can be directly passed to Rekognition / Textract.\n                res({ Bytes: bytes });\n            }\n            else {\n                rej('Input source is not configured correctly.');\n            }\n        });\n    };\n    /**\n     * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n     * image and converts it into machine-readable text.\n     * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n     * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, format, featureTypes, textractParam_1, rekognitionParam, param;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, rej('No credentials')];\n                        _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n                        this.rekognition = new Rekognition({ region: region, credentials: credentials });\n                        this.textract = new Textract({ region: region, credentials: credentials });\n                        return [4 /*yield*/, this.configureSource(input.text.source)\n                                .then(function (data) { return (inputDocument = data); })\n                                .catch(function (err) {\n                                rej(err);\n                            })];\n                    case 2:\n                        _f.sent();\n                        format = input.text.format || configFormat;\n                        featureTypes = [];\n                        if (format === 'FORM' || format === 'ALL')\n                            featureTypes.push('FORMS');\n                        if (format === 'TABLE' || format === 'ALL')\n                            featureTypes.push('TABLES');\n                        if (featureTypes.length === 0) {\n                            textractParam_1 = {\n                                Document: inputDocument,\n                            };\n                            rekognitionParam = {\n                                Image: inputDocument,\n                            };\n                            this.rekognition.detectText(rekognitionParam, function (rekognitionErr, rekognitionData) {\n                                if (rekognitionErr)\n                                    return rej(rekognitionErr);\n                                var rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n                                if (rekognitionResponse.text.words.length < 50) {\n                                    // did not hit the word limit, return the data\n                                    return res(rekognitionResponse);\n                                }\n                                _this.textract.detectDocumentText(textractParam_1, function (textractErr, textractData) {\n                                    if (textractErr)\n                                        return rej(textractErr);\n                                    // use the service that identified more texts.\n                                    if (rekognitionData.TextDetections.length >\n                                        textractData.Blocks.length) {\n                                        return res(rekognitionResponse);\n                                    }\n                                    else {\n                                        return res(categorizeTextractBlocks(textractData.Blocks));\n                                    }\n                                });\n                            });\n                        }\n                        else {\n                            param = {\n                                Document: inputDocument,\n                                FeatureTypes: featureTypes,\n                            };\n                            this.textract.analyzeDocument(param, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var blocks = data.Blocks;\n                                res(categorizeTextractBlocks(blocks));\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Identify instances of real world entities from an image and if it contains unsafe content.\n     * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, type, inputImage, param, servicePromises, entityType;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, rej('No credentials')];\n                        _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n                        this.rekognition = new Rekognition({ region: region, credentials: credentials });\n                        return [4 /*yield*/, this.configureSource(input.labels.source)\n                                .then(function (data) {\n                                inputImage = data;\n                            })\n                                .catch(function (err) {\n                                return rej(err);\n                            })];\n                    case 2:\n                        _f.sent();\n                        param = { Image: inputImage };\n                        servicePromises = [];\n                        entityType = input.labels.type || type;\n                        if (entityType === 'LABELS' || entityType === 'ALL') {\n                            servicePromises.push(this.detectLabels(param));\n                        }\n                        if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                            servicePromises.push(this.detectModerationLabels(param));\n                        }\n                        // if (servicePromises.length === 0) {\n                        //     rej('You must specify entity type: LABELS | UNSAFE | ALL');\n                        // }\n                        Promise.all(servicePromises)\n                            .then(function (data) {\n                            var identifyResult = {};\n                            // concatenate resolved promises to a single object\n                            data.forEach(function (val) {\n                                identifyResult = __assign(__assign({}, identifyResult), val);\n                            });\n                            res(identifyResult);\n                        })\n                            .catch(function (err) { return rej(err); });\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    /**\n     * Calls Rekognition.detectLabels and organizes the returned data.\n     * @param {Rekognition.DetectLabelsRequest} param - parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n        var _this = this;\n        return new Promise(function (res, rej) {\n            _this.rekognition.detectLabels(param, function (err, data) {\n                if (err)\n                    return rej(err);\n                if (!data.Labels)\n                    return res({ labels: null }); // no image was detected\n                var detectLabelData = data.Labels.map(function (val) {\n                    var boxes = val.Instances\n                        ? val.Instances.map(function (val) { return makeCamelCase(val.BoundingBox); })\n                        : undefined;\n                    return {\n                        name: val.Name,\n                        boundingBoxes: boxes,\n                        metadata: {\n                            confidence: val.Confidence,\n                            parents: makeCamelCaseArray(val.Parents),\n                        },\n                    };\n                });\n                return res({ labels: detectLabelData });\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectModerationLabels and organizes the returned data.\n     * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n        var _this = this;\n        return new Promise(function (res, rej) {\n            _this.rekognition.detectModerationLabels(param, function (err, data) {\n                if (err)\n                    return rej(err);\n                if (data.ModerationLabels.length !== 0) {\n                    return res({ unsafe: 'YES' });\n                }\n                else {\n                    return res({ unsafe: 'NO' });\n                }\n            });\n        });\n    };\n    /**\n     * Identify faces within an image that is provided as input, and match faces from a collection\n     * or identify celebrities.\n     * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n     * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n        var _this = this;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, _j, _k, collectionId, _l, maxFaces, updatedParam;\n            var _this = this;\n            return __generator(this, function (_m) {\n                switch (_m.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _m.sent();\n                        if (!credentials)\n                            return [2 /*return*/, rej('No credentials')];\n                        _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h;\n                        // default arguments\n                        this.rekognition = new Rekognition({ region: region, credentials: credentials });\n                        return [4 /*yield*/, this.configureSource(input.entities.source)\n                                .then(function (data) { return (inputImage = data); })\n                                .catch(function (err) {\n                                return rej(err);\n                            })];\n                    case 2:\n                        _m.sent();\n                        param = { Image: inputImage };\n                        if (isIdentifyCelebrities(input.entities) &&\n                            input.entities.celebrityDetection) {\n                            if (!celebrityDetectionEnabled) {\n                                return [2 /*return*/, rej('Error: You have to enable celebrity detection first')];\n                            }\n                            this.rekognition.recognizeCelebrities(param, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var faces = data.CelebrityFaces.map(function (celebrity) {\n                                    return {\n                                        boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                                        landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                                        metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), { pose: makeCamelCase(celebrity.Face.Pose) }),\n                                    };\n                                });\n                                res({ entities: faces });\n                            });\n                        }\n                        else if (isIdentifyFromCollection(input.entities) &&\n                            input.entities.collection) {\n                            _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                            updatedParam = __assign(__assign({}, param), { CollectionId: collectionId, MaxFaces: maxFaces });\n                            this.rekognition.searchFacesByImage(updatedParam, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var faces = data.FaceMatches.map(function (val) {\n                                    return {\n                                        boundingBox: makeCamelCase(val.Face.BoundingBox),\n                                        metadata: {\n                                            externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                                            similarity: val.Similarity,\n                                        },\n                                    };\n                                });\n                                res({ entities: faces });\n                            });\n                        }\n                        else {\n                            this.rekognition.detectFaces(param, function (err, data) {\n                                if (err)\n                                    return rej(err);\n                                var faces = data.FaceDetails.map(function (detail) {\n                                    // face attributes keys we want to extract from Rekognition's response\n                                    var attributeKeys = [\n                                        'Smile',\n                                        'Eyeglasses',\n                                        'Sunglasses',\n                                        'Gender',\n                                        'Beard',\n                                        'Mustache',\n                                        'EyesOpen',\n                                        'MouthOpen',\n                                    ];\n                                    var faceAttributes = makeCamelCase(detail, attributeKeys);\n                                    if (detail.Emotions) {\n                                        faceAttributes['emotions'] = detail.Emotions.map(function (emotion) { return emotion.Type; });\n                                    }\n                                    return {\n                                        boundingBox: makeCamelCase(detail.BoundingBox),\n                                        landmarks: makeCamelCaseArray(detail.Landmarks),\n                                        ageRange: makeCamelCase(detail.AgeRange),\n                                        attributes: makeCamelCase(detail, attributeKeys),\n                                        metadata: {\n                                            confidence: detail.Confidence,\n                                            pose: makeCamelCase(detail.Pose),\n                                        },\n                                    };\n                                });\n                                res({ entities: faces });\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n    };\n    AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n        return ('' + externalImageId).replace(/::/g, '/');\n    };\n    return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider));\nexport default AmazonAIIdentifyPredictionsProvider;\n//# sourceMappingURL=AmazonAIIdentifyPredictionsProvider.js.map"]},"metadata":{},"sourceType":"module"}