{"ast":null,"code":"var AWS = require('../core');\n\nrequire('../dynamodb/document_client');\n\nAWS.util.update(AWS.DynamoDB.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (request.service.config.dynamoDbCrc32) {\n      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n      request.addListener('extractData', this.checkCrc32);\n      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  checkCrc32: function checkCrc32(resp) {\n    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {\n      resp.data = null;\n      resp.error = AWS.util.error(new Error(), {\n        code: 'CRC32CheckFailed',\n        message: 'CRC32 integrity check failed',\n        retryable: true\n      });\n      resp.request.haltHandlersOnError();\n      throw resp.error;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  crc32IsValid: function crc32IsValid(resp) {\n    var crc = resp.httpResponse.headers['x-amz-crc32'];\n    if (!crc) return true; // no (valid) CRC32 header\n\n    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);\n  },\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 10,\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays(retryCount, err) {\n    var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);\n\n    if (typeof retryDelayOptions.base !== 'number') {\n      retryDelayOptions.base = 50; // default for dynamodb\n    }\n\n    var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions, err);\n    return delay;\n  }\n});","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/services/dynamodb.js"],"names":["AWS","require","util","update","DynamoDB","prototype","setupRequestListeners","request","service","config","dynamoDbCrc32","removeListener","EventListeners","Json","EXTRACT_DATA","addListener","checkCrc32","resp","httpResponse","streaming","crc32IsValid","data","error","Error","code","message","retryable","haltHandlersOnError","crc","headers","parseInt","crypto","crc32","body","defaultRetryCount","retryDelays","retryCount","err","retryDelayOptions","copy","base","delay","calculateRetryDelay"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACAA,OAAO,CAAC,6BAAD,CAAP;;AAEAD,GAAG,CAACE,IAAJ,CAASC,MAAT,CAAgBH,GAAG,CAACI,QAAJ,CAAaC,SAA7B,EAAwC;AACtC;;;AAGAC,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,OAA/B,EAAwC;AAC7D,QAAIA,OAAO,CAACC,OAAR,CAAgBC,MAAhB,CAAuBC,aAA3B,EAA0C;AACxCH,MAAAA,OAAO,CAACI,cAAR,CAAuB,aAAvB,EAAsCX,GAAG,CAACY,cAAJ,CAAmBC,IAAnB,CAAwBC,YAA9D;AACAP,MAAAA,OAAO,CAACQ,WAAR,CAAoB,aAApB,EAAmC,KAAKC,UAAxC;AACAT,MAAAA,OAAO,CAACQ,WAAR,CAAoB,aAApB,EAAmCf,GAAG,CAACY,cAAJ,CAAmBC,IAAnB,CAAwBC,YAA3D;AACD;AACF,GAVqC;;AAYtC;;;AAGAE,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACpC,QAAI,CAACA,IAAI,CAACC,YAAL,CAAkBC,SAAnB,IAAgC,CAACF,IAAI,CAACV,OAAL,CAAaC,OAAb,CAAqBY,YAArB,CAAkCH,IAAlC,CAArC,EAA8E;AAC5EA,MAAAA,IAAI,CAACI,IAAL,GAAY,IAAZ;AACAJ,MAAAA,IAAI,CAACK,KAAL,GAAatB,GAAG,CAACE,IAAJ,CAASoB,KAAT,CAAe,IAAIC,KAAJ,EAAf,EAA4B;AACvCC,QAAAA,IAAI,EAAE,kBADiC;AAEvCC,QAAAA,OAAO,EAAE,8BAF8B;AAGvCC,QAAAA,SAAS,EAAE;AAH4B,OAA5B,CAAb;AAKAT,MAAAA,IAAI,CAACV,OAAL,CAAaoB,mBAAb;AACA,YAAOV,IAAI,CAACK,KAAZ;AACD;AACF,GA1BqC;;AA4BtC;;;AAGAF,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBH,IAAtB,EAA4B;AACxC,QAAIW,GAAG,GAAGX,IAAI,CAACC,YAAL,CAAkBW,OAAlB,CAA0B,aAA1B,CAAV;AACA,QAAI,CAACD,GAAL,EAAU,OAAO,IAAP,CAF8B,CAEjB;;AACvB,WAAOE,QAAQ,CAACF,GAAD,EAAM,EAAN,CAAR,KAAsB5B,GAAG,CAACE,IAAJ,CAAS6B,MAAT,CAAgBC,KAAhB,CAAsBf,IAAI,CAACC,YAAL,CAAkBe,IAAxC,CAA7B;AACD,GAnCqC;;AAqCtC;;;AAGAC,EAAAA,iBAAiB,EAAE,EAxCmB;;AA0CtC;;;AAGAC,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,UAArB,EAAiCC,GAAjC,EAAsC;AACjD,QAAIC,iBAAiB,GAAGtC,GAAG,CAACE,IAAJ,CAASqC,IAAT,CAAc,KAAK9B,MAAL,CAAY6B,iBAA1B,CAAxB;;AAEA,QAAI,OAAOA,iBAAiB,CAACE,IAAzB,KAAkC,QAAtC,EAAgD;AAC5CF,MAAAA,iBAAiB,CAACE,IAAlB,GAAyB,EAAzB,CAD4C,CACf;AAChC;;AACD,QAAIC,KAAK,GAAGzC,GAAG,CAACE,IAAJ,CAASwC,mBAAT,CAA6BN,UAA7B,EAAyCE,iBAAzC,EAA4DD,GAA5D,CAAZ;AACA,WAAOI,KAAP;AACD;AArDqC,CAAxC","sourcesContent":["var AWS = require('../core');\nrequire('../dynamodb/document_client');\n\nAWS.util.update(AWS.DynamoDB.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (request.service.config.dynamoDbCrc32) {\n      request.removeListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n      request.addListener('extractData', this.checkCrc32);\n      request.addListener('extractData', AWS.EventListeners.Json.EXTRACT_DATA);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  checkCrc32: function checkCrc32(resp) {\n    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {\n      resp.data = null;\n      resp.error = AWS.util.error(new Error(), {\n        code: 'CRC32CheckFailed',\n        message: 'CRC32 integrity check failed',\n        retryable: true\n      });\n      resp.request.haltHandlersOnError();\n      throw (resp.error);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  crc32IsValid: function crc32IsValid(resp) {\n    var crc = resp.httpResponse.headers['x-amz-crc32'];\n    if (!crc) return true; // no (valid) CRC32 header\n    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);\n  },\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 10,\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays(retryCount, err) {\n    var retryDelayOptions = AWS.util.copy(this.config.retryDelayOptions);\n\n    if (typeof retryDelayOptions.base !== 'number') {\n        retryDelayOptions.base = 50; // default for dynamodb\n    }\n    var delay = AWS.util.calculateRetryDelay(retryCount, retryDelayOptions, err);\n    return delay;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}