{"ast":null,"code":"// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\nexport default BigInteger;\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n// (public) Constructor\n\nfunction BigInteger(a, b) {\n  if (a != null) this.fromString(a, b);\n} // return new, unset BigInteger\n\n\nfunction nbi() {\n  return new BigInteger(null);\n} // Bits per digit\n\n\nvar dbits; // JavaScript engine analysis\n\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe; // am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n\n  return c;\n} // am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\n\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n      xh = x >> 15;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff;\n    var h = this[i++] >> 15;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n\n  return c;\n} // Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\n\n\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n      xh = x >> 14;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff;\n    var h = this[i++] >> 14;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n\n  return c;\n}\n\nvar inBrowser = typeof navigator !== 'undefined';\n\nif (inBrowser && j_lm && navigator.appName == 'Microsoft Internet Explorer') {\n  BigInteger.prototype.am = am2;\n  dbits = 30;\n} else if (inBrowser && j_lm && navigator.appName != 'Netscape') {\n  BigInteger.prototype.am = am1;\n  dbits = 26;\n} else {\n  // Mozilla/Netscape seems to prefer am3\n  BigInteger.prototype.am = am3;\n  dbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions\n\nvar BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';\nvar BI_RC = new Array();\nvar rr, vv;\nrr = '0'.charCodeAt(0);\n\nfor (vv = 0; vv <= 9; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nrr = 'a'.charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nrr = 'A'.charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) {\n  BI_RC[rr++] = vv;\n}\n\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\n\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n} // (protected) copy this to r\n\n\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) {\n    r[i] = this[i];\n  }\n\n  r.t = this.t;\n  r.s = this.s;\n} // (protected) set from integer value x, -DV <= x < DV\n\n\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;\n} // return bigint initialized to value\n\n\nfunction nbv(i) {\n  var r = nbi();\n  r.fromInt(i);\n  return r;\n} // (protected) set from string and radix\n\n\nfunction bnpFromString(s, b) {\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n  this.t = 0;\n  this.s = 0;\n  var i = s.length,\n      mi = false,\n      sh = 0;\n\n  while (--i >= 0) {\n    var x = intAt(s, i);\n\n    if (x < 0) {\n      if (s.charAt(i) == '-') mi = true;\n      continue;\n    }\n\n    mi = false;\n    if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {\n      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n      this[this.t++] = x >> this.DB - sh;\n    } else this[this.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= this.DB) sh -= this.DB;\n  }\n\n  this.clamp();\n  if (mi) BigInteger.ZERO.subTo(this, this);\n} // (protected) clamp off excess high words\n\n\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n\n  while (this.t > 0 && this[this.t - 1] == c) {\n    --this.t;\n  }\n} // (public) return string representation in given radix\n\n\nfunction bnToString(b) {\n  if (this.s < 0) return '-' + this.negate().toString();\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n  var km = (1 << k) - 1,\n      d,\n      m = false,\n      r = '',\n      i = this.t;\n  var p = this.DB - i * this.DB % k;\n\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n\n    while (i >= 0) {\n      if (p < k) {\n        d = (this[i] & (1 << p) - 1) << k - p;\n        d |= this[--i] >> (p += this.DB - k);\n      } else {\n        d = this[i] >> (p -= k) & km;\n\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n\n  return m ? r : '0';\n} // (public) -this\n\n\nfunction bnNegate() {\n  var r = nbi();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n} // (public) |this|\n\n\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n} // (public) return + if this > a, - if this < a, 0 if equal\n\n\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n\n  while (--i >= 0) {\n    if ((r = this[i] - a[i]) != 0) return r;\n  }\n\n  return 0;\n} // returns bit length of the integer x\n\n\nfunction nbits(x) {\n  var r = 1,\n      t;\n\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n\n  return r;\n} // (public) return the number of bits in \"this\"\n\n\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n} // (protected) r = this << n*DB\n\n\nfunction bnpDLShiftTo(n, r) {\n  var i;\n\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + n] = this[i];\n  }\n\n  for (i = n - 1; i >= 0; --i) {\n    r[i] = 0;\n  }\n\n  r.t = this.t + n;\n  r.s = this.s;\n} // (protected) r = this >> n*DB\n\n\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) {\n    r[i - n] = this[i];\n  }\n\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n} // (protected) r = this << n\n\n\nfunction bnpLShiftTo(n, r) {\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << cbs) - 1;\n  var ds = Math.floor(n / this.DB),\n      c = this.s << bs & this.DM,\n      i;\n\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = this[i] >> cbs | c;\n    c = (this[i] & bm) << bs;\n  }\n\n  for (i = ds - 1; i >= 0; --i) {\n    r[i] = 0;\n  }\n\n  r[ds] = c;\n  r.t = this.t + ds + 1;\n  r.s = this.s;\n  r.clamp();\n} // (protected) r = this >> n\n\n\nfunction bnpRShiftTo(n, r) {\n  r.s = this.s;\n  var ds = Math.floor(n / this.DB);\n\n  if (ds >= this.t) {\n    r.t = 0;\n    return;\n  }\n\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << bs) - 1;\n  r[0] = this[ds] >> bs;\n\n  for (var i = ds + 1; i < this.t; ++i) {\n    r[i - ds - 1] |= (this[i] & bm) << cbs;\n    r[i - ds] = this[i] >> bs;\n  }\n\n  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n  r.t = this.t - ds;\n  r.clamp();\n} // (protected) r = this - a\n\n\nfunction bnpSubTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] - a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c -= a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c -= a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n} // (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n      y = a.abs();\n  var i = x.t;\n  r.t = i + y.t;\n\n  while (--i >= 0) {\n    r[i] = 0;\n  }\n\n  for (i = 0; i < y.t; ++i) {\n    r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n  }\n\n  r.s = 0;\n  r.clamp();\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n} // (protected) r = this^2, r != this (HAC 14.16)\n\n\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n\n  while (--i >= 0) {\n    r[i] = 0;\n  }\n\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\n\n\nfunction bnpDivRemTo(m, q, r) {\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = this.abs();\n\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) this.copyTo(r);\n    return;\n  }\n\n  if (r == null) r = nbi();\n  var y = nbi(),\n      ts = this.s,\n      ms = m.s;\n  var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n\n  var ys = y.t;\n  var y0 = y[ys - 1];\n  if (y0 == 0) return;\n  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n  var d1 = this.FV / yt,\n      d2 = (1 << this.F1) / yt,\n      e = 1 << this.F2;\n  var i = r.t,\n      j = i - ys,\n      t = q == null ? nbi() : q;\n  y.dlShiftTo(j, t);\n\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\n  while (y.t < ys) {\n    y[y.t++] = 0;\n  }\n\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n\n      while (r[i] < --qd) {\n        r.subTo(t, r);\n      }\n    }\n  }\n\n  if (q != null) {\n    r.drShiftTo(ys, q);\n    if (ts != ms) BigInteger.ZERO.subTo(q, q);\n  }\n\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n} // (public) this mod a\n\n\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n} // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\n\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) == 0) return 0;\n  var y = x & 3; // y == 1/x mod 2^2\n\n  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n\n  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\n  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n\n  return y > 0 ? this.DV - y : -y;\n}\n\nfunction bnEquals(a) {\n  return this.compareTo(a) == 0;\n} // (protected) r = this + a\n\n\nfunction bnpAddTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] + a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c += a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n  r.t = i;\n  r.clamp();\n} // (public) this + a\n\n\nfunction bnAdd(a) {\n  var r = nbi();\n  this.addTo(a, r);\n  return r;\n} // (public) this - a\n\n\nfunction bnSubtract(a) {\n  var r = nbi();\n  this.subTo(a, r);\n  return r;\n} // (public) this * a\n\n\nfunction bnMultiply(a) {\n  var r = nbi();\n  this.multiplyTo(a, r);\n  return r;\n} // (public) this / a\n\n\nfunction bnDivide(a) {\n  var r = nbi();\n  this.divRemTo(a, r, null);\n  return r;\n} // Montgomery reduction\n\n\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n} // xR mod m\n\n\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n} // x/R mod m\n\n\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n} // x = x/R mod m (HAC 14.32)\n\n\nfunction montReduce(x) {\n  while (x.t <= this.mt2) {\n    // pad x so am has enough room later\n    x[x.t++] = 0;\n  }\n\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call\n\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry\n\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n} // r = \"x^2/R mod m\"; x != r\n\n\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} // r = \"xy/R mod m\"; x,y != r\n\n\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo; // (public) this^e % m (HAC 14.85)\n\nfunction bnModPow(e, m, callback) {\n  var i = e.bitLength(),\n      k,\n      r = nbv(1),\n      z = new Montgomery(m);\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6; // precomputation\n\n  var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n  g[1] = z.convert(this);\n\n  if (k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1], g2);\n\n    while (n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t - 1,\n      w,\n      is1 = true,\n      r2 = nbi(),\n      t;\n  i = nbits(e[j]) - 1;\n\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n\n    while ((w & 1) == 0) {\n      w >>= 1;\n      --n;\n    }\n\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n\n    while (j >= 0 && (e[j] & 1 << i) == 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n\n  var result = z.revert(r);\n  callback(null, result);\n  return result;\n} // protected\n\n\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo; // public\n\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow; // \"constants\"\n\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/amazon-cognito-identity-js/es/BigInteger.js"],"names":["BigInteger","a","b","fromString","nbi","dbits","canary","j_lm","am1","i","x","w","j","c","n","v","Math","floor","am2","xl","xh","l","h","m","am3","inBrowser","navigator","appName","prototype","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","k","Error","length","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toString","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","bnpInvDigit","bnEquals","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","multiplyTo","bnDivide","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","reduce","montReduce","u0","montSqrTo","squareTo","montMulTo","convert","revert","mulTo","sqrTo","bnModPow","callback","bitLength","z","g","k1","g2","is1","r2","result","mod","equals","add","subtract","multiply","divide","modPow"],"mappings":"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","sourcesContent":["// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/\n//\n// All public methods have been removed except the following:\n//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)\n//   toString (only radix 2, 4, 8, 16 and 32 supported)\n//   negate\n//   abs\n//   compareTo\n//   bitLength\n//   mod\n//   equals\n//   add\n//   subtract\n//   multiply\n//   divide\n//   modPow\n\nexport default BigInteger;\n\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n\n// (public) Constructor\nfunction BigInteger(a, b) {\n\tif (a != null) this.fromString(a, b);\n}\n\n// return new, unset BigInteger\nfunction nbi() {\n\treturn new BigInteger(null);\n}\n\n// Bits per digit\nvar dbits;\n\n// JavaScript engine analysis\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe;\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n\twhile (--n >= 0) {\n\t\tvar v = x * this[i++] + w[j] + c;\n\t\tc = Math.floor(v / 0x4000000);\n\t\tw[j++] = v & 0x3ffffff;\n\t}\n\treturn c;\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n\tvar xl = x & 0x7fff,\n\t    xh = x >> 15;\n\twhile (--n >= 0) {\n\t\tvar l = this[i] & 0x7fff;\n\t\tvar h = this[i++] >> 15;\n\t\tvar m = xh * l + h * xl;\n\t\tl = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n\t\tc = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n\t\tw[j++] = l & 0x3fffffff;\n\t}\n\treturn c;\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n\tvar xl = x & 0x3fff,\n\t    xh = x >> 14;\n\twhile (--n >= 0) {\n\t\tvar l = this[i] & 0x3fff;\n\t\tvar h = this[i++] >> 14;\n\t\tvar m = xh * l + h * xl;\n\t\tl = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n\t\tc = (l >> 28) + (m >> 14) + xh * h;\n\t\tw[j++] = l & 0xfffffff;\n\t}\n\treturn c;\n}\nvar inBrowser = typeof navigator !== 'undefined';\nif (inBrowser && j_lm && navigator.appName == 'Microsoft Internet Explorer') {\n\tBigInteger.prototype.am = am2;\n\tdbits = 30;\n} else if (inBrowser && j_lm && navigator.appName != 'Netscape') {\n\tBigInteger.prototype.am = am1;\n\tdbits = 26;\n} else {\n\t// Mozilla/Netscape seems to prefer am3\n\tBigInteger.prototype.am = am3;\n\tdbits = 28;\n}\n\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\n\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\n\n// Digit conversions\nvar BI_RM = '0123456789abcdefghijklmnopqrstuvwxyz';\nvar BI_RC = new Array();\nvar rr, vv;\nrr = '0'.charCodeAt(0);\nfor (vv = 0; vv <= 9; ++vv) {\n\tBI_RC[rr++] = vv;\n}rr = 'a'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n\tBI_RC[rr++] = vv;\n}rr = 'A'.charCodeAt(0);\nfor (vv = 10; vv < 36; ++vv) {\n\tBI_RC[rr++] = vv;\n}function int2char(n) {\n\treturn BI_RM.charAt(n);\n}\nfunction intAt(s, i) {\n\tvar c = BI_RC[s.charCodeAt(i)];\n\treturn c == null ? -1 : c;\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n\tfor (var i = this.t - 1; i >= 0; --i) {\n\t\tr[i] = this[i];\n\t}r.t = this.t;\n\tr.s = this.s;\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n\tthis.t = 1;\n\tthis.s = x < 0 ? -1 : 0;\n\tif (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;\n}\n\n// return bigint initialized to value\nfunction nbv(i) {\n\tvar r = nbi();\n\n\tr.fromInt(i);\n\n\treturn r;\n}\n\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n\tvar k;\n\tif (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n\tthis.t = 0;\n\tthis.s = 0;\n\tvar i = s.length,\n\t    mi = false,\n\t    sh = 0;\n\twhile (--i >= 0) {\n\t\tvar x = intAt(s, i);\n\t\tif (x < 0) {\n\t\t\tif (s.charAt(i) == '-') mi = true;\n\t\t\tcontinue;\n\t\t}\n\t\tmi = false;\n\t\tif (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {\n\t\t\tthis[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n\t\t\tthis[this.t++] = x >> this.DB - sh;\n\t\t} else this[this.t - 1] |= x << sh;\n\t\tsh += k;\n\t\tif (sh >= this.DB) sh -= this.DB;\n\t}\n\tthis.clamp();\n\tif (mi) BigInteger.ZERO.subTo(this, this);\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n\tvar c = this.s & this.DM;\n\twhile (this.t > 0 && this[this.t - 1] == c) {\n\t\t--this.t;\n\t}\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n\tif (this.s < 0) return '-' + this.negate().toString();\n\tvar k;\n\tif (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else throw new Error('Only radix 2, 4, 8, 16, 32 are supported');\n\tvar km = (1 << k) - 1,\n\t    d,\n\t    m = false,\n\t    r = '',\n\t    i = this.t;\n\tvar p = this.DB - i * this.DB % k;\n\tif (i-- > 0) {\n\t\tif (p < this.DB && (d = this[i] >> p) > 0) {\n\t\t\tm = true;\n\t\t\tr = int2char(d);\n\t\t}\n\t\twhile (i >= 0) {\n\t\t\tif (p < k) {\n\t\t\t\td = (this[i] & (1 << p) - 1) << k - p;\n\t\t\t\td |= this[--i] >> (p += this.DB - k);\n\t\t\t} else {\n\t\t\t\td = this[i] >> (p -= k) & km;\n\t\t\t\tif (p <= 0) {\n\t\t\t\t\tp += this.DB;\n\t\t\t\t\t--i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (d > 0) m = true;\n\t\t\tif (m) r += int2char(d);\n\t\t}\n\t}\n\treturn m ? r : '0';\n}\n\n// (public) -this\nfunction bnNegate() {\n\tvar r = nbi();\n\n\tBigInteger.ZERO.subTo(this, r);\n\n\treturn r;\n}\n\n// (public) |this|\nfunction bnAbs() {\n\treturn this.s < 0 ? this.negate() : this;\n}\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n\tvar r = this.s - a.s;\n\tif (r != 0) return r;\n\tvar i = this.t;\n\tr = i - a.t;\n\tif (r != 0) return this.s < 0 ? -r : r;\n\twhile (--i >= 0) {\n\t\tif ((r = this[i] - a[i]) != 0) return r;\n\t}return 0;\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n\tvar r = 1,\n\t    t;\n\tif ((t = x >>> 16) != 0) {\n\t\tx = t;\n\t\tr += 16;\n\t}\n\tif ((t = x >> 8) != 0) {\n\t\tx = t;\n\t\tr += 8;\n\t}\n\tif ((t = x >> 4) != 0) {\n\t\tx = t;\n\t\tr += 4;\n\t}\n\tif ((t = x >> 2) != 0) {\n\t\tx = t;\n\t\tr += 2;\n\t}\n\tif ((t = x >> 1) != 0) {\n\t\tx = t;\n\t\tr += 1;\n\t}\n\treturn r;\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n\tif (this.t <= 0) return 0;\n\treturn this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n\tvar i;\n\tfor (i = this.t - 1; i >= 0; --i) {\n\t\tr[i + n] = this[i];\n\t}for (i = n - 1; i >= 0; --i) {\n\t\tr[i] = 0;\n\t}r.t = this.t + n;\n\tr.s = this.s;\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n\tfor (var i = n; i < this.t; ++i) {\n\t\tr[i - n] = this[i];\n\t}r.t = Math.max(this.t - n, 0);\n\tr.s = this.s;\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n\tvar bs = n % this.DB;\n\tvar cbs = this.DB - bs;\n\tvar bm = (1 << cbs) - 1;\n\tvar ds = Math.floor(n / this.DB),\n\t    c = this.s << bs & this.DM,\n\t    i;\n\tfor (i = this.t - 1; i >= 0; --i) {\n\t\tr[i + ds + 1] = this[i] >> cbs | c;\n\t\tc = (this[i] & bm) << bs;\n\t}\n\tfor (i = ds - 1; i >= 0; --i) {\n\t\tr[i] = 0;\n\t}r[ds] = c;\n\tr.t = this.t + ds + 1;\n\tr.s = this.s;\n\tr.clamp();\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n\tr.s = this.s;\n\tvar ds = Math.floor(n / this.DB);\n\tif (ds >= this.t) {\n\t\tr.t = 0;\n\t\treturn;\n\t}\n\tvar bs = n % this.DB;\n\tvar cbs = this.DB - bs;\n\tvar bm = (1 << bs) - 1;\n\tr[0] = this[ds] >> bs;\n\tfor (var i = ds + 1; i < this.t; ++i) {\n\t\tr[i - ds - 1] |= (this[i] & bm) << cbs;\n\t\tr[i - ds] = this[i] >> bs;\n\t}\n\tif (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n\tr.t = this.t - ds;\n\tr.clamp();\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n\tvar i = 0,\n\t    c = 0,\n\t    m = Math.min(a.t, this.t);\n\twhile (i < m) {\n\t\tc += this[i] - a[i];\n\t\tr[i++] = c & this.DM;\n\t\tc >>= this.DB;\n\t}\n\tif (a.t < this.t) {\n\t\tc -= a.s;\n\t\twhile (i < this.t) {\n\t\t\tc += this[i];\n\t\t\tr[i++] = c & this.DM;\n\t\t\tc >>= this.DB;\n\t\t}\n\t\tc += this.s;\n\t} else {\n\t\tc += this.s;\n\t\twhile (i < a.t) {\n\t\t\tc -= a[i];\n\t\t\tr[i++] = c & this.DM;\n\t\t\tc >>= this.DB;\n\t\t}\n\t\tc -= a.s;\n\t}\n\tr.s = c < 0 ? -1 : 0;\n\tif (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n\tr.t = i;\n\tr.clamp();\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n\tvar x = this.abs(),\n\t    y = a.abs();\n\tvar i = x.t;\n\tr.t = i + y.t;\n\twhile (--i >= 0) {\n\t\tr[i] = 0;\n\t}for (i = 0; i < y.t; ++i) {\n\t\tr[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n\t}r.s = 0;\n\tr.clamp();\n\tif (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n\tvar x = this.abs();\n\tvar i = r.t = 2 * x.t;\n\twhile (--i >= 0) {\n\t\tr[i] = 0;\n\t}for (i = 0; i < x.t - 1; ++i) {\n\t\tvar c = x.am(i, x[i], r, 2 * i, 0, 1);\n\t\tif ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n\t\t\tr[i + x.t] -= x.DV;\n\t\t\tr[i + x.t + 1] = 1;\n\t\t}\n\t}\n\tif (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n\tr.s = 0;\n\tr.clamp();\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n\tvar pm = m.abs();\n\tif (pm.t <= 0) return;\n\tvar pt = this.abs();\n\tif (pt.t < pm.t) {\n\t\tif (q != null) q.fromInt(0);\n\t\tif (r != null) this.copyTo(r);\n\t\treturn;\n\t}\n\tif (r == null) r = nbi();\n\tvar y = nbi(),\n\t    ts = this.s,\n\t    ms = m.s;\n\tvar nsh = this.DB - nbits(pm[pm.t - 1]);\n\t// normalize modulus\n\tif (nsh > 0) {\n\t\tpm.lShiftTo(nsh, y);\n\t\tpt.lShiftTo(nsh, r);\n\t} else {\n\t\tpm.copyTo(y);\n\t\tpt.copyTo(r);\n\t}\n\tvar ys = y.t;\n\tvar y0 = y[ys - 1];\n\tif (y0 == 0) return;\n\tvar yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n\tvar d1 = this.FV / yt,\n\t    d2 = (1 << this.F1) / yt,\n\t    e = 1 << this.F2;\n\tvar i = r.t,\n\t    j = i - ys,\n\t    t = q == null ? nbi() : q;\n\ty.dlShiftTo(j, t);\n\tif (r.compareTo(t) >= 0) {\n\t\tr[r.t++] = 1;\n\t\tr.subTo(t, r);\n\t}\n\tBigInteger.ONE.dlShiftTo(ys, t);\n\tt.subTo(y, y);\n\t// \"negative\" y so we can replace sub with am later\n\twhile (y.t < ys) {\n\t\ty[y.t++] = 0;\n\t}while (--j >= 0) {\n\t\t// Estimate quotient digit\n\t\tvar qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\t\tif ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n\t\t\t// Try it out\n\t\t\ty.dlShiftTo(j, t);\n\t\t\tr.subTo(t, r);\n\t\t\twhile (r[i] < --qd) {\n\t\t\t\tr.subTo(t, r);\n\t\t\t}\n\t\t}\n\t}\n\tif (q != null) {\n\t\tr.drShiftTo(ys, q);\n\t\tif (ts != ms) BigInteger.ZERO.subTo(q, q);\n\t}\n\tr.t = ys;\n\tr.clamp();\n\tif (nsh > 0) r.rShiftTo(nsh, r);\n\t// Denormalize remainder\n\tif (ts < 0) BigInteger.ZERO.subTo(r, r);\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n\tvar r = nbi();\n\tthis.abs().divRemTo(a, null, r);\n\tif (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n\treturn r;\n}\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n\tif (this.t < 1) return 0;\n\tvar x = this[0];\n\tif ((x & 1) == 0) return 0;\n\tvar y = x & 3;\n\t// y == 1/x mod 2^2\n\ty = y * (2 - (x & 0xf) * y) & 0xf;\n\t// y == 1/x mod 2^4\n\ty = y * (2 - (x & 0xff) * y) & 0xff;\n\t// y == 1/x mod 2^8\n\ty = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff;\n\t// y == 1/x mod 2^16\n\t// last step - calculate inverse mod DV directly;\n\t// assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\ty = y * (2 - x * y % this.DV) % this.DV;\n\t// y == 1/x mod 2^dbits\n\t// we really want the negative inverse, and -DV < y < DV\n\treturn y > 0 ? this.DV - y : -y;\n}\n\nfunction bnEquals(a) {\n\treturn this.compareTo(a) == 0;\n}\n\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n\tvar i = 0,\n\t    c = 0,\n\t    m = Math.min(a.t, this.t);\n\twhile (i < m) {\n\t\tc += this[i] + a[i];\n\t\tr[i++] = c & this.DM;\n\t\tc >>= this.DB;\n\t}\n\tif (a.t < this.t) {\n\t\tc += a.s;\n\t\twhile (i < this.t) {\n\t\t\tc += this[i];\n\t\t\tr[i++] = c & this.DM;\n\t\t\tc >>= this.DB;\n\t\t}\n\t\tc += this.s;\n\t} else {\n\t\tc += this.s;\n\t\twhile (i < a.t) {\n\t\t\tc += a[i];\n\t\t\tr[i++] = c & this.DM;\n\t\t\tc >>= this.DB;\n\t\t}\n\t\tc += a.s;\n\t}\n\tr.s = c < 0 ? -1 : 0;\n\tif (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n\tr.t = i;\n\tr.clamp();\n}\n\n// (public) this + a\nfunction bnAdd(a) {\n\tvar r = nbi();\n\n\tthis.addTo(a, r);\n\n\treturn r;\n}\n\n// (public) this - a\nfunction bnSubtract(a) {\n\tvar r = nbi();\n\n\tthis.subTo(a, r);\n\n\treturn r;\n}\n\n// (public) this * a\nfunction bnMultiply(a) {\n\tvar r = nbi();\n\n\tthis.multiplyTo(a, r);\n\n\treturn r;\n}\n\n// (public) this / a\nfunction bnDivide(a) {\n\tvar r = nbi();\n\n\tthis.divRemTo(a, r, null);\n\n\treturn r;\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n\tthis.m = m;\n\tthis.mp = m.invDigit();\n\tthis.mpl = this.mp & 0x7fff;\n\tthis.mph = this.mp >> 15;\n\tthis.um = (1 << m.DB - 15) - 1;\n\tthis.mt2 = 2 * m.t;\n}\n\n// xR mod m\nfunction montConvert(x) {\n\tvar r = nbi();\n\tx.abs().dlShiftTo(this.m.t, r);\n\tr.divRemTo(this.m, null, r);\n\tif (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n\treturn r;\n}\n\n// x/R mod m\nfunction montRevert(x) {\n\tvar r = nbi();\n\tx.copyTo(r);\n\tthis.reduce(r);\n\treturn r;\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n\twhile (x.t <= this.mt2) {\n\t\t// pad x so am has enough room later\n\t\tx[x.t++] = 0;\n\t}for (var i = 0; i < this.m.t; ++i) {\n\t\t// faster way of calculating u0 = x[i]*mp mod DV\n\t\tvar j = x[i] & 0x7fff;\n\t\tvar u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;\n\t\t// use am to combine the multiply-shift-add into one call\n\t\tj = i + this.m.t;\n\t\tx[j] += this.m.am(0, u0, x, i, 0, this.m.t);\n\t\t// propagate carry\n\t\twhile (x[j] >= x.DV) {\n\t\t\tx[j] -= x.DV;\n\t\t\tx[++j]++;\n\t\t}\n\t}\n\tx.clamp();\n\tx.drShiftTo(this.m.t, x);\n\tif (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n\tx.squareTo(r);\n\n\tthis.reduce(r);\n}\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n\tx.multiplyTo(y, r);\n\n\tthis.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo;\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m, callback) {\n\tvar i = e.bitLength(),\n\t    k,\n\t    r = nbv(1),\n\t    z = new Montgomery(m);\n\tif (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n\n\t// precomputation\n\tvar g = new Array(),\n\t    n = 3,\n\t    k1 = k - 1,\n\t    km = (1 << k) - 1;\n\tg[1] = z.convert(this);\n\tif (k > 1) {\n\t\tvar g2 = nbi();\n\t\tz.sqrTo(g[1], g2);\n\t\twhile (n <= km) {\n\t\t\tg[n] = nbi();\n\t\t\tz.mulTo(g2, g[n - 2], g[n]);\n\t\t\tn += 2;\n\t\t}\n\t}\n\n\tvar j = e.t - 1,\n\t    w,\n\t    is1 = true,\n\t    r2 = nbi(),\n\t    t;\n\ti = nbits(e[j]) - 1;\n\twhile (j >= 0) {\n\t\tif (i >= k1) w = e[j] >> i - k1 & km;else {\n\t\t\tw = (e[j] & (1 << i + 1) - 1) << k1 - i;\n\t\t\tif (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n\t\t}\n\n\t\tn = k;\n\t\twhile ((w & 1) == 0) {\n\t\t\tw >>= 1;\n\t\t\t--n;\n\t\t}\n\t\tif ((i -= n) < 0) {\n\t\t\ti += this.DB;\n\t\t\t--j;\n\t\t}\n\t\tif (is1) {\n\t\t\t// ret == 1, don't bother squaring or multiplying it\n\t\t\tg[w].copyTo(r);\n\t\t\tis1 = false;\n\t\t} else {\n\t\t\twhile (n > 1) {\n\t\t\t\tz.sqrTo(r, r2);\n\t\t\t\tz.sqrTo(r2, r);\n\t\t\t\tn -= 2;\n\t\t\t}\n\t\t\tif (n > 0) z.sqrTo(r, r2);else {\n\t\t\t\tt = r;\n\t\t\t\tr = r2;\n\t\t\t\tr2 = t;\n\t\t\t}\n\t\t\tz.mulTo(r2, g[w], r);\n\t\t}\n\n\t\twhile (j >= 0 && (e[j] & 1 << i) == 0) {\n\t\t\tz.sqrTo(r, r2);\n\t\t\tt = r;\n\t\t\tr = r2;\n\t\t\tr2 = t;\n\t\t\tif (--i < 0) {\n\t\t\t\ti = this.DB - 1;\n\t\t\t\t--j;\n\t\t\t}\n\t\t}\n\t}\n\tvar result = z.revert(r);\n\tcallback(null, result);\n\treturn result;\n}\n\n// protected\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.addTo = bnpAddTo;\n\n// public\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.modPow = bnModPow;\n\n// \"constants\"\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1);"]},"metadata":{},"sourceType":"module"}