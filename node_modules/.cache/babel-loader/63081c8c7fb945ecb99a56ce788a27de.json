{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\nvar logger = new Logger('XR');\nvar DEFAULT_PROVIDER_NAME = 'SumerianProvider';\n\nvar XR =\n/** @class */\nfunction () {\n  /**\n   * Initialize XR with AWS configurations\n   *\n   * @param {XROptions} options - Configuration object for XR\n   */\n  function XR(options) {\n    this._options = options;\n    logger.debug('XR Options', this._options);\n    this._defaultProvider = DEFAULT_PROVIDER_NAME;\n    this._pluggables = {}; // Add default provider\n\n    this.addPluggable(new SumerianProvider());\n  }\n  /**\n   * Configure XR part with configurations\n   *\n   * @param {XROptions} config - Configuration for XR\n   * @return {Object} - The current configuration\n   */\n\n\n  XR.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.XR || options : {};\n    logger.debug('configure XR', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n    Object.entries(this._pluggables).map(function (_a) {\n      var name = _a[0],\n          provider = _a[1];\n\n      if (name === _this._defaultProvider && !opt[_this._defaultProvider]) {\n        provider.configure(_this._options);\n      } else {\n        provider.configure(_this._options[name]);\n      }\n    });\n    return this._options;\n  };\n  /**\n   * add plugin into XR category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n\n\n  XR.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'XR') {\n          this._pluggables[pluggable.getProviderName()] = pluggable;\n          config = pluggable.configure(this._options);\n          return [2\n          /*return*/\n          , config];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  XR.prototype.loadScene = function (sceneName, domElementId, sceneOptions, provider) {\n    if (sceneOptions === void 0) {\n      sceneOptions = {};\n    }\n\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n            return [4\n            /*yield*/\n            , this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  XR.prototype.isSceneLoaded = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isSceneLoaded(sceneName);\n  };\n\n  XR.prototype.getSceneController = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].getSceneController(sceneName);\n  };\n\n  XR.prototype.isVRCapable = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRCapable(sceneName);\n  };\n\n  XR.prototype.isVRPresentationActive = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRPresentationActive(sceneName);\n  };\n\n  XR.prototype.start = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].start(sceneName);\n  };\n\n  XR.prototype.enterVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enterVR(sceneName);\n  };\n\n  XR.prototype.exitVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].exitVR(sceneName);\n  };\n\n  XR.prototype.isMuted = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isMuted(sceneName);\n  };\n\n  XR.prototype.setMuted = function (sceneName, muted, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].setMuted(sceneName, muted);\n  };\n\n  XR.prototype.onSceneEvent = function (sceneName, eventName, eventHandler, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n  };\n\n  XR.prototype.enableAudio = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enableAudio(sceneName);\n  };\n\n  return XR;\n}();\n\nexport default XR;","map":{"version":3,"sources":["../src/XR.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\nvar logger = new Logger('XR');\nvar DEFAULT_PROVIDER_NAME = 'SumerianProvider';\nvar XR = /** @class */ (function () {\n    /**\n     * Initialize XR with AWS configurations\n     *\n     * @param {XROptions} options - Configuration object for XR\n     */\n    function XR(options) {\n        this._options = options;\n        logger.debug('XR Options', this._options);\n        this._defaultProvider = DEFAULT_PROVIDER_NAME;\n        this._pluggables = {};\n        // Add default provider\n        this.addPluggable(new SumerianProvider());\n    }\n    /**\n     * Configure XR part with configurations\n     *\n     * @param {XROptions} config - Configuration for XR\n     * @return {Object} - The current configuration\n     */\n    XR.prototype.configure = function (options) {\n        var _this = this;\n        var opt = options ? options.XR || options : {};\n        logger.debug('configure XR', { opt: opt });\n        this._options = Object.assign({}, this._options, opt);\n        Object.entries(this._pluggables).map(function (_a) {\n            var name = _a[0], provider = _a[1];\n            if (name === _this._defaultProvider && !opt[_this._defaultProvider]) {\n                provider.configure(_this._options);\n            }\n            else {\n                provider.configure(_this._options[name]);\n            }\n        });\n        return this._options;\n    };\n    /**\n     * add plugin into XR category\n     * @param {Object} pluggable - an instance of the plugin\n     */\n    XR.prototype.addPluggable = function (pluggable) {\n        return __awaiter(this, void 0, void 0, function () {\n            var config;\n            return __generator(this, function (_a) {\n                if (pluggable && pluggable.getCategory() === 'XR') {\n                    this._pluggables[pluggable.getProviderName()] = pluggable;\n                    config = pluggable.configure(this._options);\n                    return [2 /*return*/, config];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    XR.prototype.loadScene = function (sceneName, domElementId, sceneOptions, provider) {\n        if (sceneOptions === void 0) { sceneOptions = {}; }\n        if (provider === void 0) { provider = this._defaultProvider; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._pluggables[provider])\n                            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n                        return [4 /*yield*/, this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    XR.prototype.isSceneLoaded = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isSceneLoaded(sceneName);\n    };\n    XR.prototype.getSceneController = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].getSceneController(sceneName);\n    };\n    XR.prototype.isVRCapable = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isVRCapable(sceneName);\n    };\n    XR.prototype.isVRPresentationActive = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isVRPresentationActive(sceneName);\n    };\n    XR.prototype.start = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].start(sceneName);\n    };\n    XR.prototype.enterVR = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].enterVR(sceneName);\n    };\n    XR.prototype.exitVR = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].exitVR(sceneName);\n    };\n    XR.prototype.isMuted = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].isMuted(sceneName);\n    };\n    XR.prototype.setMuted = function (sceneName, muted, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].setMuted(sceneName, muted);\n    };\n    XR.prototype.onSceneEvent = function (sceneName, eventName, eventHandler, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n    };\n    XR.prototype.enableAudio = function (sceneName, provider) {\n        if (provider === void 0) { provider = this._defaultProvider; }\n        if (!this._pluggables[provider])\n            throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n        return this._pluggables[provider].enableAudio(sceneName);\n    };\n    return XR;\n}());\nexport default XR;\n//# sourceMappingURL=XR.js.map"]},"metadata":{},"sourceType":"module"}