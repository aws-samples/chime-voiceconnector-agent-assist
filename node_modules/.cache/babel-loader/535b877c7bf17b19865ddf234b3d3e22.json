{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar SHORT_TO_HEX = {};\nvar HEX_TO_SHORT = {};\n\nfor (var i = 0; i < 256; i++) {\n  var encodedByte = i.toString(16).toLowerCase();\n\n  if (encodedByte.length === 1) {\n    encodedByte = \"0\" + encodedByte;\n  }\n\n  SHORT_TO_HEX[i] = encodedByte;\n  HEX_TO_SHORT[encodedByte] = i;\n}\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\n\n\nfunction fromHex(encoded) {\n  if (encoded.length % 2 !== 0) {\n    throw new Error('Hex encoded strings must have an even number length');\n  }\n\n  var out = new Uint8Array(encoded.length / 2);\n\n  for (var i = 0; i < encoded.length; i += 2) {\n    var encodedByte = encoded.substr(i, 2).toLowerCase();\n\n    if (encodedByte in HEX_TO_SHORT) {\n      out[i / 2] = HEX_TO_SHORT[encodedByte];\n    } else {\n      throw new Error(\"Cannot decode unrecognized sequence \" + encodedByte + \" as hexadecimal\");\n    }\n  }\n\n  return out;\n}\n\nexports.fromHex = fromHex;\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\n\nfunction toHex(bytes) {\n  var out = '';\n\n  for (var i = 0; i < bytes.byteLength; i++) {\n    out += SHORT_TO_HEX[bytes[i]];\n  }\n\n  return out;\n}\n\nexports.toHex = toHex;","map":{"version":3,"sources":["index.ts"],"names":[],"mappings":";;;;;AAAA,IAAM,YAAY,GAA4B,EAA9C;AACA,IAAM,YAAY,GAA4B,EAA9C;;AAEA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC1B,MAAI,WAAW,GAAG,CAAC,CAAC,QAAF,CAAW,EAAX,EAAe,WAAf,EAAlB;;AACA,MAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,IAAA,WAAW,GAAG,MAAI,WAAlB;AACH;;AAED,EAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,WAAlB;AACA,EAAA,YAAY,CAAC,WAAD,CAAZ,GAA4B,CAA5B;AACH;AAED;;;;;;;AAKA,SAAgB,OAAhB,CAAwB,OAAxB,EAAuC;AACnC,MAAI,OAAO,CAAC,MAAR,GAAiB,CAAjB,KAAuB,CAA3B,EAA8B;AAC1B,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACH;;AAED,MAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,OAAO,CAAC,MAAR,GAAiB,CAAhC,CAAZ;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAAO,CAAC,MAA5B,EAAoC,CAAC,IAAI,CAAzC,EAA4C;AACxC,QAAM,WAAW,GAAG,OAAO,CAAC,MAAR,CAAe,CAAf,EAAkB,CAAlB,EAAqB,WAArB,EAApB;;AACA,QAAI,WAAW,IAAI,YAAnB,EAAiC;AAC7B,MAAA,GAAG,CAAC,CAAC,GAAG,CAAL,CAAH,GAAa,YAAY,CAAC,WAAD,CAAzB;AACH,KAFD,MAEO;AACH,YAAM,IAAI,KAAJ,CACF,yCAAuC,WAAvC,GAAkD,iBADhD,CAAN;AAGH;AACJ;;AAED,SAAO,GAAP;AACH;;AAlBD,OAAA,CAAA,OAAA,GAAA,OAAA;AAqBA;;;;;;AAKA,SAAgB,KAAhB,CAAsB,KAAtB,EAAuC;AACnC,MAAI,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,UAA1B,EAAsC,CAAC,EAAvC,EAA2C;AACvC,IAAA,GAAG,IAAI,YAAY,CAAC,KAAK,CAAC,CAAD,CAAN,CAAnB;AACH;;AAED,SAAO,GAAP;AACH;;AAPD,OAAA,CAAA,KAAA,GAAA,KAAA","sourceRoot":"./src/","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SHORT_TO_HEX = {};\nvar HEX_TO_SHORT = {};\nfor (var i = 0; i < 256; i++) {\n    var encodedByte = i.toString(16).toLowerCase();\n    if (encodedByte.length === 1) {\n        encodedByte = \"0\" + encodedByte;\n    }\n    SHORT_TO_HEX[i] = encodedByte;\n    HEX_TO_SHORT[encodedByte] = i;\n}\n/**\n * Converts a hexadecimal encoded string to a Uint8Array of bytes.\n *\n * @param encoded The hexadecimal encoded string\n */\nfunction fromHex(encoded) {\n    if (encoded.length % 2 !== 0) {\n        throw new Error('Hex encoded strings must have an even number length');\n    }\n    var out = new Uint8Array(encoded.length / 2);\n    for (var i = 0; i < encoded.length; i += 2) {\n        var encodedByte = encoded.substr(i, 2).toLowerCase();\n        if (encodedByte in HEX_TO_SHORT) {\n            out[i / 2] = HEX_TO_SHORT[encodedByte];\n        }\n        else {\n            throw new Error(\"Cannot decode unrecognized sequence \" + encodedByte + \" as hexadecimal\");\n        }\n    }\n    return out;\n}\nexports.fromHex = fromHex;\n/**\n * Converts a Uint8Array of binary data to a hexadecimal encoded string.\n *\n * @param bytes The binary data to encode\n */\nfunction toHex(bytes) {\n    var out = '';\n    for (var i = 0; i < bytes.byteLength; i++) {\n        out += SHORT_TO_HEX[bytes[i]];\n    }\n    return out;\n}\nexports.toHex = toHex;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}