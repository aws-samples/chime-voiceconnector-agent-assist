{"ast":null,"code":"var AWS = require('../core');\n\nvar STS = require('../../clients/sts');\n/**\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\n * extra parameters, credentials will be fetched from the\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n * role instead.\n *\n * AWS.ChainableTemporaryCredentials differs from AWS.TemporaryCredentials in\n * the way masterCredentials and refreshes are handled.\n * AWS.ChainableTemporaryCredentials refreshes expired credentials using the\n * masterCredentials passed by the user to support chaining of STS credentials.\n * However, AWS.TemporaryCredentials recursively collapses the masterCredentials\n * during instantiation, precluding the ability to refresh credentials which\n * require intermediate, temporary credentials.\n *\n * For example, if the application should use RoleA, which must be assumed from\n * RoleB, and the environment provides credentials which can assume RoleB, then\n * AWS.ChainableTemporaryCredentials must be used to support refreshing the\n * temporary credentials for RoleA:\n *\n * ```javascript\n * var roleACreds = new AWS.ChainableTemporaryCredentials({\n *   params: {RoleArn: 'RoleA'},\n *   masterCredentials: new AWS.ChainableTemporaryCredentials({\n *     params: {RoleArn: 'RoleB'},\n *     masterCredentials: new AWS.EnvironmentCredentials('AWS')\n *   })\n * });\n * ```\n *\n * If AWS.TemporaryCredentials had been used in the previous example,\n * `roleACreds` would fail to refresh because `roleACreds` would\n * use the environment credentials for the AssumeRole request.\n *\n * Another difference is that AWS.ChainableTemporaryCredentials creates the STS\n * service instance during instantiation while AWS.TemporaryCredentials creates\n * the STS service instance during the first refresh. Creating the service\n * instance during instantiation effectively captures the master credentials\n * from the global config, so that subsequent changes to the global config do\n * not affect the master credentials used to refresh the temporary credentials.\n *\n * This allows an instance of AWS.ChainableTemporaryCredentials to be assigned\n * to AWS.config.credentials:\n *\n * ```javascript\n * var envCreds = new AWS.EnvironmentCredentials('AWS');\n * AWS.config.credentials = envCreds;\n * // masterCredentials will be envCreds\n * AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\n *   params: {RoleArn: '...'}\n * });\n * ```\n *\n * Similarly, to use the CredentialProviderChain's default providers as the\n * master credentials, simply create a new instance of\n * AWS.ChainableTemporaryCredentials:\n *\n * ```javascript\n * AWS.config.credentials = new ChainableTemporaryCredentials({\n *   params: {RoleArn: '...'}\n * });\n * ```\n *\n * @!attribute service\n *   @return [AWS.STS] the STS service instance used to\n *     get and refresh temporary credentials from AWS STS.\n * @note (see constructor)\n */\n\n\nAWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new temporary credentials object.\n   *\n   * @param options [map] a set of options\n   * @option options params [map] ({}) a map of options that are passed to the\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\n   *   IAM role. If a `SerialNumber` parameter is passed in, {tokenCodeFn} must\n   *   also be passed in or an error will be thrown.\n   * @option options masterCredentials [AWS.Credentials] the master credentials\n   *   used to get and refresh temporary credentials from AWS STS. By default,\n   *   AWS.config.credentials or AWS.config.credentialProvider will be used.\n   * @option options tokenCodeFn [Function] (null) Function to provide\n   *   `TokenCode`, if `SerialNumber` is provided for profile in {params}. Function\n   *   is called with value of `SerialNumber` and `callback`, and should provide\n   *   the `TokenCode` or an error to the callback in the format\n   *   `callback(err, token)`.\n   * @example Creating a new credentials object for generic temporary credentials\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials();\n   * @example Creating a new credentials object for an IAM role\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\n   *     params: {\n   *       RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials'\n   *     }\n   *   });\n   * @see AWS.STS.assumeRole\n   * @see AWS.STS.getSessionToken\n   */\n  constructor: function ChainableTemporaryCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options || {};\n    this.errorCode = 'ChainableTemporaryCredentialsProviderFailure';\n    this.expired = true;\n    this.tokenCodeFn = null;\n    var params = AWS.util.copy(options.params) || {};\n\n    if (params.RoleArn) {\n      params.RoleSessionName = params.RoleSessionName || 'temporary-credentials';\n    }\n\n    if (params.SerialNumber) {\n      if (!options.tokenCodeFn || typeof options.tokenCodeFn !== 'function') {\n        throw new AWS.util.error(new Error('tokenCodeFn must be a function when params.SerialNumber is given'), {\n          code: this.errorCode\n        });\n      } else {\n        this.tokenCodeFn = options.tokenCodeFn;\n      }\n    }\n\n    config = AWS.util.merge({\n      params: params,\n      credentials: options.masterCredentials || AWS.config.credentials\n    }, options.stsConfig || {});\n    this.service = new STS(config);\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRole} or\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n   * to the credentials {constructor}.\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see AWS.Credentials.get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\n   * @api private\n   * @param callback\n   */\n  load: function load(callback) {\n    var self = this;\n    var operation = self.service.config.params.RoleArn ? 'assumeRole' : 'getSessionToken';\n    this.getTokenCode(function (err, tokenCode) {\n      var params = {};\n\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      if (tokenCode) {\n        params.TokenCode = tokenCode;\n      }\n\n      self.service[operation](params, function (err, data) {\n        if (!err) {\n          self.service.credentialsFrom(data, self);\n        }\n\n        callback(err);\n      });\n    });\n  },\n\n  /**\n   * @api private\n   */\n  getTokenCode: function getTokenCode(callback) {\n    var self = this;\n\n    if (this.tokenCodeFn) {\n      this.tokenCodeFn(this.service.config.params.SerialNumber, function (err, token) {\n        if (err) {\n          var message = err;\n\n          if (err instanceof Error) {\n            message = err.message;\n          }\n\n          callback(AWS.util.error(new Error('Error fetching MFA token: ' + message), {\n            code: self.errorCode\n          }));\n          return;\n        }\n\n        callback(null, token);\n      });\n    } else {\n      callback(null);\n    }\n  }\n});","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/@aws-amplify/core/node_modules/aws-sdk/lib/credentials/chainable_temporary_credentials.js"],"names":["AWS","require","STS","ChainableTemporaryCredentials","util","inherit","Credentials","constructor","options","call","errorCode","expired","tokenCodeFn","params","copy","RoleArn","RoleSessionName","SerialNumber","error","Error","code","config","merge","credentials","masterCredentials","stsConfig","service","refresh","callback","coalesceRefresh","fn","load","self","operation","getTokenCode","err","tokenCode","TokenCode","data","credentialsFrom","token","message"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,mBAAD,CAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEAD,GAAG,CAACG,6BAAJ,GAAoCH,GAAG,CAACI,IAAJ,CAASC,OAAT,CAAiBL,GAAG,CAACM,WAArB,EAAkC;AACpE;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAC,EAAAA,WAAW,EAAE,SAASJ,6BAAT,CAAuCK,OAAvC,EAAgD;AAC3DR,IAAAA,GAAG,CAACM,WAAJ,CAAgBG,IAAhB,CAAqB,IAArB;AACAD,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,SAAKE,SAAL,GAAiB,8CAAjB;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,WAAL,GAAmB,IAAnB;AAEA,QAAIC,MAAM,GAAGb,GAAG,CAACI,IAAJ,CAASU,IAAT,CAAcN,OAAO,CAACK,MAAtB,KAAiC,EAA9C;;AACA,QAAIA,MAAM,CAACE,OAAX,EAAoB;AAClBF,MAAAA,MAAM,CAACG,eAAP,GAAyBH,MAAM,CAACG,eAAP,IAA0B,uBAAnD;AACD;;AACD,QAAIH,MAAM,CAACI,YAAX,EAAyB;AACvB,UAAI,CAACT,OAAO,CAACI,WAAT,IAAyB,OAAOJ,OAAO,CAACI,WAAf,KAA+B,UAA5D,EAAyE;AACvE,cAAM,IAAIZ,GAAG,CAACI,IAAJ,CAASc,KAAb,CACJ,IAAIC,KAAJ,CAAU,kEAAV,CADI,EAEJ;AAACC,UAAAA,IAAI,EAAE,KAAKV;AAAZ,SAFI,CAAN;AAID,OALD,MAKO;AACL,aAAKE,WAAL,GAAmBJ,OAAO,CAACI,WAA3B;AACD;AACF;;AACDS,IAAAA,MAAM,GAAGrB,GAAG,CAACI,IAAJ,CAASkB,KAAT,CACP;AACET,MAAAA,MAAM,EAAEA,MADV;AAEEU,MAAAA,WAAW,EAAEf,OAAO,CAACgB,iBAAR,IAA6BxB,GAAG,CAACqB,MAAJ,CAAWE;AAFvD,KADO,EAKPf,OAAO,CAACiB,SAAR,IAAqB,EALd,CAAT;AAOA,SAAKC,OAAL,GAAe,IAAIxB,GAAJ,CAAQmB,MAAR,CAAf;AACD,GA1DmE;;AA4DpE;;;;;;;;;;;;;AAaAM,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2B;AAClC,SAAKC,eAAL,CAAqBD,QAAQ,IAAI5B,GAAG,CAACI,IAAJ,CAAS0B,EAAT,CAAYF,QAA7C;AACD,GA3EmE;;AA6EpE;;;;AAIAG,EAAAA,IAAI,EAAE,SAASA,IAAT,CAAcH,QAAd,EAAwB;AAC5B,QAAII,IAAI,GAAG,IAAX;AACA,QAAIC,SAAS,GAAGD,IAAI,CAACN,OAAL,CAAaL,MAAb,CAAoBR,MAApB,CAA2BE,OAA3B,GAAqC,YAArC,GAAoD,iBAApE;AACA,SAAKmB,YAAL,CAAkB,UAAUC,GAAV,EAAeC,SAAf,EAA0B;AAC1C,UAAIvB,MAAM,GAAG,EAAb;;AACA,UAAIsB,GAAJ,EAAS;AACPP,QAAAA,QAAQ,CAACO,GAAD,CAAR;AACA;AACD;;AACD,UAAIC,SAAJ,EAAe;AACbvB,QAAAA,MAAM,CAACwB,SAAP,GAAmBD,SAAnB;AACD;;AACDJ,MAAAA,IAAI,CAACN,OAAL,CAAaO,SAAb,EAAwBpB,MAAxB,EAAgC,UAAUsB,GAAV,EAAeG,IAAf,EAAqB;AACnD,YAAI,CAACH,GAAL,EAAU;AACRH,UAAAA,IAAI,CAACN,OAAL,CAAaa,eAAb,CAA6BD,IAA7B,EAAmCN,IAAnC;AACD;;AACDJ,QAAAA,QAAQ,CAACO,GAAD,CAAR;AACD,OALD;AAMD,KAfD;AAgBD,GApGmE;;AAsGpE;;;AAGAD,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBN,QAAtB,EAAgC;AAC5C,QAAII,IAAI,GAAG,IAAX;;AACA,QAAI,KAAKpB,WAAT,EAAsB;AACpB,WAAKA,WAAL,CAAiB,KAAKc,OAAL,CAAaL,MAAb,CAAoBR,MAApB,CAA2BI,YAA5C,EAA0D,UAAUkB,GAAV,EAAeK,KAAf,EAAsB;AAC9E,YAAIL,GAAJ,EAAS;AACP,cAAIM,OAAO,GAAGN,GAAd;;AACA,cAAIA,GAAG,YAAYhB,KAAnB,EAA0B;AACxBsB,YAAAA,OAAO,GAAGN,GAAG,CAACM,OAAd;AACD;;AACDb,UAAAA,QAAQ,CACN5B,GAAG,CAACI,IAAJ,CAASc,KAAT,CACE,IAAIC,KAAJ,CAAU,+BAA+BsB,OAAzC,CADF,EAEE;AAAErB,YAAAA,IAAI,EAAEY,IAAI,CAACtB;AAAb,WAFF,CADM,CAAR;AAMA;AACD;;AACDkB,QAAAA,QAAQ,CAAC,IAAD,EAAOY,KAAP,CAAR;AACD,OAfD;AAgBD,KAjBD,MAiBO;AACLZ,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF;AA/HmE,CAAlC,CAApC","sourcesContent":["var AWS = require('../core');\nvar STS = require('../../clients/sts');\n\n/**\n * Represents temporary credentials retrieved from {AWS.STS}. Without any\n * extra parameters, credentials will be fetched from the\n * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the\n * {AWS.STS.assumeRole} operation will be used to fetch credentials for the\n * role instead.\n *\n * AWS.ChainableTemporaryCredentials differs from AWS.TemporaryCredentials in\n * the way masterCredentials and refreshes are handled.\n * AWS.ChainableTemporaryCredentials refreshes expired credentials using the\n * masterCredentials passed by the user to support chaining of STS credentials.\n * However, AWS.TemporaryCredentials recursively collapses the masterCredentials\n * during instantiation, precluding the ability to refresh credentials which\n * require intermediate, temporary credentials.\n *\n * For example, if the application should use RoleA, which must be assumed from\n * RoleB, and the environment provides credentials which can assume RoleB, then\n * AWS.ChainableTemporaryCredentials must be used to support refreshing the\n * temporary credentials for RoleA:\n *\n * ```javascript\n * var roleACreds = new AWS.ChainableTemporaryCredentials({\n *   params: {RoleArn: 'RoleA'},\n *   masterCredentials: new AWS.ChainableTemporaryCredentials({\n *     params: {RoleArn: 'RoleB'},\n *     masterCredentials: new AWS.EnvironmentCredentials('AWS')\n *   })\n * });\n * ```\n *\n * If AWS.TemporaryCredentials had been used in the previous example,\n * `roleACreds` would fail to refresh because `roleACreds` would\n * use the environment credentials for the AssumeRole request.\n *\n * Another difference is that AWS.ChainableTemporaryCredentials creates the STS\n * service instance during instantiation while AWS.TemporaryCredentials creates\n * the STS service instance during the first refresh. Creating the service\n * instance during instantiation effectively captures the master credentials\n * from the global config, so that subsequent changes to the global config do\n * not affect the master credentials used to refresh the temporary credentials.\n *\n * This allows an instance of AWS.ChainableTemporaryCredentials to be assigned\n * to AWS.config.credentials:\n *\n * ```javascript\n * var envCreds = new AWS.EnvironmentCredentials('AWS');\n * AWS.config.credentials = envCreds;\n * // masterCredentials will be envCreds\n * AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\n *   params: {RoleArn: '...'}\n * });\n * ```\n *\n * Similarly, to use the CredentialProviderChain's default providers as the\n * master credentials, simply create a new instance of\n * AWS.ChainableTemporaryCredentials:\n *\n * ```javascript\n * AWS.config.credentials = new ChainableTemporaryCredentials({\n *   params: {RoleArn: '...'}\n * });\n * ```\n *\n * @!attribute service\n *   @return [AWS.STS] the STS service instance used to\n *     get and refresh temporary credentials from AWS STS.\n * @note (see constructor)\n */\nAWS.ChainableTemporaryCredentials = AWS.util.inherit(AWS.Credentials, {\n  /**\n   * Creates a new temporary credentials object.\n   *\n   * @param options [map] a set of options\n   * @option options params [map] ({}) a map of options that are passed to the\n   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.\n   *   If a `RoleArn` parameter is passed in, credentials will be based on the\n   *   IAM role. If a `SerialNumber` parameter is passed in, {tokenCodeFn} must\n   *   also be passed in or an error will be thrown.\n   * @option options masterCredentials [AWS.Credentials] the master credentials\n   *   used to get and refresh temporary credentials from AWS STS. By default,\n   *   AWS.config.credentials or AWS.config.credentialProvider will be used.\n   * @option options tokenCodeFn [Function] (null) Function to provide\n   *   `TokenCode`, if `SerialNumber` is provided for profile in {params}. Function\n   *   is called with value of `SerialNumber` and `callback`, and should provide\n   *   the `TokenCode` or an error to the callback in the format\n   *   `callback(err, token)`.\n   * @example Creating a new credentials object for generic temporary credentials\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials();\n   * @example Creating a new credentials object for an IAM role\n   *   AWS.config.credentials = new AWS.ChainableTemporaryCredentials({\n   *     params: {\n   *       RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials'\n   *     }\n   *   });\n   * @see AWS.STS.assumeRole\n   * @see AWS.STS.getSessionToken\n   */\n  constructor: function ChainableTemporaryCredentials(options) {\n    AWS.Credentials.call(this);\n    options = options || {};\n    this.errorCode = 'ChainableTemporaryCredentialsProviderFailure';\n    this.expired = true;\n    this.tokenCodeFn = null;\n\n    var params = AWS.util.copy(options.params) || {};\n    if (params.RoleArn) {\n      params.RoleSessionName = params.RoleSessionName || 'temporary-credentials';\n    }\n    if (params.SerialNumber) {\n      if (!options.tokenCodeFn || (typeof options.tokenCodeFn !== 'function')) {\n        throw new AWS.util.error(\n          new Error('tokenCodeFn must be a function when params.SerialNumber is given'),\n          {code: this.errorCode}\n        );\n      } else {\n        this.tokenCodeFn = options.tokenCodeFn;\n      }\n    }\n    config = AWS.util.merge(\n      {\n        params: params,\n        credentials: options.masterCredentials || AWS.config.credentials\n      },\n      options.stsConfig || {}\n    );\n    this.service = new STS(config);\n  },\n\n  /**\n   * Refreshes credentials using {AWS.STS.assumeRole} or\n   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed\n   * to the credentials {constructor}.\n   *\n   * @callback callback function(err)\n   *   Called when the STS service responds (or fails). When\n   *   this callback is called with no error, it means that the credentials\n   *   information has been loaded into the object (as the `accessKeyId`,\n   *   `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @see AWS.Credentials.get\n   */\n  refresh: function refresh(callback) {\n    this.coalesceRefresh(callback || AWS.util.fn.callback);\n  },\n\n  /**\n   * @api private\n   * @param callback\n   */\n  load: function load(callback) {\n    var self = this;\n    var operation = self.service.config.params.RoleArn ? 'assumeRole' : 'getSessionToken';\n    this.getTokenCode(function (err, tokenCode) {\n      var params = {};\n      if (err) {\n        callback(err);\n        return;\n      }\n      if (tokenCode) {\n        params.TokenCode = tokenCode;\n      }\n      self.service[operation](params, function (err, data) {\n        if (!err) {\n          self.service.credentialsFrom(data, self);\n        }\n        callback(err);\n      });\n    });\n  },\n\n  /**\n   * @api private\n   */\n  getTokenCode: function getTokenCode(callback) {\n    var self = this;\n    if (this.tokenCodeFn) {\n      this.tokenCodeFn(this.service.config.params.SerialNumber, function (err, token) {\n        if (err) {\n          var message = err;\n          if (err instanceof Error) {\n            message = err.message;\n          }\n          callback(\n            AWS.util.error(\n              new Error('Error fetching MFA token: ' + message),\n              { code: self.errorCode}\n            )\n          );\n          return;\n        }\n        callback(null, token);\n      });\n    } else {\n      callback(null);\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"script"}