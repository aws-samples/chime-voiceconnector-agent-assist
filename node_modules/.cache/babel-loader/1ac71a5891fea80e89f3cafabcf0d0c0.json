{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\n\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser = function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    _classCallCheck(this, CognitoUser);\n\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + '.' + this.username + '.userData';\n  }\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  };\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n\n\n  CognitoUser.prototype.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  };\n  /**\n   * @returns {string} the user's username\n   */\n\n\n  CognitoUser.prototype.getUsername = function getUsername() {\n    return this.username;\n  };\n  /**\n   * @returns {String} the authentication flow type\n   */\n\n\n  CognitoUser.prototype.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  };\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  };\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\n      _this.cacheTokens();\n\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  };\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  };\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue = void 0;\n    var salt = void 0;\n    var authParameters = {};\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n\n        _this2.getCachedDeviceKeyAndPassword();\n\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n\n                _this2.clearCachedDeviceKeyAndPassword();\n\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  };\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    } // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  };\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n        _this4.cacheDeviceKeyAndPassword();\n\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n\n      return undefined;\n    });\n    return undefined;\n  };\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  };\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */\n\n\n  CognitoUser.prototype.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata\n      };\n\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n            _this6.cacheTokens();\n\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n\n          return undefined; // getPasswordAuthenticationKey callback end\n        });\n        return undefined;\n      }); // getLargeAValue callback end\n\n    });\n  };\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n  };\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  };\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      var challengeName = dataAuthenticate.ChallengeName;\n\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n\n        return undefined;\n      }\n\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\n      _this8.cacheTokens();\n\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: navigator.userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\n          _this8.cacheDeviceKeyAndPassword();\n\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n\n        return undefined;\n      });\n      return undefined;\n    });\n  };\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      _this9.clearCachedUser();\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      var attributeList = [];\n\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n\n      return callback(null, attributeList);\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserData = function getUserData(callback, params) {\n    var _this10 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    var bypassCache = params ? params.bypassCache : false;\n    var userData = this.storage.getItem(this.userDataKey); // get the cached user data\n\n    if (!userData || bypassCache) {\n      this.client.request('GetUser', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, latestUserData) {\n        if (err) {\n          return callback(err, null);\n        }\n\n        _this10.cacheUserData(latestUserData);\n\n        var refresh = _this10.signInUserSession.getRefreshToken();\n\n        if (refresh && refresh.getToken()) {\n          _this10.refreshSession(refresh, function (refreshError, data) {\n            if (refreshError) {\n              return callback(refreshError, null);\n            }\n\n            return callback(null, latestUserData);\n          });\n        } else {\n          return callback(null, latestUserData);\n        }\n      });\n    } else {\n      try {\n        return callback(null, JSON.parse(userData));\n      } catch (err) {\n        this.clearCachedUserData();\n        return callback(err, null);\n      }\n    }\n\n    return undefined;\n  };\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n\n      return callback(null, result);\n    });\n  };\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getSession = function getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var idTokenKey = keyPrefix + '.idToken';\n    var accessTokenKey = keyPrefix + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.clockDrift';\n\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n\n      this.refreshSession(refreshToken, callback);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n\n    return undefined;\n  };\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this11 = this;\n\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this11.clearCachedUser();\n        }\n\n        return callback(err, null);\n      }\n\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n\n        _this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n\n        _this11.cacheTokens();\n\n        return callback(null, _this11.signInUserSession);\n      }\n\n      return undefined;\n    });\n  };\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.cacheTokens = function cacheTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, '' + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  };\n  /**\n   * This is to cache user data\n   */\n\n\n  CognitoUser.prototype.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  };\n  /**\n   * This is to remove cached user data\n   */\n\n\n  CognitoUser.prototype.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n\n  CognitoUser.prototype.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  };\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  };\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  };\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  };\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  };\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n\n\n  CognitoUser.prototype.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  };\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess(data);\n    });\n  };\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess();\n    });\n  };\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n\n      return callback.onSuccess();\n    });\n    return undefined;\n  };\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.forgetDevice = function forgetDevice(callback) {\n    var _this12 = this;\n\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this12.deviceKey = null;\n        _this12.deviceGroupKey = null;\n        _this12.randomPassword = null;\n\n        _this12.clearCachedDeviceKeyAndPassword();\n\n        return callback.onSuccess(result);\n      }\n    });\n  };\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('ListDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.globalSignOut = function globalSignOut(callback) {\n    var _this13 = this;\n\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this13.clearCachedUser();\n\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this14 = this;\n\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n\n      _this14.Session = data.Session;\n\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.challengeName, data.challengeParameters);\n      }\n\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.challengeName, data.challengeParameters);\n      }\n\n      return undefined;\n    });\n  };\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  };\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this15 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this15.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  };\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n\n  CognitoUser.prototype.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this16 = this;\n\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        _this16.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this16.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this16.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this16.Session\n        };\n\n        if (_this16.getUserContextData()) {\n          jsonReq.UserContextData = _this16.getUserContextData();\n        }\n\n        _this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n\n          _this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n\n          _this16.cacheTokens();\n\n          return callback.onSuccess(_this16.signInUserSession);\n        });\n\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n\n        return callback.onSuccess(data);\n      });\n    }\n  };\n\n  return CognitoUser;\n}();\n\nexport default CognitoUser;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/amazon-cognito-identity-js/es/CognitoUser.js"],"names":["_classCallCheck","instance","Constructor","TypeError","Buffer","CryptoJS","TypedArrays","Base64","HmacSHA256","BigInteger","AuthenticationHelper","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoUserSession","DateHelper","CognitoUserAttribute","StorageHelper","CognitoUser","data","Username","Pool","Error","username","pool","Session","client","signInUserSession","authenticationFlowType","storage","Storage","getStorage","keyPrefix","getClientId","userDataKey","prototype","setSignInUserSession","clearCachedUserData","cacheTokens","getSignInUserSession","getUsername","getAuthenticationFlowType","setAuthenticationFlowType","initiateAuth","authDetails","callback","_this","authParameters","getAuthParameters","USERNAME","clientMetaData","Object","keys","getValidationData","length","getClientMetadata","jsonReq","AuthFlow","ClientId","AuthParameters","ClientMetadata","getUserContextData","UserContextData","request","err","onFailure","challengeName","ChallengeName","challengeParameters","ChallengeParameters","customChallenge","getCognitoUserSession","AuthenticationResult","onSuccess","authenticateUser","authenticateUserPlainUsernamePassword","authenticateUserDefaultAuth","_this2","authenticationHelper","getUserPoolId","split","dateHelper","serverBValue","salt","deviceKey","DEVICE_KEY","getLargeAValue","errOnAValue","aValue","SRP_A","toString","CHALLENGE_NAME","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","errOnHkdf","hkdf","dateNow","getNowString","message","lib","WordArray","create","concat","from","SECRET_BLOCK","key","signatureString","stringify","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","toLowerCase","indexOf","randomPassword","deviceGroupKey","clearCachedDeviceKeyAndPassword","jsonReqResp","ChallengeResponses","errAuthenticate","dataAuthenticate","authenticateUserInternal","undefined","_this3","PASSWORD","authResult","_this4","mfaRequired","selectMFAType","mfaSetup","totpRequired","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","JSON","parse","i","substr","newPasswordRequired","getDeviceResponse","newDeviceMetadata","NewDeviceMetadata","generateHashDevice","DeviceGroupKey","DeviceKey","errGenHash","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","verifierDevices","getRandomPassword","AccessToken","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","completeNewPasswordChallenge","newPassword","requiredAttributeData","clientMetadata","_this5","finalUserAttributes","forEach","NEW_PASSWORD","_this6","errAValue","errHkdf","confirmRegistration","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","sendCustomChallengeAnswer","answerChallenge","_this7","ANSWER","sendMFACode","mfaType","_this8","SMS_MFA_CODE","mfaTypeSelection","SOFTWARE_TOKEN_MFA_CODE","changePassword","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","enableMFA","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","setUserMfaPreference","smsMfaSettings","softwareTokenMfaSettings","SMSMfaSettings","SoftwareTokenMfaSettings","disableMFA","deleteUser","_this9","clearCachedUser","updateAttributes","attributes","UserAttributes","getUserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","getMFAOptions","getUserData","params","_this10","bypassCache","getItem","latestUserData","cacheUserData","refresh","getRefreshToken","getToken","refreshSession","refreshError","deleteAttributes","UserAttributeNames","resendConfirmationCode","result","getSession","idTokenKey","accessTokenKey","refreshTokenKey","clockDriftKey","idToken","IdToken","accessToken","refreshToken","RefreshToken","clockDrift","parseInt","sessionData","ClockDrift","cachedSession","_this11","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authenticationResult","hasOwnProperty","call","setItem","getIdToken","getClockDrift","removeItem","clearCachedTokens","randomPasswordKey","deviceGroupKeyKey","forgotPassword","inputVerificationCode","confirmPassword","Password","getAttributeVerificationCode","attributeName","verifyAttribute","Code","getDevice","forgetSpecificDevice","forgetDevice","_this12","setDeviceStatusRemembered","DeviceRememberedStatus","setDeviceStatusNotRemembered","listDevices","limit","paginationToken","Limit","PaginationToken","globalSignOut","_this13","signOut","sendMFASelectionAnswer","_this14","associateSoftwareToken","_this15","associateSecretCode","SecretCode","verifySoftwareToken","totpCode","friendlyDeviceName","_this16","UserCode","FriendlyDeviceName","errRespond","dataRespond"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;AAEzJ;;;;;;;;;;;;;;;;;;AAiBA,SAASC,MAAT,QAAuB,SAAvB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,WAAP,MAAwB,2BAAxB,C,CAAqD;;AACrD,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA;;;;;;;AAOA;;;;;AAKA;;;;;;AAMA;;;;;AAKA;;;;;AAKA;;;;;AAKA;;;;;;AAMA;;AAEA,IAAIC,WAAW,GAAG,YAAY;AAC7B;;;;;;;AAOA,WAASA,WAAT,CAAqBC,IAArB,EAA2B;AAC1BnB,IAAAA,eAAe,CAAC,IAAD,EAAOkB,WAAP,CAAf;;AAEA,QAAIC,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACC,QAAL,IAAiB,IAAjC,IAAyCD,IAAI,CAACE,IAAL,IAAa,IAA1D,EAAgE;AAC/D,YAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACA;;AAED,SAAKC,QAAL,GAAgBJ,IAAI,CAACC,QAAL,IAAiB,EAAjC;AACA,SAAKI,IAAL,GAAYL,IAAI,CAACE,IAAjB;AACA,SAAKI,OAAL,GAAe,IAAf;AAEA,SAAKC,MAAL,GAAcP,IAAI,CAACE,IAAL,CAAUK,MAAxB;AAEA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,sBAAL,GAA8B,eAA9B;AAEA,SAAKC,OAAL,GAAeV,IAAI,CAACW,OAAL,IAAgB,IAAIb,aAAJ,GAAoBc,UAApB,EAA/B;AAEA,SAAKC,SAAL,GAAiB,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAArD;AACA,SAAKC,WAAL,GAAmB,KAAKF,SAAL,GAAiB,GAAjB,GAAuB,KAAKT,QAA5B,GAAuC,WAA1D;AACA;AAED;;;;;;;AAOAL,EAAAA,WAAW,CAACiB,SAAZ,CAAsBC,oBAAtB,GAA6C,SAASA,oBAAT,CAA8BT,iBAA9B,EAAiD;AAC7F,SAAKU,mBAAL;AACA,SAAKV,iBAAL,GAAyBA,iBAAzB;AACA,SAAKW,WAAL;AACA,GAJD;AAMA;;;;;AAKApB,EAAAA,WAAW,CAACiB,SAAZ,CAAsBI,oBAAtB,GAA6C,SAASA,oBAAT,GAAgC;AAC5E,WAAO,KAAKZ,iBAAZ;AACA,GAFD;AAIA;;;;;AAKAT,EAAAA,WAAW,CAACiB,SAAZ,CAAsBK,WAAtB,GAAoC,SAASA,WAAT,GAAuB;AAC1D,WAAO,KAAKjB,QAAZ;AACA,GAFD;AAIA;;;;;AAKAL,EAAAA,WAAW,CAACiB,SAAZ,CAAsBM,yBAAtB,GAAkD,SAASA,yBAAT,GAAqC;AACtF,WAAO,KAAKb,sBAAZ;AACA,GAFD;AAIA;;;;;;;AAOAV,EAAAA,WAAW,CAACiB,SAAZ,CAAsBO,yBAAtB,GAAkD,SAASA,yBAAT,CAAmCd,sBAAnC,EAA2D;AAC5G,SAAKA,sBAAL,GAA8BA,sBAA9B;AACA,GAFD;AAIA;;;;;;;;;;;;AAYAV,EAAAA,WAAW,CAACiB,SAAZ,CAAsBQ,YAAtB,GAAqC,SAASA,YAAT,CAAsBC,WAAtB,EAAmCC,QAAnC,EAA6C;AACjF,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAIC,cAAc,GAAGH,WAAW,CAACI,iBAAZ,EAArB;AACAD,IAAAA,cAAc,CAACE,QAAf,GAA0B,KAAK1B,QAA/B;AAEA,QAAI2B,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYR,WAAW,CAACS,iBAAZ,EAAZ,EAA6CC,MAA7C,KAAwD,CAAxD,GAA4DV,WAAW,CAACS,iBAAZ,EAA5D,GAA8FT,WAAW,CAACW,iBAAZ,EAAnH;AAEA,QAAIC,OAAO,GAAG;AACbC,MAAAA,QAAQ,EAAE,aADG;AAEbC,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EAFG;AAGb0B,MAAAA,cAAc,EAAEZ,cAHH;AAIba,MAAAA,cAAc,EAAEV;AAJH,KAAd;;AAMA,QAAI,KAAKW,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AAED,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,cAApB,EAAoCP,OAApC,EAA6C,UAAUQ,GAAV,EAAe7C,IAAf,EAAqB;AACjE,UAAI6C,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,UAAIE,aAAa,GAAG/C,IAAI,CAACgD,aAAzB;AACA,UAAIC,mBAAmB,GAAGjD,IAAI,CAACkD,mBAA/B;;AAEA,UAAIH,aAAa,KAAK,kBAAtB,EAA0C;AACzCpB,QAAAA,KAAK,CAACrB,OAAN,GAAgBN,IAAI,CAACM,OAArB;AACA,eAAOoB,QAAQ,CAACyB,eAAT,CAAyBF,mBAAzB,CAAP;AACA;;AACDtB,MAAAA,KAAK,CAACnB,iBAAN,GAA0BmB,KAAK,CAACyB,qBAAN,CAA4BpD,IAAI,CAACqD,oBAAjC,CAA1B;;AACA1B,MAAAA,KAAK,CAACR,WAAN;;AACA,aAAOO,QAAQ,CAAC4B,SAAT,CAAmB3B,KAAK,CAACnB,iBAAzB,CAAP;AACA,KAdD;AAeA,GAjCD;AAmCA;;;;;;;;;;;;;;;;;AAiBAT,EAAAA,WAAW,CAACiB,SAAZ,CAAsBuC,gBAAtB,GAAyC,SAASA,gBAAT,CAA0B9B,WAA1B,EAAuCC,QAAvC,EAAiD;AACzF,QAAI,KAAKjB,sBAAL,KAAgC,oBAApC,EAA0D;AACzD,aAAO,KAAK+C,qCAAL,CAA2C/B,WAA3C,EAAwDC,QAAxD,CAAP;AACA,KAFD,MAEO,IAAI,KAAKjB,sBAAL,KAAgC,eAAhC,IAAmD,KAAKA,sBAAL,KAAgC,aAAvF,EAAsG;AAC5G,aAAO,KAAKgD,2BAAL,CAAiChC,WAAjC,EAA8CC,QAA9C,CAAP;AACA;;AACD,WAAOA,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,sCAAV,CAAnB,CAAP;AACA,GAPD;AASA;;;;;;;;;;;;;;;;;;;AAmBAJ,EAAAA,WAAW,CAACiB,SAAZ,CAAsByC,2BAAtB,GAAoD,SAASA,2BAAT,CAAqChC,WAArC,EAAkDC,QAAlD,EAA4D;AAC/G,QAAIgC,MAAM,GAAG,IAAb;;AAEA,QAAIC,oBAAoB,GAAG,IAAIpE,oBAAJ,CAAyB,KAAKc,IAAL,CAAUuD,aAAV,GAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAzB,CAA3B;AACA,QAAIC,UAAU,GAAG,IAAIlE,UAAJ,EAAjB;AAEA,QAAImE,YAAY,GAAG,KAAK,CAAxB;AACA,QAAIC,IAAI,GAAG,KAAK,CAAhB;AACA,QAAIpC,cAAc,GAAG,EAArB;;AAEA,QAAI,KAAKqC,SAAL,IAAkB,IAAtB,EAA4B;AAC3BrC,MAAAA,cAAc,CAACsC,UAAf,GAA4B,KAAKD,SAAjC;AACA;;AAEDrC,IAAAA,cAAc,CAACE,QAAf,GAA0B,KAAK1B,QAA/B;AACAuD,IAAAA,oBAAoB,CAACQ,cAArB,CAAoC,UAAUC,WAAV,EAAuBC,MAAvB,EAA+B;AAClE;AACA,UAAID,WAAJ,EAAiB;AAChB1C,QAAAA,QAAQ,CAACoB,SAAT,CAAmBsB,WAAnB;AACA;;AAEDxC,MAAAA,cAAc,CAAC0C,KAAf,GAAuBD,MAAM,CAACE,QAAP,CAAgB,EAAhB,CAAvB;;AAEA,UAAIb,MAAM,CAACjD,sBAAP,KAAkC,aAAtC,EAAqD;AACpDmB,QAAAA,cAAc,CAAC4C,cAAf,GAAgC,OAAhC;AACA;;AAED,UAAIzC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYR,WAAW,CAACS,iBAAZ,EAAZ,EAA6CC,MAA7C,KAAwD,CAAxD,GAA4DV,WAAW,CAACS,iBAAZ,EAA5D,GAA8FT,WAAW,CAACW,iBAAZ,EAAnH;AAEA,UAAIC,OAAO,GAAG;AACbC,QAAAA,QAAQ,EAAEoB,MAAM,CAACjD,sBADJ;AAEb8B,QAAAA,QAAQ,EAAEmB,MAAM,CAACrD,IAAP,CAAYS,WAAZ,EAFG;AAGb0B,QAAAA,cAAc,EAAEZ,cAHH;AAIba,QAAAA,cAAc,EAAEV;AAJH,OAAd;;AAMA,UAAI2B,MAAM,CAAChB,kBAAP,CAA0BgB,MAAM,CAACtD,QAAjC,CAAJ,EAAgD;AAC/CiC,QAAAA,OAAO,CAACM,eAAR,GAA0Be,MAAM,CAAChB,kBAAP,CAA0BgB,MAAM,CAACtD,QAAjC,CAA1B;AACA;;AAEDsD,MAAAA,MAAM,CAACnD,MAAP,CAAcqC,OAAd,CAAsB,cAAtB,EAAsCP,OAAtC,EAA+C,UAAUQ,GAAV,EAAe7C,IAAf,EAAqB;AACnE,YAAI6C,GAAJ,EAAS;AACR,iBAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AAED,YAAII,mBAAmB,GAAGjD,IAAI,CAACkD,mBAA/B;AAEAQ,QAAAA,MAAM,CAACtD,QAAP,GAAkB6C,mBAAmB,CAACwB,eAAtC;AACAV,QAAAA,YAAY,GAAG,IAAIzE,UAAJ,CAAe2D,mBAAmB,CAACyB,KAAnC,EAA0C,EAA1C,CAAf;AACAV,QAAAA,IAAI,GAAG,IAAI1E,UAAJ,CAAe2D,mBAAmB,CAAC0B,IAAnC,EAAyC,EAAzC,CAAP;;AACAjB,QAAAA,MAAM,CAACkB,6BAAP;;AAEAjB,QAAAA,oBAAoB,CAACkB,4BAArB,CAAkDnB,MAAM,CAACtD,QAAzD,EAAmEqB,WAAW,CAACqD,WAAZ,EAAnE,EAA8Ff,YAA9F,EAA4GC,IAA5G,EAAkH,UAAUe,SAAV,EAAqBC,IAArB,EAA2B;AAC5I;AACA,cAAID,SAAJ,EAAe;AACdrD,YAAAA,QAAQ,CAACoB,SAAT,CAAmBiC,SAAnB;AACA;;AAED,cAAIE,OAAO,GAAGnB,UAAU,CAACoB,YAAX,EAAd;AAEA,cAAIC,OAAO,GAAGjG,QAAQ,CAACkG,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BrG,MAAM,CAACsG,MAAP,CAAc,CAACtG,MAAM,CAACuG,IAAP,CAAY9B,MAAM,CAACrD,IAAP,CAAYuD,aAAZ,GAA4BC,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAZ,EAAuD,MAAvD,CAAD,EAAiE5E,MAAM,CAACuG,IAAP,CAAY9B,MAAM,CAACtD,QAAnB,EAA6B,MAA7B,CAAjE,EAAuGnB,MAAM,CAACuG,IAAP,CAAYvC,mBAAmB,CAACwC,YAAhC,EAA8C,QAA9C,CAAvG,EAAgKxG,MAAM,CAACuG,IAAP,CAAYP,OAAZ,EAAqB,MAArB,CAAhK,CAAd,CAA9B,CAAd;AACA,cAAIS,GAAG,GAAGxG,QAAQ,CAACkG,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BN,IAA9B,CAAV;AACA,cAAIW,eAAe,GAAGvG,MAAM,CAACwG,SAAP,CAAiBvG,UAAU,CAAC8F,OAAD,EAAUO,GAAV,CAA3B,CAAtB;AAEA,cAAIG,kBAAkB,GAAG,EAAzB;AAEAA,UAAAA,kBAAkB,CAAC/D,QAAnB,GAA8B4B,MAAM,CAACtD,QAArC;AACAyF,UAAAA,kBAAkB,CAACC,2BAAnB,GAAiD7C,mBAAmB,CAACwC,YAArE;AACAI,UAAAA,kBAAkB,CAACE,SAAnB,GAA+Bd,OAA/B;AACAY,UAAAA,kBAAkB,CAACG,wBAAnB,GAA8CL,eAA9C;;AAEA,cAAIjC,MAAM,CAACO,SAAP,IAAoB,IAAxB,EAA8B;AAC7B4B,YAAAA,kBAAkB,CAAC3B,UAAnB,GAAgCR,MAAM,CAACO,SAAvC;AACA;;AAED,cAAIgC,sBAAsB,GAAG,SAASA,sBAAT,CAAgCC,SAAhC,EAA2CC,iBAA3C,EAA8D;AAC1F,mBAAOzC,MAAM,CAACnD,MAAP,CAAcqC,OAAd,CAAsB,wBAAtB,EAAgDsD,SAAhD,EAA2D,UAAUE,YAAV,EAAwBC,aAAxB,EAAuC;AACxG,kBAAID,YAAY,IAAIA,YAAY,CAACE,IAAb,KAAsB,2BAAtC,IAAqEF,YAAY,CAACjB,OAAb,CAAqBoB,WAArB,GAAmCC,OAAnC,CAA2C,QAA3C,MAAyD,CAAC,CAAnI,EAAsI;AACrIX,gBAAAA,kBAAkB,CAAC3B,UAAnB,GAAgC,IAAhC;AACAR,gBAAAA,MAAM,CAACO,SAAP,GAAmB,IAAnB;AACAP,gBAAAA,MAAM,CAAC+C,cAAP,GAAwB,IAAxB;AACA/C,gBAAAA,MAAM,CAACgD,cAAP,GAAwB,IAAxB;;AACAhD,gBAAAA,MAAM,CAACiD,+BAAP;;AACA,uBAAOV,sBAAsB,CAACC,SAAD,EAAYC,iBAAZ,CAA7B;AACA;;AACD,qBAAOA,iBAAiB,CAACC,YAAD,EAAeC,aAAf,CAAxB;AACA,aAVM,CAAP;AAWA,WAZD;;AAcA,cAAIO,WAAW,GAAG;AACjB5D,YAAAA,aAAa,EAAE,mBADE;AAEjBT,YAAAA,QAAQ,EAAEmB,MAAM,CAACrD,IAAP,CAAYS,WAAZ,EAFO;AAGjB+F,YAAAA,kBAAkB,EAAEhB,kBAHH;AAIjBvF,YAAAA,OAAO,EAAEN,IAAI,CAACM,OAJG;AAKjBmC,YAAAA,cAAc,EAAEV;AALC,WAAlB;;AAOA,cAAI2B,MAAM,CAAChB,kBAAP,EAAJ,EAAiC;AAChCkE,YAAAA,WAAW,CAACjE,eAAZ,GAA8Be,MAAM,CAAChB,kBAAP,EAA9B;AACA;;AACDuD,UAAAA,sBAAsB,CAACW,WAAD,EAAc,UAAUE,eAAV,EAA2BC,gBAA3B,EAA6C;AAChF,gBAAID,eAAJ,EAAqB;AACpB,qBAAOpF,QAAQ,CAACoB,SAAT,CAAmBgE,eAAnB,CAAP;AACA;;AAED,mBAAOpD,MAAM,CAACsD,wBAAP,CAAgCD,gBAAhC,EAAkDpD,oBAAlD,EAAwEjC,QAAxE,CAAP;AACA,WANqB,CAAtB;AAOA,iBAAOuF,SAAP,CAtD4I,CAuD5I;AACA,SAxDD;AAyDA,eAAOA,SAAP;AACA,OAtED,EAxBkE,CA+FlE;;AACA,KAhGD;AAiGA,GAhHD;AAkHA;;;;;;;;;;;;;AAaAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBwC,qCAAtB,GAA8D,SAASA,qCAAT,CAA+C/B,WAA/C,EAA4DC,QAA5D,EAAsE;AACnI,QAAIwF,MAAM,GAAG,IAAb;;AAEA,QAAItF,cAAc,GAAG,EAArB;AACAA,IAAAA,cAAc,CAACE,QAAf,GAA0B,KAAK1B,QAA/B;AACAwB,IAAAA,cAAc,CAACuF,QAAf,GAA0B1F,WAAW,CAACqD,WAAZ,EAA1B;;AACA,QAAI,CAAClD,cAAc,CAACuF,QAApB,EAA8B;AAC7BzF,MAAAA,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,gCAAV,CAAnB;AACA;AACA;;AACD,QAAIwD,oBAAoB,GAAG,IAAIpE,oBAAJ,CAAyB,KAAKc,IAAL,CAAUuD,aAAV,GAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAzB,CAA3B;AACA,SAAKe,6BAAL;;AACA,QAAI,KAAKX,SAAL,IAAkB,IAAtB,EAA4B;AAC3BrC,MAAAA,cAAc,CAACsC,UAAf,GAA4B,KAAKD,SAAjC;AACA;;AAED,QAAIlC,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYR,WAAW,CAACS,iBAAZ,EAAZ,EAA6CC,MAA7C,KAAwD,CAAxD,GAA4DV,WAAW,CAACS,iBAAZ,EAA5D,GAA8FT,WAAW,CAACW,iBAAZ,EAAnH;AAEA,QAAIC,OAAO,GAAG;AACbC,MAAAA,QAAQ,EAAE,oBADG;AAEbC,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EAFG;AAGb0B,MAAAA,cAAc,EAAEZ,cAHH;AAIba,MAAAA,cAAc,EAAEV;AAJH,KAAd;;AAMA,QAAI,KAAKW,kBAAL,CAAwB,KAAKtC,QAA7B,CAAJ,EAA4C;AAC3CiC,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,CAAwB,KAAKtC,QAA7B,CAA1B;AACA,KA1BkI,CA2BnI;AACA;;;AACA,SAAKG,MAAL,CAAYqC,OAAZ,CAAoB,cAApB,EAAoCP,OAApC,EAA6C,UAAUQ,GAAV,EAAeuE,UAAf,EAA2B;AACvE,UAAIvE,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOqE,MAAM,CAACF,wBAAP,CAAgCI,UAAhC,EAA4CzD,oBAA5C,EAAkEjC,QAAlE,CAAP;AACA,KALD;AAMA,GAnCD;AAqCA;;;;;;;;;;AAUA3B,EAAAA,WAAW,CAACiB,SAAZ,CAAsBgG,wBAAtB,GAAiD,SAASA,wBAAT,CAAkCD,gBAAlC,EAAoDpD,oBAApD,EAA0EjC,QAA1E,EAAoF;AACpI,QAAI2F,MAAM,GAAG,IAAb;;AAEA,QAAItE,aAAa,GAAGgE,gBAAgB,CAAC/D,aAArC;AACA,QAAIC,mBAAmB,GAAG8D,gBAAgB,CAAC7D,mBAA3C;;AAEA,QAAIH,aAAa,KAAK,SAAtB,EAAiC;AAChC,WAAKzC,OAAL,GAAeyG,gBAAgB,CAACzG,OAAhC;AACA,aAAOoB,QAAQ,CAAC4F,WAAT,CAAqBvE,aAArB,EAAoCE,mBAApC,CAAP;AACA;;AAED,QAAIF,aAAa,KAAK,iBAAtB,EAAyC;AACxC,WAAKzC,OAAL,GAAeyG,gBAAgB,CAACzG,OAAhC;AACA,aAAOoB,QAAQ,CAAC6F,aAAT,CAAuBxE,aAAvB,EAAsCE,mBAAtC,CAAP;AACA;;AAED,QAAIF,aAAa,KAAK,WAAtB,EAAmC;AAClC,WAAKzC,OAAL,GAAeyG,gBAAgB,CAACzG,OAAhC;AACA,aAAOoB,QAAQ,CAAC8F,QAAT,CAAkBzE,aAAlB,EAAiCE,mBAAjC,CAAP;AACA;;AAED,QAAIF,aAAa,KAAK,oBAAtB,EAA4C;AAC3C,WAAKzC,OAAL,GAAeyG,gBAAgB,CAACzG,OAAhC;AACA,aAAOoB,QAAQ,CAAC+F,YAAT,CAAsB1E,aAAtB,EAAqCE,mBAArC,CAAP;AACA;;AAED,QAAIF,aAAa,KAAK,kBAAtB,EAA0C;AACzC,WAAKzC,OAAL,GAAeyG,gBAAgB,CAACzG,OAAhC;AACA,aAAOoB,QAAQ,CAACyB,eAAT,CAAyBF,mBAAzB,CAAP;AACA;;AAED,QAAIF,aAAa,KAAK,uBAAtB,EAA+C;AAC9C,WAAKzC,OAAL,GAAeyG,gBAAgB,CAACzG,OAAhC;AAEA,UAAIoH,cAAc,GAAG,IAArB;AACA,UAAIC,qBAAqB,GAAG,IAA5B;AACA,UAAIC,kBAAkB,GAAG,EAAzB;AACA,UAAIC,oBAAoB,GAAGlE,oBAAoB,CAACmE,kDAArB,EAA3B;;AAEA,UAAI7E,mBAAJ,EAAyB;AACxByE,QAAAA,cAAc,GAAGK,IAAI,CAACC,KAAL,CAAWjB,gBAAgB,CAAC7D,mBAAjB,CAAqCwE,cAAhD,CAAjB;AACAC,QAAAA,qBAAqB,GAAGI,IAAI,CAACC,KAAL,CAAWjB,gBAAgB,CAAC7D,mBAAjB,CAAqC0E,kBAAhD,CAAxB;AACA;;AAED,UAAID,qBAAJ,EAA2B;AAC1B,aAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,qBAAqB,CAACxF,MAA1C,EAAkD8F,CAAC,EAAnD,EAAuD;AACtDL,UAAAA,kBAAkB,CAACK,CAAD,CAAlB,GAAwBN,qBAAqB,CAACM,CAAD,CAArB,CAAyBC,MAAzB,CAAgCL,oBAAoB,CAAC1F,MAArD,CAAxB;AACA;AACD;;AACD,aAAOT,QAAQ,CAACyG,mBAAT,CAA6BT,cAA7B,EAA6CE,kBAA7C,CAAP;AACA;;AAED,QAAI7E,aAAa,KAAK,iBAAtB,EAAyC;AACxC,WAAKqF,iBAAL,CAAuB1G,QAAvB;AACA,aAAOuF,SAAP;AACA;;AAED,SAAKzG,iBAAL,GAAyB,KAAK4C,qBAAL,CAA2B2D,gBAAgB,CAAC1D,oBAA5C,CAAzB;AACA,SAAKN,aAAL,GAAqBA,aAArB;AACA,SAAK5B,WAAL;AAEA,QAAIkH,iBAAiB,GAAGtB,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAA9D;;AACA,QAAID,iBAAiB,IAAI,IAAzB,EAA+B;AAC9B,aAAO3G,QAAQ,CAAC4B,SAAT,CAAmB,KAAK9C,iBAAxB,CAAP;AACA;;AAEDmD,IAAAA,oBAAoB,CAAC4E,kBAArB,CAAwCxB,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDE,cAAhG,EAAgHzB,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDG,SAAxK,EAAmL,UAAUC,UAAV,EAAsB;AACxM,UAAIA,UAAJ,EAAgB;AACf,eAAOhH,QAAQ,CAACoB,SAAT,CAAmB4F,UAAnB,CAAP;AACA;;AAED,UAAIC,0BAA0B,GAAG;AAChCC,QAAAA,IAAI,EAAE3J,MAAM,CAACuG,IAAP,CAAY7B,oBAAoB,CAACkF,cAArB,EAAZ,EAAmD,KAAnD,EAA0DtE,QAA1D,CAAmE,QAAnE,CAD0B;AAEhCuE,QAAAA,gBAAgB,EAAE7J,MAAM,CAACuG,IAAP,CAAY7B,oBAAoB,CAACoF,kBAArB,EAAZ,EAAuD,KAAvD,EAA8DxE,QAA9D,CAAuE,QAAvE;AAFc,OAAjC;AAKA8C,MAAAA,MAAM,CAAC2B,eAAP,GAAyBL,0BAA0B,CAACG,gBAApD;AACAzB,MAAAA,MAAM,CAACX,cAAP,GAAwB2B,iBAAiB,CAACG,cAA1C;AACAnB,MAAAA,MAAM,CAACZ,cAAP,GAAwB9C,oBAAoB,CAACsF,iBAArB,EAAxB;;AAEA5B,MAAAA,MAAM,CAAC9G,MAAP,CAAcqC,OAAd,CAAsB,eAAtB,EAAuC;AACtC6F,QAAAA,SAAS,EAAEJ,iBAAiB,CAACI,SADS;AAEtCS,QAAAA,WAAW,EAAE7B,MAAM,CAAC7G,iBAAP,CAAyB2I,cAAzB,GAA0CC,WAA1C,EAFyB;AAGtCC,QAAAA,0BAA0B,EAAEV,0BAHU;AAItCW,QAAAA,UAAU,EAAEC,SAAS,CAACC;AAJgB,OAAvC,EAKG,UAAUC,UAAV,EAAsBC,WAAtB,EAAmC;AACrC,YAAID,UAAJ,EAAgB;AACf,iBAAO/H,QAAQ,CAACoB,SAAT,CAAmB2G,UAAnB,CAAP;AACA;;AAEDpC,QAAAA,MAAM,CAACpD,SAAP,GAAmB8C,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDG,SAA3E;;AACApB,QAAAA,MAAM,CAACsC,yBAAP;;AACA,YAAID,WAAW,CAACE,yBAAZ,KAA0C,IAA9C,EAAoD;AACnD,iBAAOlI,QAAQ,CAAC4B,SAAT,CAAmB+D,MAAM,CAAC7G,iBAA1B,EAA6CkJ,WAAW,CAACE,yBAAzD,CAAP;AACA;;AACD,eAAOlI,QAAQ,CAAC4B,SAAT,CAAmB+D,MAAM,CAAC7G,iBAA1B,CAAP;AACA,OAhBD;;AAiBA,aAAOyG,SAAP;AACA,KAhCD;AAiCA,WAAOA,SAAP;AACA,GApGD;AAsGA;;;;;;;;;;;;;;;;;AAiBAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB6I,4BAAtB,GAAqD,SAASA,4BAAT,CAAsCC,WAAtC,EAAmDC,qBAAnD,EAA0ErI,QAA1E,EAAoFsI,cAApF,EAAoG;AACxJ,QAAIC,MAAM,GAAG,IAAb;;AAEA,QAAI,CAACH,WAAL,EAAkB;AACjB,aAAOpI,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AACD,QAAIwD,oBAAoB,GAAG,IAAIpE,oBAAJ,CAAyB,KAAKc,IAAL,CAAUuD,aAAV,GAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAzB,CAA3B;AACA,QAAIgE,oBAAoB,GAAGlE,oBAAoB,CAACmE,kDAArB,EAA3B;AAEA,QAAIoC,mBAAmB,GAAG,EAA1B;;AACA,QAAIH,qBAAJ,EAA2B;AAC1B/H,MAAAA,MAAM,CAACC,IAAP,CAAY8H,qBAAZ,EAAmCI,OAAnC,CAA2C,UAAUzE,GAAV,EAAe;AACzDwE,QAAAA,mBAAmB,CAACrC,oBAAoB,GAAGnC,GAAxB,CAAnB,GAAkDqE,qBAAqB,CAACrE,GAAD,CAAvE;AACA,OAFD;AAGA;;AAEDwE,IAAAA,mBAAmB,CAACE,YAApB,GAAmCN,WAAnC;AACAI,IAAAA,mBAAmB,CAACpI,QAApB,GAA+B,KAAK1B,QAApC;AACA,QAAIiC,OAAO,GAAG;AACbW,MAAAA,aAAa,EAAE,uBADF;AAEbT,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EAFG;AAGb+F,MAAAA,kBAAkB,EAAEqD,mBAHP;AAIb5J,MAAAA,OAAO,EAAE,KAAKA,OAJD;AAKbmC,MAAAA,cAAc,EAAEuH;AALH,KAAd;;AAOA,QAAI,KAAKtH,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AAED,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,wBAApB,EAA8CP,OAA9C,EAAuD,UAAUyE,eAAV,EAA2BC,gBAA3B,EAA6C;AACnG,UAAID,eAAJ,EAAqB;AACpB,eAAOpF,QAAQ,CAACoB,SAAT,CAAmBgE,eAAnB,CAAP;AACA;;AACD,aAAOmD,MAAM,CAACjD,wBAAP,CAAgCD,gBAAhC,EAAkDpD,oBAAlD,EAAwEjC,QAAxE,CAAP;AACA,KALD;AAMA,WAAOuF,SAAP;AACA,GApCD;AAsCA;;;;;;;;;;;;;AAaAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBoH,iBAAtB,GAA0C,SAASA,iBAAT,CAA2B1G,QAA3B,EAAqCsI,cAArC,EAAqD;AAC9F,QAAIK,MAAM,GAAG,IAAb;;AAEA,QAAI1G,oBAAoB,GAAG,IAAIpE,oBAAJ,CAAyB,KAAKmH,cAA9B,CAA3B;AACA,QAAI5C,UAAU,GAAG,IAAIlE,UAAJ,EAAjB;AAEA,QAAIgC,cAAc,GAAG,EAArB;AAEAA,IAAAA,cAAc,CAACE,QAAf,GAA0B,KAAK1B,QAA/B;AACAwB,IAAAA,cAAc,CAACsC,UAAf,GAA4B,KAAKD,SAAjC;AACAN,IAAAA,oBAAoB,CAACQ,cAArB,CAAoC,UAAUmG,SAAV,EAAqBjG,MAArB,EAA6B;AAChE;AACA,UAAIiG,SAAJ,EAAe;AACd5I,QAAAA,QAAQ,CAACoB,SAAT,CAAmBwH,SAAnB;AACA;;AAED1I,MAAAA,cAAc,CAAC0C,KAAf,GAAuBD,MAAM,CAACE,QAAP,CAAgB,EAAhB,CAAvB;AAEA,UAAIlC,OAAO,GAAG;AACbW,QAAAA,aAAa,EAAE,iBADF;AAEbT,QAAAA,QAAQ,EAAE8H,MAAM,CAAChK,IAAP,CAAYS,WAAZ,EAFG;AAGb+F,QAAAA,kBAAkB,EAAEjF,cAHP;AAIba,QAAAA,cAAc,EAAEuH;AAJH,OAAd;;AAMA,UAAIK,MAAM,CAAC3H,kBAAP,EAAJ,EAAiC;AAChCL,QAAAA,OAAO,CAACM,eAAR,GAA0B0H,MAAM,CAAC3H,kBAAP,EAA1B;AACA;;AACD2H,MAAAA,MAAM,CAAC9J,MAAP,CAAcqC,OAAd,CAAsB,wBAAtB,EAAgDP,OAAhD,EAAyD,UAAUQ,GAAV,EAAe7C,IAAf,EAAqB;AAC7E,YAAI6C,GAAJ,EAAS;AACR,iBAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AAED,YAAII,mBAAmB,GAAGjD,IAAI,CAACkD,mBAA/B;AAEA,YAAIa,YAAY,GAAG,IAAIzE,UAAJ,CAAe2D,mBAAmB,CAACyB,KAAnC,EAA0C,EAA1C,CAAnB;AACA,YAAIV,IAAI,GAAG,IAAI1E,UAAJ,CAAe2D,mBAAmB,CAAC0B,IAAnC,EAAyC,EAAzC,CAAX;AAEAhB,QAAAA,oBAAoB,CAACkB,4BAArB,CAAkDwF,MAAM,CAACpG,SAAzD,EAAoEoG,MAAM,CAAC5D,cAA3E,EAA2F1C,YAA3F,EAAyGC,IAAzG,EAA+G,UAAUuG,OAAV,EAAmBvF,IAAnB,EAAyB;AACvI;AACA,cAAIuF,OAAJ,EAAa;AACZ,mBAAO7I,QAAQ,CAACoB,SAAT,CAAmByH,OAAnB,CAAP;AACA;;AAED,cAAItF,OAAO,GAAGnB,UAAU,CAACoB,YAAX,EAAd;AAEA,cAAIC,OAAO,GAAGjG,QAAQ,CAACkG,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BrG,MAAM,CAACsG,MAAP,CAAc,CAACtG,MAAM,CAACuG,IAAP,CAAY6E,MAAM,CAAC3D,cAAnB,EAAmC,MAAnC,CAAD,EAA6CzH,MAAM,CAACuG,IAAP,CAAY6E,MAAM,CAACpG,SAAnB,EAA8B,MAA9B,CAA7C,EAAoFhF,MAAM,CAACuG,IAAP,CAAYvC,mBAAmB,CAACwC,YAAhC,EAA8C,QAA9C,CAApF,EAA6IxG,MAAM,CAACuG,IAAP,CAAYP,OAAZ,EAAqB,MAArB,CAA7I,CAAd,CAA9B,CAAd;AACA,cAAIS,GAAG,GAAGxG,QAAQ,CAACkG,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8BN,IAA9B,CAAV;AACA,cAAIW,eAAe,GAAGvG,MAAM,CAACwG,SAAP,CAAiBvG,UAAU,CAAC8F,OAAD,EAAUO,GAAV,CAA3B,CAAtB;AAEA,cAAIG,kBAAkB,GAAG,EAAzB;AAEAA,UAAAA,kBAAkB,CAAC/D,QAAnB,GAA8BuI,MAAM,CAACjK,QAArC;AACAyF,UAAAA,kBAAkB,CAACC,2BAAnB,GAAiD7C,mBAAmB,CAACwC,YAArE;AACAI,UAAAA,kBAAkB,CAACE,SAAnB,GAA+Bd,OAA/B;AACAY,UAAAA,kBAAkB,CAACG,wBAAnB,GAA8CL,eAA9C;AACAE,UAAAA,kBAAkB,CAAC3B,UAAnB,GAAgCmG,MAAM,CAACpG,SAAvC;AAEA,cAAI2C,WAAW,GAAG;AACjB5D,YAAAA,aAAa,EAAE,0BADE;AAEjBT,YAAAA,QAAQ,EAAE8H,MAAM,CAAChK,IAAP,CAAYS,WAAZ,EAFO;AAGjB+F,YAAAA,kBAAkB,EAAEhB,kBAHH;AAIjBvF,YAAAA,OAAO,EAAEN,IAAI,CAACM;AAJG,WAAlB;;AAMA,cAAI+J,MAAM,CAAC3H,kBAAP,EAAJ,EAAiC;AAChCkE,YAAAA,WAAW,CAACjE,eAAZ,GAA8B0H,MAAM,CAAC3H,kBAAP,EAA9B;AACA;;AAED2H,UAAAA,MAAM,CAAC9J,MAAP,CAAcqC,OAAd,CAAsB,wBAAtB,EAAgDgE,WAAhD,EAA6D,UAAUE,eAAV,EAA2BC,gBAA3B,EAA6C;AACzG,gBAAID,eAAJ,EAAqB;AACpB,qBAAOpF,QAAQ,CAACoB,SAAT,CAAmBgE,eAAnB,CAAP;AACA;;AAEDuD,YAAAA,MAAM,CAAC7J,iBAAP,GAA2B6J,MAAM,CAACjH,qBAAP,CAA6B2D,gBAAgB,CAAC1D,oBAA9C,CAA3B;;AACAgH,YAAAA,MAAM,CAAClJ,WAAP;;AAEA,mBAAOO,QAAQ,CAAC4B,SAAT,CAAmB+G,MAAM,CAAC7J,iBAA1B,CAAP;AACA,WATD;;AAUA,iBAAOyG,SAAP,CAxCuI,CAyCvI;AACA,SA1CD;AA2CA,eAAOA,SAAP;AACA,OAtDD,EAjBgE,CAwEhE;;AACA,KAzED;AA0EA,GApFD;AAsFA;;;;;;;;;;AAUAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBwJ,mBAAtB,GAA4C,SAASA,mBAAT,CAA6BC,gBAA7B,EAA+CC,kBAA/C,EAAmEhJ,QAAnE,EAA6EsI,cAA7E,EAA6F;AACxI,QAAI3H,OAAO,GAAG;AACbE,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EADG;AAEb6J,MAAAA,gBAAgB,EAAEF,gBAFL;AAGbxK,MAAAA,QAAQ,EAAE,KAAKG,QAHF;AAIbwK,MAAAA,kBAAkB,EAAEF,kBAJP;AAKbjI,MAAAA,cAAc,EAAEuH;AALH,KAAd;;AAOA,QAAI,KAAKtH,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AACD,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,eAApB,EAAqCP,OAArC,EAA8C,UAAUQ,GAAV,EAAe;AAC5D,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KALD;AAMA,GAjBD;AAmBA;;;;;;;;;;;;;AAaA3B,EAAAA,WAAW,CAACiB,SAAZ,CAAsB6J,yBAAtB,GAAkD,SAASA,yBAAT,CAAmCC,eAAnC,EAAoDpJ,QAApD,EAA8DsI,cAA9D,EAA8E;AAC/H,QAAIe,MAAM,GAAG,IAAb;;AAEA,QAAIlF,kBAAkB,GAAG,EAAzB;AACAA,IAAAA,kBAAkB,CAAC/D,QAAnB,GAA8B,KAAK1B,QAAnC;AACAyF,IAAAA,kBAAkB,CAACmF,MAAnB,GAA4BF,eAA5B;AAEA,QAAInH,oBAAoB,GAAG,IAAIpE,oBAAJ,CAAyB,KAAKc,IAAL,CAAUuD,aAAV,GAA0BC,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAzB,CAA3B;AACA,SAAKe,6BAAL;;AACA,QAAI,KAAKX,SAAL,IAAkB,IAAtB,EAA4B;AAC3B4B,MAAAA,kBAAkB,CAAC3B,UAAnB,GAAgC,KAAKD,SAArC;AACA;;AAED,QAAI5B,OAAO,GAAG;AACbW,MAAAA,aAAa,EAAE,kBADF;AAEb6D,MAAAA,kBAAkB,EAAEhB,kBAFP;AAGbtD,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EAHG;AAIbR,MAAAA,OAAO,EAAE,KAAKA,OAJD;AAKbmC,MAAAA,cAAc,EAAEuH;AALH,KAAd;;AAOA,QAAI,KAAKtH,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AACD,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,wBAApB,EAA8CP,OAA9C,EAAuD,UAAUQ,GAAV,EAAe7C,IAAf,EAAqB;AAC3E,UAAI6C,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AAED,aAAOkI,MAAM,CAAC/D,wBAAP,CAAgChH,IAAhC,EAAsC2D,oBAAtC,EAA4DjC,QAA5D,CAAP;AACA,KAND;AAOA,GA9BD;AAgCA;;;;;;;;;;;;AAYA3B,EAAAA,WAAW,CAACiB,SAAZ,CAAsBiK,WAAtB,GAAoC,SAASA,WAAT,CAAqBR,gBAArB,EAAuC/I,QAAvC,EAAiDwJ,OAAjD,EAA0DlB,cAA1D,EAA0E;AAC7G,QAAImB,MAAM,GAAG,IAAb;;AAEA,QAAItF,kBAAkB,GAAG,EAAzB;AACAA,IAAAA,kBAAkB,CAAC/D,QAAnB,GAA8B,KAAK1B,QAAnC;AACAyF,IAAAA,kBAAkB,CAACuF,YAAnB,GAAkCX,gBAAlC;AACA,QAAIY,gBAAgB,GAAGH,OAAO,IAAI,SAAlC;;AACA,QAAIG,gBAAgB,KAAK,oBAAzB,EAA+C;AAC9CxF,MAAAA,kBAAkB,CAACyF,uBAAnB,GAA6Cb,gBAA7C;AACA;;AAED,QAAI,KAAKxG,SAAL,IAAkB,IAAtB,EAA4B;AAC3B4B,MAAAA,kBAAkB,CAAC3B,UAAnB,GAAgC,KAAKD,SAArC;AACA;;AAED,QAAI5B,OAAO,GAAG;AACbW,MAAAA,aAAa,EAAEqI,gBADF;AAEbxE,MAAAA,kBAAkB,EAAEhB,kBAFP;AAGbtD,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EAHG;AAIbR,MAAAA,OAAO,EAAE,KAAKA,OAJD;AAKbmC,MAAAA,cAAc,EAAEuH;AALH,KAAd;;AAOA,QAAI,KAAKtH,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AAED,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,wBAApB,EAA8CP,OAA9C,EAAuD,UAAUQ,GAAV,EAAekE,gBAAf,EAAiC;AACvF,UAAIlE,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AAED,UAAIE,aAAa,GAAGgE,gBAAgB,CAAC/D,aAArC;;AAEA,UAAID,aAAa,KAAK,iBAAtB,EAAyC;AACxCoI,QAAAA,MAAM,CAAC/C,iBAAP,CAAyB1G,QAAzB;;AACA,eAAOuF,SAAP;AACA;;AAEDkE,MAAAA,MAAM,CAAC3K,iBAAP,GAA2B2K,MAAM,CAAC/H,qBAAP,CAA6B2D,gBAAgB,CAAC1D,oBAA9C,CAA3B;;AACA8H,MAAAA,MAAM,CAAChK,WAAP;;AAEA,UAAI4F,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,IAA2D,IAA/D,EAAqE;AACpE,eAAO5G,QAAQ,CAAC4B,SAAT,CAAmB6H,MAAM,CAAC3K,iBAA1B,CAAP;AACA;;AAED,UAAImD,oBAAoB,GAAG,IAAIpE,oBAAJ,CAAyB4L,MAAM,CAAC9K,IAAP,CAAYuD,aAAZ,GAA4BC,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAzB,CAA3B;AACAF,MAAAA,oBAAoB,CAAC4E,kBAArB,CAAwCxB,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDE,cAAhG,EAAgHzB,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDG,SAAxK,EAAmL,UAAUC,UAAV,EAAsB;AACxM,YAAIA,UAAJ,EAAgB;AACf,iBAAOhH,QAAQ,CAACoB,SAAT,CAAmB4F,UAAnB,CAAP;AACA;;AAED,YAAIC,0BAA0B,GAAG;AAChCC,UAAAA,IAAI,EAAE3J,MAAM,CAACuG,IAAP,CAAY7B,oBAAoB,CAACkF,cAArB,EAAZ,EAAmD,KAAnD,EAA0DtE,QAA1D,CAAmE,QAAnE,CAD0B;AAEhCuE,UAAAA,gBAAgB,EAAE7J,MAAM,CAACuG,IAAP,CAAY7B,oBAAoB,CAACoF,kBAArB,EAAZ,EAAuD,KAAvD,EAA8DxE,QAA9D,CAAuE,QAAvE;AAFc,SAAjC;AAKA4G,QAAAA,MAAM,CAACnC,eAAP,GAAyBL,0BAA0B,CAACG,gBAApD;AACAqC,QAAAA,MAAM,CAACzE,cAAP,GAAwBK,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDE,cAAhF;AACA2C,QAAAA,MAAM,CAAC1E,cAAP,GAAwB9C,oBAAoB,CAACsF,iBAArB,EAAxB;;AAEAkC,QAAAA,MAAM,CAAC5K,MAAP,CAAcqC,OAAd,CAAsB,eAAtB,EAAuC;AACtC6F,UAAAA,SAAS,EAAE1B,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDG,SAD7B;AAEtCS,UAAAA,WAAW,EAAEiC,MAAM,CAAC3K,iBAAP,CAAyB2I,cAAzB,GAA0CC,WAA1C,EAFyB;AAGtCC,UAAAA,0BAA0B,EAAEV,0BAHU;AAItCW,UAAAA,UAAU,EAAEC,SAAS,CAACC;AAJgB,SAAvC,EAKG,UAAUC,UAAV,EAAsBC,WAAtB,EAAmC;AACrC,cAAID,UAAJ,EAAgB;AACf,mBAAO/H,QAAQ,CAACoB,SAAT,CAAmB2G,UAAnB,CAAP;AACA;;AAED0B,UAAAA,MAAM,CAAClH,SAAP,GAAmB8C,gBAAgB,CAAC1D,oBAAjB,CAAsCiF,iBAAtC,CAAwDG,SAA3E;;AACA0C,UAAAA,MAAM,CAACxB,yBAAP;;AACA,cAAID,WAAW,CAACE,yBAAZ,KAA0C,IAA9C,EAAoD;AACnD,mBAAOlI,QAAQ,CAAC4B,SAAT,CAAmB6H,MAAM,CAAC3K,iBAA1B,EAA6CkJ,WAAW,CAACE,yBAAzD,CAAP;AACA;;AACD,iBAAOlI,QAAQ,CAAC4B,SAAT,CAAmB6H,MAAM,CAAC3K,iBAA1B,CAAP;AACA,SAhBD;;AAiBA,eAAOyG,SAAP;AACA,OAhCD;AAiCA,aAAOA,SAAP;AACA,KAtDD;AAuDA,GAjFD;AAmFA;;;;;;;;;;AAUAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBuK,cAAtB,GAAuC,SAASA,cAAT,CAAwBC,eAAxB,EAAyCC,eAAzC,EAA0D/J,QAA1D,EAAoEsI,cAApE,EAAoF;AAC1H,QAAI,EAAE,KAAKxJ,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAApC,CAAJ,EAA2E;AAC1E,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,gBAApB,EAAsC;AACrC+I,MAAAA,gBAAgB,EAAEH,eADmB;AAErCI,MAAAA,gBAAgB,EAAEH,eAFmB;AAGrCvC,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EAHwB;AAIrC3G,MAAAA,cAAc,EAAEuH;AAJqB,KAAtC,EAKG,UAAUnH,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KAVD;AAWA,WAAOuF,SAAP;AACA,GAjBD;AAmBA;;;;;;;;AAQAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB6K,SAAtB,GAAkC,SAASA,SAAT,CAAmBnK,QAAnB,EAA6B;AAC9D,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,QAAI2L,UAAU,GAAG,EAAjB;AACA,QAAIC,UAAU,GAAG;AAChBC,MAAAA,cAAc,EAAE,KADA;AAEhBC,MAAAA,aAAa,EAAE;AAFC,KAAjB;AAIAH,IAAAA,UAAU,CAACI,IAAX,CAAgBH,UAAhB;AAEA,SAAKxL,MAAL,CAAYqC,OAAZ,CAAoB,iBAApB,EAAuC;AACtCuJ,MAAAA,UAAU,EAAEL,UAD0B;AAEtC5C,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AAFyB,KAAvC,EAGG,UAAUvG,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KARD;AASA,WAAOuF,SAAP;AACA,GAtBD;AAwBA;;;;;;;;;AASAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBoL,oBAAtB,GAA6C,SAASA,oBAAT,CAA8BC,cAA9B,EAA8CC,wBAA9C,EAAwE5K,QAAxE,EAAkF;AAC9H,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,sBAApB,EAA4C;AAC3C2J,MAAAA,cAAc,EAAEF,cAD2B;AAE3CG,MAAAA,wBAAwB,EAAEF,wBAFiB;AAG3CpD,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AAH8B,KAA5C,EAIG,UAAUvG,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KATD;AAUA,WAAOuF,SAAP;AACA,GAhBD;AAkBA;;;;;;;;AAQAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsByL,UAAtB,GAAmC,SAASA,UAAT,CAAoB/K,QAApB,EAA8B;AAChE,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,QAAI2L,UAAU,GAAG,EAAjB;AAEA,SAAKvL,MAAL,CAAYqC,OAAZ,CAAoB,iBAApB,EAAuC;AACtCuJ,MAAAA,UAAU,EAAEL,UAD0B;AAEtC5C,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AAFyB,KAAvC,EAGG,UAAUvG,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KARD;AASA,WAAOuF,SAAP;AACA,GAjBD;AAmBA;;;;;;;;AAQAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB0L,UAAtB,GAAmC,SAASA,UAAT,CAAoBhL,QAApB,EAA8BsI,cAA9B,EAA8C;AAChF,QAAI2C,MAAM,GAAG,IAAb;;AAEA,QAAI,KAAKnM,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,YAApB,EAAkC;AACjCsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EADoB;AAEjC3G,MAAAA,cAAc,EAAEuH;AAFiB,KAAlC,EAGG,UAAUnH,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD8J,MAAAA,MAAM,CAACC,eAAP;;AACA,aAAOlL,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KATD;AAUA,WAAOuF,SAAP;AACA,GAlBD;AAoBA;;;;AAGA;;;;;;;;;AASAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB6L,gBAAtB,GAAyC,SAASA,gBAAT,CAA0BC,UAA1B,EAAsCpL,QAAtC,EAAgDsI,cAAhD,EAAgE;AACxG,QAAI,KAAKxJ,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,sBAApB,EAA4C;AAC3CsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EAD8B;AAE3C2D,MAAAA,cAAc,EAAED,UAF2B;AAG3CrK,MAAAA,cAAc,EAAEuH;AAH2B,KAA5C,EAIG,UAAUnH,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KATD;AAUA,WAAOuF,SAAP;AACA,GAhBD;AAkBA;;;;;;;AAOAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBgM,iBAAtB,GAA0C,SAASA,iBAAT,CAA2BtL,QAA3B,EAAqC;AAC9E,QAAI,EAAE,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAApC,CAAJ,EAA2E;AAC1E,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,SAApB,EAA+B;AAC9BsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AADiB,KAA/B,EAEG,UAAUvG,GAAV,EAAeoK,QAAf,EAAyB;AAC3B,UAAIpK,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AAED,UAAIqK,aAAa,GAAG,EAApB;;AAEA,WAAK,IAAIjF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgF,QAAQ,CAACF,cAAT,CAAwB5K,MAA5C,EAAoD8F,CAAC,EAArD,EAAyD;AACxD,YAAIkF,SAAS,GAAG;AACfC,UAAAA,IAAI,EAAEH,QAAQ,CAACF,cAAT,CAAwB9E,CAAxB,EAA2BmF,IADlB;AAEfC,UAAAA,KAAK,EAAEJ,QAAQ,CAACF,cAAT,CAAwB9E,CAAxB,EAA2BoF;AAFnB,SAAhB;AAIA,YAAIC,aAAa,GAAG,IAAIzN,oBAAJ,CAAyBsN,SAAzB,CAApB;AACAD,QAAAA,aAAa,CAAChB,IAAd,CAAmBoB,aAAnB;AACA;;AAED,aAAO5L,QAAQ,CAAC,IAAD,EAAOwL,aAAP,CAAf;AACA,KAnBD;AAoBA,WAAOjG,SAAP;AACA,GA1BD;AA4BA;;;;;;;AAOAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBuM,aAAtB,GAAsC,SAASA,aAAT,CAAuB7L,QAAvB,EAAiC;AACtE,QAAI,EAAE,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAApC,CAAJ,EAA2E;AAC1E,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,SAApB,EAA+B;AAC9BsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AADiB,KAA/B,EAEG,UAAUvG,GAAV,EAAeoK,QAAf,EAAyB;AAC3B,UAAIpK,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AAED,aAAOnB,QAAQ,CAAC,IAAD,EAAOuL,QAAQ,CAACd,UAAhB,CAAf;AACA,KARD;AASA,WAAOlF,SAAP;AACA,GAfD;AAiBA;;;;;;;AAOAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBwM,WAAtB,GAAoC,SAASA,WAAT,CAAqB9L,QAArB,EAA+B+L,MAA/B,EAAuC;AAC1E,QAAIC,OAAO,GAAG,IAAd;;AAEA,QAAI,EAAE,KAAKlN,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAApC,CAAJ,EAA2E;AAC1E,WAAKxK,mBAAL;AACA,aAAOQ,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,QAAIwN,WAAW,GAAGF,MAAM,GAAGA,MAAM,CAACE,WAAV,GAAwB,KAAhD;AAEA,QAAIV,QAAQ,GAAG,KAAKvM,OAAL,CAAakN,OAAb,CAAqB,KAAK7M,WAA1B,CAAf,CAV0E,CAW1E;;AAEA,QAAI,CAACkM,QAAD,IAAaU,WAAjB,EAA8B;AAC7B,WAAKpN,MAAL,CAAYqC,OAAZ,CAAoB,SAApB,EAA+B;AAC9BsG,QAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AADiB,OAA/B,EAEG,UAAUvG,GAAV,EAAegL,cAAf,EAA+B;AACjC,YAAIhL,GAAJ,EAAS;AACR,iBAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD6K,QAAAA,OAAO,CAACI,aAAR,CAAsBD,cAAtB;;AACA,YAAIE,OAAO,GAAGL,OAAO,CAAClN,iBAAR,CAA0BwN,eAA1B,EAAd;;AACA,YAAID,OAAO,IAAIA,OAAO,CAACE,QAAR,EAAf,EAAmC;AAClCP,UAAAA,OAAO,CAACQ,cAAR,CAAuBH,OAAvB,EAAgC,UAAUI,YAAV,EAAwBnO,IAAxB,EAA8B;AAC7D,gBAAImO,YAAJ,EAAkB;AACjB,qBAAOzM,QAAQ,CAACyM,YAAD,EAAe,IAAf,CAAf;AACA;;AACD,mBAAOzM,QAAQ,CAAC,IAAD,EAAOmM,cAAP,CAAf;AACA,WALD;AAMA,SAPD,MAOO;AACN,iBAAOnM,QAAQ,CAAC,IAAD,EAAOmM,cAAP,CAAf;AACA;AACD,OAlBD;AAmBA,KApBD,MAoBO;AACN,UAAI;AACH,eAAOnM,QAAQ,CAAC,IAAD,EAAOqG,IAAI,CAACC,KAAL,CAAWiF,QAAX,CAAP,CAAf;AACA,OAFD,CAEE,OAAOpK,GAAP,EAAY;AACb,aAAK3B,mBAAL;AACA,eAAOQ,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;AACD;;AACD,WAAOoE,SAAP;AACA,GA1CD;AA4CA;;;;;;;;AAQAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBoN,gBAAtB,GAAyC,SAASA,gBAAT,CAA0BlB,aAA1B,EAAyCxL,QAAzC,EAAmD;AAC3F,QAAI,EAAE,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAApC,CAAJ,EAA2E;AAC1E,aAAOhK,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2BAAV,CAAD,EAAyC,IAAzC,CAAf;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,sBAApB,EAA4C;AAC3CyL,MAAAA,kBAAkB,EAAEnB,aADuB;AAE3ChE,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AAF8B,KAA5C,EAGG,UAAUvG,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO,SAAP,CAAf;AACA,KARD;AASA,WAAOuF,SAAP;AACA,GAfD;AAiBA;;;;;;;;AAQAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBsN,sBAAtB,GAA+C,SAASA,sBAAT,CAAgC5M,QAAhC,EAA0CsI,cAA1C,EAA0D;AACxG,QAAI3H,OAAO,GAAG;AACbE,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EADG;AAEbb,MAAAA,QAAQ,EAAE,KAAKG,QAFF;AAGbqC,MAAAA,cAAc,EAAEuH;AAHH,KAAd;AAMA,SAAKzJ,MAAL,CAAYqC,OAAZ,CAAoB,wBAApB,EAA8CP,OAA9C,EAAuD,UAAUQ,GAAV,EAAe0L,MAAf,EAAuB;AAC7E,UAAI1L,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,aAAOnB,QAAQ,CAAC,IAAD,EAAO6M,MAAP,CAAf;AACA,KALD;AAMA,GAbD;AAeA;;;;;;;;;AASAxO,EAAAA,WAAW,CAACiB,SAAZ,CAAsBwN,UAAtB,GAAmC,SAASA,UAAT,CAAoB9M,QAApB,EAA8B;AAChE,QAAI,KAAKtB,QAAL,IAAiB,IAArB,EAA2B;AAC1B,aAAOsB,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,iDAAV,CAAD,EAA+D,IAA/D,CAAf;AACA;;AAED,QAAI,KAAKK,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAtC,EAAwE;AACvE,aAAOhK,QAAQ,CAAC,IAAD,EAAO,KAAKlB,iBAAZ,CAAf;AACA;;AAED,QAAIK,SAAS,GAAG,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAApC,GAA8D,GAA9D,GAAoE,KAAKV,QAAzF;AACA,QAAIqO,UAAU,GAAG5N,SAAS,GAAG,UAA7B;AACA,QAAI6N,cAAc,GAAG7N,SAAS,GAAG,cAAjC;AACA,QAAI8N,eAAe,GAAG9N,SAAS,GAAG,eAAlC;AACA,QAAI+N,aAAa,GAAG/N,SAAS,GAAG,aAAhC;;AAEA,QAAI,KAAKH,OAAL,CAAakN,OAAb,CAAqBa,UAArB,CAAJ,EAAsC;AACrC,UAAII,OAAO,GAAG,IAAIpP,cAAJ,CAAmB;AAChCqP,QAAAA,OAAO,EAAE,KAAKpO,OAAL,CAAakN,OAAb,CAAqBa,UAArB;AADuB,OAAnB,CAAd;AAGA,UAAIM,WAAW,GAAG,IAAIvP,kBAAJ,CAAuB;AACxC0J,QAAAA,WAAW,EAAE,KAAKxI,OAAL,CAAakN,OAAb,CAAqBc,cAArB;AAD2B,OAAvB,CAAlB;AAGA,UAAIM,YAAY,GAAG,IAAItP,mBAAJ,CAAwB;AAC1CuP,QAAAA,YAAY,EAAE,KAAKvO,OAAL,CAAakN,OAAb,CAAqBe,eAArB;AAD4B,OAAxB,CAAnB;AAGA,UAAIO,UAAU,GAAGC,QAAQ,CAAC,KAAKzO,OAAL,CAAakN,OAAb,CAAqBgB,aAArB,CAAD,EAAsC,CAAtC,CAAR,IAAoD,CAArE;AAEA,UAAIQ,WAAW,GAAG;AACjBN,QAAAA,OAAO,EAAED,OADQ;AAEjB3F,QAAAA,WAAW,EAAE6F,WAFI;AAGjBE,QAAAA,YAAY,EAAED,YAHG;AAIjBK,QAAAA,UAAU,EAAEH;AAJK,OAAlB;AAMA,UAAII,aAAa,GAAG,IAAI3P,kBAAJ,CAAuByP,WAAvB,CAApB;;AACA,UAAIE,aAAa,CAAC5D,OAAd,EAAJ,EAA6B;AAC5B,aAAKlL,iBAAL,GAAyB8O,aAAzB;AACA,eAAO5N,QAAQ,CAAC,IAAD,EAAO,KAAKlB,iBAAZ,CAAf;AACA;;AAED,UAAI,CAACwO,YAAY,CAACf,QAAb,EAAL,EAA8B;AAC7B,eAAOvM,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,qDAAV,CAAD,EAAmE,IAAnE,CAAf;AACA;;AAED,WAAK+N,cAAL,CAAoBc,YAApB,EAAkCtN,QAAlC;AACA,KA7BD,MA6BO;AACNA,MAAAA,QAAQ,CAAC,IAAIvB,KAAJ,CAAU,2DAAV,CAAD,EAAyE,IAAzE,CAAR;AACA;;AAED,WAAO8G,SAAP;AACA,GAjDD;AAmDA;;;;;;;;;AASAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBkN,cAAtB,GAAuC,SAASA,cAAT,CAAwBc,YAAxB,EAAsCtN,QAAtC,EAAgDsI,cAAhD,EAAgE;AACtG,QAAIuF,OAAO,GAAG,IAAd;;AAEA,QAAI3N,cAAc,GAAG,EAArB;AACAA,IAAAA,cAAc,CAAC4N,aAAf,GAA+BR,YAAY,CAACf,QAAb,EAA/B;AACA,QAAIpN,SAAS,GAAG,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAApD;AACA,QAAI2O,WAAW,GAAG5O,SAAS,GAAG,eAA9B;;AAEA,QAAI,KAAKH,OAAL,CAAakN,OAAb,CAAqB6B,WAArB,CAAJ,EAAuC;AACtC,WAAKrP,QAAL,GAAgB,KAAKM,OAAL,CAAakN,OAAb,CAAqB6B,WAArB,CAAhB;AACA,UAAIC,YAAY,GAAG7O,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,YAArD;AACA,WAAK6D,SAAL,GAAiB,KAAKvD,OAAL,CAAakN,OAAb,CAAqB8B,YAArB,CAAjB;AACA9N,MAAAA,cAAc,CAACsC,UAAf,GAA4B,KAAKD,SAAjC;AACA;;AAED,QAAI5B,OAAO,GAAG;AACbE,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EADG;AAEbwB,MAAAA,QAAQ,EAAE,oBAFG;AAGbE,MAAAA,cAAc,EAAEZ,cAHH;AAIba,MAAAA,cAAc,EAAEuH;AAJH,KAAd;;AAMA,QAAI,KAAKtH,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AACD,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,cAApB,EAAoCP,OAApC,EAA6C,UAAUQ,GAAV,EAAeuE,UAAf,EAA2B;AACvE,UAAIvE,GAAJ,EAAS;AACR,YAAIA,GAAG,CAACyD,IAAJ,KAAa,wBAAjB,EAA2C;AAC1CiJ,UAAAA,OAAO,CAAC3C,eAAR;AACA;;AACD,eAAOlL,QAAQ,CAACmB,GAAD,EAAM,IAAN,CAAf;AACA;;AACD,UAAIuE,UAAJ,EAAgB;AACf,YAAIuI,oBAAoB,GAAGvI,UAAU,CAAC/D,oBAAtC;;AACA,YAAI,CAACrB,MAAM,CAAChB,SAAP,CAAiB4O,cAAjB,CAAgCC,IAAhC,CAAqCF,oBAArC,EAA2D,cAA3D,CAAL,EAAiF;AAChFA,UAAAA,oBAAoB,CAACV,YAArB,GAAoCD,YAAY,CAACf,QAAb,EAApC;AACA;;AACDsB,QAAAA,OAAO,CAAC/O,iBAAR,GAA4B+O,OAAO,CAACnM,qBAAR,CAA8BuM,oBAA9B,CAA5B;;AACAJ,QAAAA,OAAO,CAACpO,WAAR;;AACA,eAAOO,QAAQ,CAAC,IAAD,EAAO6N,OAAO,CAAC/O,iBAAf,CAAf;AACA;;AACD,aAAOyG,SAAP;AACA,KAjBD;AAkBA,GA1CD;AA4CA;;;;;;AAMAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBG,WAAtB,GAAoC,SAASA,WAAT,GAAuB;AAC1D,QAAIN,SAAS,GAAG,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAApD;AACA,QAAI2N,UAAU,GAAG5N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,UAAnD;AACA,QAAIsO,cAAc,GAAG7N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,cAAvD;AACA,QAAIuO,eAAe,GAAG9N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,eAAxD;AACA,QAAIwO,aAAa,GAAG/N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,aAAtD;AACA,QAAIqP,WAAW,GAAG5O,SAAS,GAAG,eAA9B;AAEA,SAAKH,OAAL,CAAaoP,OAAb,CAAqBrB,UAArB,EAAiC,KAAKjO,iBAAL,CAAuBuP,UAAvB,GAAoC3G,WAApC,EAAjC;AACA,SAAK1I,OAAL,CAAaoP,OAAb,CAAqBpB,cAArB,EAAqC,KAAKlO,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EAArC;AACA,SAAK1I,OAAL,CAAaoP,OAAb,CAAqBnB,eAArB,EAAsC,KAAKnO,iBAAL,CAAuBwN,eAAvB,GAAyCC,QAAzC,EAAtC;AACA,SAAKvN,OAAL,CAAaoP,OAAb,CAAqBlB,aAArB,EAAoC,KAAK,KAAKpO,iBAAL,CAAuBwP,aAAvB,EAAzC;AACA,SAAKtP,OAAL,CAAaoP,OAAb,CAAqBL,WAArB,EAAkC,KAAKrP,QAAvC;AACA,GAbD;AAeA;;;;;AAKAL,EAAAA,WAAW,CAACiB,SAAZ,CAAsB8M,aAAtB,GAAsC,SAASA,aAAT,CAAuBb,QAAvB,EAAiC;AACtE,SAAKvM,OAAL,CAAaoP,OAAb,CAAqB,KAAK/O,WAA1B,EAAuCgH,IAAI,CAACnC,SAAL,CAAeqH,QAAf,CAAvC;AACA,GAFD;AAIA;;;;;AAKAlN,EAAAA,WAAW,CAACiB,SAAZ,CAAsBE,mBAAtB,GAA4C,SAASA,mBAAT,GAA+B;AAC1E,SAAKR,OAAL,CAAauP,UAAb,CAAwB,KAAKlP,WAA7B;AACA,GAFD;;AAIAhB,EAAAA,WAAW,CAACiB,SAAZ,CAAsB4L,eAAtB,GAAwC,SAASA,eAAT,GAA2B;AAClE,SAAKsD,iBAAL;AACA,SAAKhP,mBAAL;AACA,GAHD;AAKA;;;;;;AAMAnB,EAAAA,WAAW,CAACiB,SAAZ,CAAsB2I,yBAAtB,GAAkD,SAASA,yBAAT,GAAqC;AACtF,QAAI9I,SAAS,GAAG,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAApC,GAA8D,GAA9D,GAAoE,KAAKV,QAAzF;AACA,QAAIsP,YAAY,GAAG7O,SAAS,GAAG,YAA/B;AACA,QAAIsP,iBAAiB,GAAGtP,SAAS,GAAG,oBAApC;AACA,QAAIuP,iBAAiB,GAAGvP,SAAS,GAAG,iBAApC;AAEA,SAAKH,OAAL,CAAaoP,OAAb,CAAqBJ,YAArB,EAAmC,KAAKzL,SAAxC;AACA,SAAKvD,OAAL,CAAaoP,OAAb,CAAqBK,iBAArB,EAAwC,KAAK1J,cAA7C;AACA,SAAK/F,OAAL,CAAaoP,OAAb,CAAqBM,iBAArB,EAAwC,KAAK1J,cAA7C;AACA,GATD;AAWA;;;;;;AAMA3G,EAAAA,WAAW,CAACiB,SAAZ,CAAsB4D,6BAAtB,GAAsD,SAASA,6BAAT,GAAyC;AAC9F,QAAI/D,SAAS,GAAG,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAApC,GAA8D,GAA9D,GAAoE,KAAKV,QAAzF;AACA,QAAIsP,YAAY,GAAG7O,SAAS,GAAG,YAA/B;AACA,QAAIsP,iBAAiB,GAAGtP,SAAS,GAAG,oBAApC;AACA,QAAIuP,iBAAiB,GAAGvP,SAAS,GAAG,iBAApC;;AAEA,QAAI,KAAKH,OAAL,CAAakN,OAAb,CAAqB8B,YAArB,CAAJ,EAAwC;AACvC,WAAKzL,SAAL,GAAiB,KAAKvD,OAAL,CAAakN,OAAb,CAAqB8B,YAArB,CAAjB;AACA,WAAKjJ,cAAL,GAAsB,KAAK/F,OAAL,CAAakN,OAAb,CAAqBuC,iBAArB,CAAtB;AACA,WAAKzJ,cAAL,GAAsB,KAAKhG,OAAL,CAAakN,OAAb,CAAqBwC,iBAArB,CAAtB;AACA;AACD,GAXD;AAaA;;;;;;AAMArQ,EAAAA,WAAW,CAACiB,SAAZ,CAAsB2F,+BAAtB,GAAwD,SAASA,+BAAT,GAA2C;AAClG,QAAI9F,SAAS,GAAG,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAApC,GAA8D,GAA9D,GAAoE,KAAKV,QAAzF;AACA,QAAIsP,YAAY,GAAG7O,SAAS,GAAG,YAA/B;AACA,QAAIsP,iBAAiB,GAAGtP,SAAS,GAAG,oBAApC;AACA,QAAIuP,iBAAiB,GAAGvP,SAAS,GAAG,iBAApC;AAEA,SAAKH,OAAL,CAAauP,UAAb,CAAwBP,YAAxB;AACA,SAAKhP,OAAL,CAAauP,UAAb,CAAwBE,iBAAxB;AACA,SAAKzP,OAAL,CAAauP,UAAb,CAAwBG,iBAAxB;AACA,GATD;AAWA;;;;;;AAMArQ,EAAAA,WAAW,CAACiB,SAAZ,CAAsBkP,iBAAtB,GAA0C,SAASA,iBAAT,GAA6B;AACtE,QAAIrP,SAAS,GAAG,oCAAoC,KAAKR,IAAL,CAAUS,WAAV,EAApD;AACA,QAAI2N,UAAU,GAAG5N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,UAAnD;AACA,QAAIsO,cAAc,GAAG7N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,cAAvD;AACA,QAAIuO,eAAe,GAAG9N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,eAAxD;AACA,QAAIqP,WAAW,GAAG5O,SAAS,GAAG,eAA9B;AACA,QAAI+N,aAAa,GAAG/N,SAAS,GAAG,GAAZ,GAAkB,KAAKT,QAAvB,GAAkC,aAAtD;AAEA,SAAKM,OAAL,CAAauP,UAAb,CAAwBxB,UAAxB;AACA,SAAK/N,OAAL,CAAauP,UAAb,CAAwBvB,cAAxB;AACA,SAAKhO,OAAL,CAAauP,UAAb,CAAwBtB,eAAxB;AACA,SAAKjO,OAAL,CAAauP,UAAb,CAAwBR,WAAxB;AACA,SAAK/O,OAAL,CAAauP,UAAb,CAAwBrB,aAAxB;AACA,GAbD;AAeA;;;;;;;;AAQA7O,EAAAA,WAAW,CAACiB,SAAZ,CAAsBoC,qBAAtB,GAA8C,SAASA,qBAAT,CAA+BgE,UAA/B,EAA2C;AACxF,QAAIyH,OAAO,GAAG,IAAIpP,cAAJ,CAAmB2H,UAAnB,CAAd;AACA,QAAI2H,WAAW,GAAG,IAAIvP,kBAAJ,CAAuB4H,UAAvB,CAAlB;AACA,QAAI4H,YAAY,GAAG,IAAItP,mBAAJ,CAAwB0H,UAAxB,CAAnB;AAEA,QAAIgI,WAAW,GAAG;AACjBN,MAAAA,OAAO,EAAED,OADQ;AAEjB3F,MAAAA,WAAW,EAAE6F,WAFI;AAGjBE,MAAAA,YAAY,EAAED;AAHG,KAAlB;AAMA,WAAO,IAAIrP,kBAAJ,CAAuByP,WAAvB,CAAP;AACA,GAZD;AAcA;;;;;;;;;;;;AAYArP,EAAAA,WAAW,CAACiB,SAAZ,CAAsBqP,cAAtB,GAAuC,SAASA,cAAT,CAAwB3O,QAAxB,EAAkCsI,cAAlC,EAAkD;AACxF,QAAI3H,OAAO,GAAG;AACbE,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EADG;AAEbb,MAAAA,QAAQ,EAAE,KAAKG,QAFF;AAGbqC,MAAAA,cAAc,EAAEuH;AAHH,KAAd;;AAKA,QAAI,KAAKtH,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AACD,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,gBAApB,EAAsCP,OAAtC,EAA+C,UAAUQ,GAAV,EAAe7C,IAAf,EAAqB;AACnE,UAAI6C,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,UAAI,OAAOnB,QAAQ,CAAC4O,qBAAhB,KAA0C,UAA9C,EAA0D;AACzD,eAAO5O,QAAQ,CAAC4O,qBAAT,CAA+BtQ,IAA/B,CAAP;AACA;;AACD,aAAO0B,QAAQ,CAAC4B,SAAT,CAAmBtD,IAAnB,CAAP;AACA,KARD;AASA,GAlBD;AAoBA;;;;;;;;;;;;AAYAD,EAAAA,WAAW,CAACiB,SAAZ,CAAsBuP,eAAtB,GAAwC,SAASA,eAAT,CAAyB9F,gBAAzB,EAA2CX,WAA3C,EAAwDpI,QAAxD,EAAkEsI,cAAlE,EAAkF;AACzH,QAAI3H,OAAO,GAAG;AACbE,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EADG;AAEbb,MAAAA,QAAQ,EAAE,KAAKG,QAFF;AAGbuK,MAAAA,gBAAgB,EAAEF,gBAHL;AAIb+F,MAAAA,QAAQ,EAAE1G,WAJG;AAKbrH,MAAAA,cAAc,EAAEuH;AALH,KAAd;;AAOA,QAAI,KAAKtH,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AACD,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,uBAApB,EAA6CP,OAA7C,EAAsD,UAAUQ,GAAV,EAAe;AACpE,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOnB,QAAQ,CAAC4B,SAAT,EAAP;AACA,KALD;AAMA,GAjBD;AAmBA;;;;;;;;;;;AAWAvD,EAAAA,WAAW,CAACiB,SAAZ,CAAsByP,4BAAtB,GAAqD,SAASA,4BAAT,CAAsCC,aAAtC,EAAqDhP,QAArD,EAA+DsI,cAA/D,EAA+E;AACnI,QAAI,KAAKxJ,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,kCAApB,EAAwD;AACvDqJ,MAAAA,aAAa,EAAEyE,aADwC;AAEvDxH,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EAF0C;AAGvD3G,MAAAA,cAAc,EAAEuH;AAHuC,KAAxD,EAIG,UAAUnH,GAAV,EAAe7C,IAAf,EAAqB;AACvB,UAAI6C,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,UAAI,OAAOnB,QAAQ,CAAC4O,qBAAhB,KAA0C,UAA9C,EAA0D;AACzD,eAAO5O,QAAQ,CAAC4O,qBAAT,CAA+BtQ,IAA/B,CAAP;AACA;;AACD,aAAO0B,QAAQ,CAAC4B,SAAT,EAAP;AACA,KAZD;AAaA,WAAO2D,SAAP;AACA,GAnBD;AAqBA;;;;;;;;;;;AAWAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB2P,eAAtB,GAAwC,SAASA,eAAT,CAAyBD,aAAzB,EAAwCjG,gBAAxC,EAA0D/I,QAA1D,EAAoE;AAC3G,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,qBAApB,EAA2C;AAC1CqJ,MAAAA,aAAa,EAAEyE,aAD2B;AAE1CE,MAAAA,IAAI,EAAEnG,gBAFoC;AAG1CvB,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AAH6B,KAA3C,EAIG,UAAUvG,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOnB,QAAQ,CAAC4B,SAAT,CAAmB,SAAnB,CAAP;AACA,KATD;AAUA,WAAO2D,SAAP;AACA,GAhBD;AAkBA;;;;;;;;;AASAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB6P,SAAtB,GAAkC,SAASA,SAAT,CAAmBnP,QAAnB,EAA6B;AAC9D,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,WAApB,EAAiC;AAChCsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EADmB;AAEhCX,MAAAA,SAAS,EAAE,KAAKxE;AAFgB,KAAjC,EAGG,UAAUpB,GAAV,EAAe7C,IAAf,EAAqB;AACvB,UAAI6C,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOnB,QAAQ,CAAC4B,SAAT,CAAmBtD,IAAnB,CAAP;AACA,KARD;AASA,WAAOiH,SAAP;AACA,GAfD;AAiBA;;;;;;;;;;AAUAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB8P,oBAAtB,GAA6C,SAASA,oBAAT,CAA8B7M,SAA9B,EAAyCvC,QAAzC,EAAmD;AAC/F,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,cAApB,EAAoC;AACnCsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EADsB;AAEnCX,MAAAA,SAAS,EAAExE;AAFwB,KAApC,EAGG,UAAUpB,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOnB,QAAQ,CAAC4B,SAAT,CAAmB,SAAnB,CAAP;AACA,KARD;AASA,WAAO2D,SAAP;AACA,GAfD;AAiBA;;;;;;;;;AASAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB+P,YAAtB,GAAqC,SAASA,YAAT,CAAsBrP,QAAtB,EAAgC;AACpE,QAAIsP,OAAO,GAAG,IAAd;;AAEA,SAAKF,oBAAL,CAA0B,KAAK7M,SAA/B,EAA0C;AACzCnB,MAAAA,SAAS,EAAEpB,QAAQ,CAACoB,SADqB;AAEzCQ,MAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBiL,MAAnB,EAA2B;AACrCyC,QAAAA,OAAO,CAAC/M,SAAR,GAAoB,IAApB;AACA+M,QAAAA,OAAO,CAACtK,cAAR,GAAyB,IAAzB;AACAsK,QAAAA,OAAO,CAACvK,cAAR,GAAyB,IAAzB;;AACAuK,QAAAA,OAAO,CAACrK,+BAAR;;AACA,eAAOjF,QAAQ,CAAC4B,SAAT,CAAmBiL,MAAnB,CAAP;AACA;AARwC,KAA1C;AAUA,GAbD;AAeA;;;;;;;;;AASAxO,EAAAA,WAAW,CAACiB,SAAZ,CAAsBiQ,yBAAtB,GAAkD,SAASA,yBAAT,CAAmCvP,QAAnC,EAA6C;AAC9F,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,oBAApB,EAA0C;AACzCsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EAD4B;AAEzCX,MAAAA,SAAS,EAAE,KAAKxE,SAFyB;AAGzCiN,MAAAA,sBAAsB,EAAE;AAHiB,KAA1C,EAIG,UAAUrO,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOnB,QAAQ,CAAC4B,SAAT,CAAmB,SAAnB,CAAP;AACA,KATD;AAUA,WAAO2D,SAAP;AACA,GAhBD;AAkBA;;;;;;;;;AASAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBmQ,4BAAtB,GAAqD,SAASA,4BAAT,CAAsCzP,QAAtC,EAAgD;AACpG,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,oBAApB,EAA0C;AACzCsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EAD4B;AAEzCX,MAAAA,SAAS,EAAE,KAAKxE,SAFyB;AAGzCiN,MAAAA,sBAAsB,EAAE;AAHiB,KAA1C,EAIG,UAAUrO,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOnB,QAAQ,CAAC4B,SAAT,CAAmB,SAAnB,CAAP;AACA,KATD;AAUA,WAAO2D,SAAP;AACA,GAhBD;AAkBA;;;;;;;;;;;;AAYAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsBoQ,WAAtB,GAAoC,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,eAA5B,EAA6C5P,QAA7C,EAAuD;AAC1F,QAAI,KAAKlB,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,aAApB,EAAmC;AAClCsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EADqB;AAElCmI,MAAAA,KAAK,EAAEF,KAF2B;AAGlCG,MAAAA,eAAe,EAAEF;AAHiB,KAAnC,EAIG,UAAUzO,GAAV,EAAe7C,IAAf,EAAqB;AACvB,UAAI6C,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,aAAOnB,QAAQ,CAAC4B,SAAT,CAAmBtD,IAAnB,CAAP;AACA,KATD;AAUA,WAAOiH,SAAP;AACA,GAhBD;AAkBA;;;;;;;;;AASAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsByQ,aAAtB,GAAsC,SAASA,aAAT,CAAuB/P,QAAvB,EAAiC;AACtE,QAAIgQ,OAAO,GAAG,IAAd;;AAEA,QAAI,KAAKlR,iBAAL,IAA0B,IAA1B,IAAkC,CAAC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAAvC,EAAyE;AACxE,aAAOhK,QAAQ,CAACoB,SAAT,CAAmB,IAAI3C,KAAJ,CAAU,2BAAV,CAAnB,CAAP;AACA;;AAED,SAAKI,MAAL,CAAYqC,OAAZ,CAAoB,eAApB,EAAqC;AACpCsG,MAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AADuB,KAArC,EAEG,UAAUvG,GAAV,EAAe;AACjB,UAAIA,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD6O,MAAAA,OAAO,CAAC9E,eAAR;;AACA,aAAOlL,QAAQ,CAAC4B,SAAT,CAAmB,SAAnB,CAAP;AACA,KARD;AASA,WAAO2D,SAAP;AACA,GAjBD;AAmBA;;;;;;AAMAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB2Q,OAAtB,GAAgC,SAASA,OAAT,GAAmB;AAClD,SAAKnR,iBAAL,GAAyB,IAAzB;AACA,SAAKoM,eAAL;AACA,GAHD;AAKA;;;;;;;;AAQA7M,EAAAA,WAAW,CAACiB,SAAZ,CAAsB4Q,sBAAtB,GAA+C,SAASA,sBAAT,CAAgC9G,eAAhC,EAAiDpJ,QAAjD,EAA2D;AACzG,QAAImQ,OAAO,GAAG,IAAd;;AAEA,QAAIhM,kBAAkB,GAAG,EAAzB;AACAA,IAAAA,kBAAkB,CAAC/D,QAAnB,GAA8B,KAAK1B,QAAnC;AACAyF,IAAAA,kBAAkB,CAACmF,MAAnB,GAA4BF,eAA5B;AAEA,QAAIzI,OAAO,GAAG;AACbW,MAAAA,aAAa,EAAE,iBADF;AAEb6D,MAAAA,kBAAkB,EAAEhB,kBAFP;AAGbtD,MAAAA,QAAQ,EAAE,KAAKlC,IAAL,CAAUS,WAAV,EAHG;AAIbR,MAAAA,OAAO,EAAE,KAAKA;AAJD,KAAd;;AAMA,QAAI,KAAKoC,kBAAL,EAAJ,EAA+B;AAC9BL,MAAAA,OAAO,CAACM,eAAR,GAA0B,KAAKD,kBAAL,EAA1B;AACA;;AACD,SAAKnC,MAAL,CAAYqC,OAAZ,CAAoB,wBAApB,EAA8CP,OAA9C,EAAuD,UAAUQ,GAAV,EAAe7C,IAAf,EAAqB;AAC3E,UAAI6C,GAAJ,EAAS;AACR,eAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACDgP,MAAAA,OAAO,CAACvR,OAAR,GAAkBN,IAAI,CAACM,OAAvB;;AACA,UAAIwK,eAAe,KAAK,SAAxB,EAAmC;AAClC,eAAOpJ,QAAQ,CAAC4F,WAAT,CAAqBtH,IAAI,CAAC+C,aAA1B,EAAyC/C,IAAI,CAACiD,mBAA9C,CAAP;AACA;;AACD,UAAI6H,eAAe,KAAK,oBAAxB,EAA8C;AAC7C,eAAOpJ,QAAQ,CAAC+F,YAAT,CAAsBzH,IAAI,CAAC+C,aAA3B,EAA0C/C,IAAI,CAACiD,mBAA/C,CAAP;AACA;;AACD,aAAOgE,SAAP;AACA,KAZD;AAaA,GA7BD;AA+BA;;;;;;AAMAlH,EAAAA,WAAW,CAACiB,SAAZ,CAAsB0B,kBAAtB,GAA2C,SAASA,kBAAT,GAA8B;AACxE,QAAIrC,IAAI,GAAG,KAAKA,IAAhB;AACA,WAAOA,IAAI,CAACqC,kBAAL,CAAwB,KAAKtC,QAA7B,CAAP;AACA,GAHD;AAKA;;;;;;;AAOAL,EAAAA,WAAW,CAACiB,SAAZ,CAAsB8Q,sBAAtB,GAA+C,SAASA,sBAAT,CAAgCpQ,QAAhC,EAA0C;AACxF,QAAIqQ,OAAO,GAAG,IAAd;;AAEA,QAAI,EAAE,KAAKvR,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAApC,CAAJ,EAA2E;AAC1E,WAAKnL,MAAL,CAAYqC,OAAZ,CAAoB,wBAApB,EAA8C;AAC7CtC,QAAAA,OAAO,EAAE,KAAKA;AAD+B,OAA9C,EAEG,UAAUuC,GAAV,EAAe7C,IAAf,EAAqB;AACvB,YAAI6C,GAAJ,EAAS;AACR,iBAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACDkP,QAAAA,OAAO,CAACzR,OAAR,GAAkBN,IAAI,CAACM,OAAvB;AACA,eAAOoB,QAAQ,CAACsQ,mBAAT,CAA6BhS,IAAI,CAACiS,UAAlC,CAAP;AACA,OARD;AASA,KAVD,MAUO;AACN,WAAK1R,MAAL,CAAYqC,OAAZ,CAAoB,wBAApB,EAA8C;AAC7CsG,QAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC;AADgC,OAA9C,EAEG,UAAUvG,GAAV,EAAe7C,IAAf,EAAqB;AACvB,YAAI6C,GAAJ,EAAS;AACR,iBAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,eAAOnB,QAAQ,CAACsQ,mBAAT,CAA6BhS,IAAI,CAACiS,UAAlC,CAAP;AACA,OAPD;AAQA;AACD,GAvBD;AAyBA;;;;;;;;;AASAlS,EAAAA,WAAW,CAACiB,SAAZ,CAAsBkR,mBAAtB,GAA4C,SAASA,mBAAT,CAA6BC,QAA7B,EAAuCC,kBAAvC,EAA2D1Q,QAA3D,EAAqE;AAChH,QAAI2Q,OAAO,GAAG,IAAd;;AAEA,QAAI,EAAE,KAAK7R,iBAAL,IAA0B,IAA1B,IAAkC,KAAKA,iBAAL,CAAuBkL,OAAvB,EAApC,CAAJ,EAA2E;AAC1E,WAAKnL,MAAL,CAAYqC,OAAZ,CAAoB,qBAApB,EAA2C;AAC1CtC,QAAAA,OAAO,EAAE,KAAKA,OAD4B;AAE1CgS,QAAAA,QAAQ,EAAEH,QAFgC;AAG1CI,QAAAA,kBAAkB,EAAEH;AAHsB,OAA3C,EAIG,UAAUvP,GAAV,EAAe7C,IAAf,EAAqB;AACvB,YAAI6C,GAAJ,EAAS;AACR,iBAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACDwP,QAAAA,OAAO,CAAC/R,OAAR,GAAkBN,IAAI,CAACM,OAAvB;AACA,YAAIuF,kBAAkB,GAAG,EAAzB;AACAA,QAAAA,kBAAkB,CAAC/D,QAAnB,GAA8BuQ,OAAO,CAACjS,QAAtC;AACA,YAAIiC,OAAO,GAAG;AACbW,UAAAA,aAAa,EAAE,WADF;AAEbT,UAAAA,QAAQ,EAAE8P,OAAO,CAAChS,IAAR,CAAaS,WAAb,EAFG;AAGb+F,UAAAA,kBAAkB,EAAEhB,kBAHP;AAIbvF,UAAAA,OAAO,EAAE+R,OAAO,CAAC/R;AAJJ,SAAd;;AAMA,YAAI+R,OAAO,CAAC3P,kBAAR,EAAJ,EAAkC;AACjCL,UAAAA,OAAO,CAACM,eAAR,GAA0B0P,OAAO,CAAC3P,kBAAR,EAA1B;AACA;;AACD2P,QAAAA,OAAO,CAAC9R,MAAR,CAAeqC,OAAf,CAAuB,wBAAvB,EAAiDP,OAAjD,EAA0D,UAAUmQ,UAAV,EAAsBC,WAAtB,EAAmC;AAC5F,cAAID,UAAJ,EAAgB;AACf,mBAAO9Q,QAAQ,CAACoB,SAAT,CAAmB0P,UAAnB,CAAP;AACA;;AACDH,UAAAA,OAAO,CAAC7R,iBAAR,GAA4B6R,OAAO,CAACjP,qBAAR,CAA8BqP,WAAW,CAACpP,oBAA1C,CAA5B;;AACAgP,UAAAA,OAAO,CAAClR,WAAR;;AACA,iBAAOO,QAAQ,CAAC4B,SAAT,CAAmB+O,OAAO,CAAC7R,iBAA3B,CAAP;AACA,SAPD;;AAQA,eAAOyG,SAAP;AACA,OA7BD;AA8BA,KA/BD,MA+BO;AACN,WAAK1G,MAAL,CAAYqC,OAAZ,CAAoB,qBAApB,EAA2C;AAC1CsG,QAAAA,WAAW,EAAE,KAAK1I,iBAAL,CAAuB2I,cAAvB,GAAwCC,WAAxC,EAD6B;AAE1CkJ,QAAAA,QAAQ,EAAEH,QAFgC;AAG1CI,QAAAA,kBAAkB,EAAEH;AAHsB,OAA3C,EAIG,UAAUvP,GAAV,EAAe7C,IAAf,EAAqB;AACvB,YAAI6C,GAAJ,EAAS;AACR,iBAAOnB,QAAQ,CAACoB,SAAT,CAAmBD,GAAnB,CAAP;AACA;;AACD,eAAOnB,QAAQ,CAAC4B,SAAT,CAAmBtD,IAAnB,CAAP;AACA,OATD;AAUA;AACD,GA9CD;;AAgDA,SAAOD,WAAP;AACA,CA5xDiB,EAAlB;;AA8xDA,eAAeA,WAAf","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\n\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser = function () {\n\t/**\n  * Constructs a new CognitoUser object\n  * @param {object} data Creation options\n  * @param {string} data.Username The user's username.\n  * @param {CognitoUserPool} data.Pool Pool containing the user.\n  * @param {object} data.Storage Optional storage object.\n  */\n\tfunction CognitoUser(data) {\n\t\t_classCallCheck(this, CognitoUser);\n\n\t\tif (data == null || data.Username == null || data.Pool == null) {\n\t\t\tthrow new Error('Username and pool information are required.');\n\t\t}\n\n\t\tthis.username = data.Username || '';\n\t\tthis.pool = data.Pool;\n\t\tthis.Session = null;\n\n\t\tthis.client = data.Pool.client;\n\n\t\tthis.signInUserSession = null;\n\t\tthis.authenticationFlowType = 'USER_SRP_AUTH';\n\n\t\tthis.storage = data.Storage || new StorageHelper().getStorage();\n\n\t\tthis.keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tthis.userDataKey = this.keyPrefix + '.' + this.username + '.userData';\n\t}\n\n\t/**\n  * Sets the session for this user\n  * @param {CognitoUserSession} signInUserSession the session\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n\t\tthis.clearCachedUserData();\n\t\tthis.signInUserSession = signInUserSession;\n\t\tthis.cacheTokens();\n\t};\n\n\t/**\n  * @returns {CognitoUserSession} the current session for this user\n  */\n\n\n\tCognitoUser.prototype.getSignInUserSession = function getSignInUserSession() {\n\t\treturn this.signInUserSession;\n\t};\n\n\t/**\n  * @returns {string} the user's username\n  */\n\n\n\tCognitoUser.prototype.getUsername = function getUsername() {\n\t\treturn this.username;\n\t};\n\n\t/**\n  * @returns {String} the authentication flow type\n  */\n\n\n\tCognitoUser.prototype.getAuthenticationFlowType = function getAuthenticationFlowType() {\n\t\treturn this.authenticationFlowType;\n\t};\n\n\t/**\n  * sets authentication flow type\n  * @param {string} authenticationFlowType New value.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n\t\tthis.authenticationFlowType = authenticationFlowType;\n\t};\n\n\t/**\n  * This is used for authenticating the user through the custom authentication flow.\n  * @param {AuthenticationDetails} authDetails Contains the authentication data\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *        response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.initiateAuth = function initiateAuth(authDetails, callback) {\n\t\tvar _this = this;\n\n\t\tvar authParameters = authDetails.getAuthParameters();\n\t\tauthParameters.USERNAME = this.username;\n\n\t\tvar clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n\n\t\tvar jsonReq = {\n\t\t\tAuthFlow: 'CUSTOM_AUTH',\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tAuthParameters: authParameters,\n\t\t\tClientMetadata: clientMetaData\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\n\t\tthis.client.request('InitiateAuth', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\tvar challengeName = data.ChallengeName;\n\t\t\tvar challengeParameters = data.ChallengeParameters;\n\n\t\t\tif (challengeName === 'CUSTOM_CHALLENGE') {\n\t\t\t\t_this.Session = data.Session;\n\t\t\t\treturn callback.customChallenge(challengeParameters);\n\t\t\t}\n\t\t\t_this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\t\t\t_this.cacheTokens();\n\t\t\treturn callback.onSuccess(_this.signInUserSession);\n\t\t});\n\t};\n\n\t/**\n  * This is used for authenticating the user.\n  * stuff\n  * @param {AuthenticationDetails} authDetails Contains the authentication data\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {newPasswordRequired} callback.newPasswordRequired new\n  *        password and any required attributes are required to continue\n  * @param {mfaRequired} callback.mfaRequired MFA code\n  *        required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *        response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUser = function authenticateUser(authDetails, callback) {\n\t\tif (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n\t\t\treturn this.authenticateUserPlainUsernamePassword(authDetails, callback);\n\t\t} else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t\t\treturn this.authenticateUserDefaultAuth(authDetails, callback);\n\t\t}\n\t\treturn callback.onFailure(new Error('Authentication flow type is invalid.'));\n\t};\n\n\t/**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * It calls the AuthenticationHelper for SRP related\n  * stuff\n  * @param {AuthenticationDetails} authDetails Contains the authentication data\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {newPasswordRequired} callback.newPasswordRequired new\n  *        password and any required attributes are required to continue\n  * @param {mfaRequired} callback.mfaRequired MFA code\n  *        required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *        response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n\t\tvar _this2 = this;\n\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tvar dateHelper = new DateHelper();\n\n\t\tvar serverBValue = void 0;\n\t\tvar salt = void 0;\n\t\tvar authParameters = {};\n\n\t\tif (this.deviceKey != null) {\n\t\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tauthParameters.USERNAME = this.username;\n\t\tauthenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n\t\t\t// getLargeAValue callback start\n\t\t\tif (errOnAValue) {\n\t\t\t\tcallback.onFailure(errOnAValue);\n\t\t\t}\n\n\t\t\tauthParameters.SRP_A = aValue.toString(16);\n\n\t\t\tif (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n\t\t\t\tauthParameters.CHALLENGE_NAME = 'SRP_A';\n\t\t\t}\n\n\t\t\tvar clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n\n\t\t\tvar jsonReq = {\n\t\t\t\tAuthFlow: _this2.authenticationFlowType,\n\t\t\t\tClientId: _this2.pool.getClientId(),\n\t\t\t\tAuthParameters: authParameters,\n\t\t\t\tClientMetadata: clientMetaData\n\t\t\t};\n\t\t\tif (_this2.getUserContextData(_this2.username)) {\n\t\t\t\tjsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n\t\t\t}\n\n\t\t\t_this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\n\t\t\t\tvar challengeParameters = data.ChallengeParameters;\n\n\t\t\t\t_this2.username = challengeParameters.USER_ID_FOR_SRP;\n\t\t\t\tserverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n\t\t\t\tsalt = new BigInteger(challengeParameters.SALT, 16);\n\t\t\t\t_this2.getCachedDeviceKeyAndPassword();\n\n\t\t\t\tauthenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n\t\t\t\t\t// getPasswordAuthenticationKey callback start\n\t\t\t\t\tif (errOnHkdf) {\n\t\t\t\t\t\tcallback.onFailure(errOnHkdf);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dateNow = dateHelper.getNowString();\n\n\t\t\t\t\tvar message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n\t\t\t\t\tvar key = CryptoJS.lib.WordArray.create(hkdf);\n\t\t\t\t\tvar signatureString = Base64.stringify(HmacSHA256(message, key));\n\n\t\t\t\t\tvar challengeResponses = {};\n\n\t\t\t\t\tchallengeResponses.USERNAME = _this2.username;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t\t\t\t\tchallengeResponses.TIMESTAMP = dateNow;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n\t\t\t\t\tif (_this2.deviceKey != null) {\n\t\t\t\t\t\tchallengeResponses.DEVICE_KEY = _this2.deviceKey;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n\t\t\t\t\t\treturn _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n\t\t\t\t\t\t\tif (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n\t\t\t\t\t\t\t\tchallengeResponses.DEVICE_KEY = null;\n\t\t\t\t\t\t\t\t_this2.deviceKey = null;\n\t\t\t\t\t\t\t\t_this2.randomPassword = null;\n\t\t\t\t\t\t\t\t_this2.deviceGroupKey = null;\n\t\t\t\t\t\t\t\t_this2.clearCachedDeviceKeyAndPassword();\n\t\t\t\t\t\t\t\treturn respondToAuthChallenge(challenge, challengeCallback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn challengeCallback(errChallenge, dataChallenge);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\tvar jsonReqResp = {\n\t\t\t\t\t\tChallengeName: 'PASSWORD_VERIFIER',\n\t\t\t\t\t\tClientId: _this2.pool.getClientId(),\n\t\t\t\t\t\tChallengeResponses: challengeResponses,\n\t\t\t\t\t\tSession: data.Session,\n\t\t\t\t\t\tClientMetadata: clientMetaData\n\t\t\t\t\t};\n\t\t\t\t\tif (_this2.getUserContextData()) {\n\t\t\t\t\t\tjsonReqResp.UserContextData = _this2.getUserContextData();\n\t\t\t\t\t}\n\t\t\t\t\trespondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n\t\t\t\t\t\tif (errAuthenticate) {\n\t\t\t\t\t\t\treturn callback.onFailure(errAuthenticate);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t\t\t\t\t});\n\t\t\t\t\treturn undefined;\n\t\t\t\t\t// getPasswordAuthenticationKey callback end\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\t// getLargeAValue callback end\n\t\t});\n\t};\n\n\t/**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {AuthenticationDetails} authDetails Contains the authentication data.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code\n  *        required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n\t\tvar _this3 = this;\n\n\t\tvar authParameters = {};\n\t\tauthParameters.USERNAME = this.username;\n\t\tauthParameters.PASSWORD = authDetails.getPassword();\n\t\tif (!authParameters.PASSWORD) {\n\t\t\tcallback.onFailure(new Error('PASSWORD parameter is required'));\n\t\t\treturn;\n\t\t}\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tthis.getCachedDeviceKeyAndPassword();\n\t\tif (this.deviceKey != null) {\n\t\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n\n\t\tvar jsonReq = {\n\t\t\tAuthFlow: 'USER_PASSWORD_AUTH',\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tAuthParameters: authParameters,\n\t\t\tClientMetadata: clientMetaData\n\t\t};\n\t\tif (this.getUserContextData(this.username)) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData(this.username);\n\t\t}\n\t\t// USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n\t\t// Cognito UserPools verifies password and returns tokens.\n\t\tthis.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n\t\t});\n\t};\n\n\t/**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {object} dataAuthenticate authentication data\n  * @param {object} authenticationHelper helper created\n  * @param {callback} callback passed on from caller\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n\t\tvar _this4 = this;\n\n\t\tvar challengeName = dataAuthenticate.ChallengeName;\n\t\tvar challengeParameters = dataAuthenticate.ChallengeParameters;\n\n\t\tif (challengeName === 'SMS_MFA') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.mfaRequired(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'SELECT_MFA_TYPE') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.selectMFAType(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'MFA_SETUP') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.mfaSetup(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'SOFTWARE_TOKEN_MFA') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.totpRequired(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'CUSTOM_CHALLENGE') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.customChallenge(challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'NEW_PASSWORD_REQUIRED') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\n\t\t\tvar userAttributes = null;\n\t\t\tvar rawRequiredAttributes = null;\n\t\t\tvar requiredAttributes = [];\n\t\t\tvar userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n\t\t\tif (challengeParameters) {\n\t\t\t\tuserAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n\t\t\t\trawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n\t\t\t}\n\n\t\t\tif (rawRequiredAttributes) {\n\t\t\t\tfor (var i = 0; i < rawRequiredAttributes.length; i++) {\n\t\t\t\t\trequiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn callback.newPasswordRequired(userAttributes, requiredAttributes);\n\t\t}\n\n\t\tif (challengeName === 'DEVICE_SRP_AUTH') {\n\t\t\tthis.getDeviceResponse(callback);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t\tthis.challengeName = challengeName;\n\t\tthis.cacheTokens();\n\n\t\tvar newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t\tif (newDeviceMetadata == null) {\n\t\t\treturn callback.onSuccess(this.signInUserSession);\n\t\t}\n\n\t\tauthenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n\t\t\tif (errGenHash) {\n\t\t\t\treturn callback.onFailure(errGenHash);\n\t\t\t}\n\n\t\t\tvar deviceSecretVerifierConfig = {\n\t\t\t\tSalt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t\t\t\tPasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t\t\t};\n\n\t\t\t_this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t\t\t_this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t\t\t_this4.randomPassword = authenticationHelper.getRandomPassword();\n\n\t\t\t_this4.client.request('ConfirmDevice', {\n\t\t\t\tDeviceKey: newDeviceMetadata.DeviceKey,\n\t\t\t\tAccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\t\tDeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t\t\t\tDeviceName: navigator.userAgent\n\t\t\t}, function (errConfirm, dataConfirm) {\n\t\t\t\tif (errConfirm) {\n\t\t\t\t\treturn callback.onFailure(errConfirm);\n\t\t\t\t}\n\n\t\t\t\t_this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t\t\t\t_this4.cacheDeviceKeyAndPassword();\n\t\t\t\tif (dataConfirm.UserConfirmationNecessary === true) {\n\t\t\t\t\treturn callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t\t\t\t}\n\t\t\t\treturn callback.onSuccess(_this4.signInUserSession);\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n  * Pass the new password with any new user attributes to be updated.\n  * User attribute keys must be of format userAttributes.<attribute_name>.\n  * @param {string} newPassword new password for this user\n  * @param {object} requiredAttributeData map with values for all required attributes\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *         response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n\t\tvar _this5 = this;\n\n\t\tif (!newPassword) {\n\t\t\treturn callback.onFailure(new Error('New password is required.'));\n\t\t}\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tvar userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n\t\tvar finalUserAttributes = {};\n\t\tif (requiredAttributeData) {\n\t\t\tObject.keys(requiredAttributeData).forEach(function (key) {\n\t\t\t\tfinalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n\t\t\t});\n\t\t}\n\n\t\tfinalUserAttributes.NEW_PASSWORD = newPassword;\n\t\tfinalUserAttributes.USERNAME = this.username;\n\t\tvar jsonReq = {\n\t\t\tChallengeName: 'NEW_PASSWORD_REQUIRED',\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tChallengeResponses: finalUserAttributes,\n\t\t\tSession: this.Session,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n\t\t\tif (errAuthenticate) {\n\t\t\t\treturn callback.onFailure(errAuthenticate);\n\t\t\t}\n\t\t\treturn _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to get a session using device authentication. It is called at the end of user\n  * authentication\n  *\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  * @private\n  */\n\n\n\tCognitoUser.prototype.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n\t\tvar _this6 = this;\n\n\t\tvar authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n\t\tvar dateHelper = new DateHelper();\n\n\t\tvar authParameters = {};\n\n\t\tauthParameters.USERNAME = this.username;\n\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\tauthenticationHelper.getLargeAValue(function (errAValue, aValue) {\n\t\t\t// getLargeAValue callback start\n\t\t\tif (errAValue) {\n\t\t\t\tcallback.onFailure(errAValue);\n\t\t\t}\n\n\t\t\tauthParameters.SRP_A = aValue.toString(16);\n\n\t\t\tvar jsonReq = {\n\t\t\t\tChallengeName: 'DEVICE_SRP_AUTH',\n\t\t\t\tClientId: _this6.pool.getClientId(),\n\t\t\t\tChallengeResponses: authParameters,\n\t\t\t\tClientMetadata: clientMetadata\n\t\t\t};\n\t\t\tif (_this6.getUserContextData()) {\n\t\t\t\tjsonReq.UserContextData = _this6.getUserContextData();\n\t\t\t}\n\t\t\t_this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\n\t\t\t\tvar challengeParameters = data.ChallengeParameters;\n\n\t\t\t\tvar serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n\t\t\t\tvar salt = new BigInteger(challengeParameters.SALT, 16);\n\n\t\t\t\tauthenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n\t\t\t\t\t// getPasswordAuthenticationKey callback start\n\t\t\t\t\tif (errHkdf) {\n\t\t\t\t\t\treturn callback.onFailure(errHkdf);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dateNow = dateHelper.getNowString();\n\n\t\t\t\t\tvar message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n\t\t\t\t\tvar key = CryptoJS.lib.WordArray.create(hkdf);\n\t\t\t\t\tvar signatureString = Base64.stringify(HmacSHA256(message, key));\n\n\t\t\t\t\tvar challengeResponses = {};\n\n\t\t\t\t\tchallengeResponses.USERNAME = _this6.username;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t\t\t\t\tchallengeResponses.TIMESTAMP = dateNow;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\t\t\t\tchallengeResponses.DEVICE_KEY = _this6.deviceKey;\n\n\t\t\t\t\tvar jsonReqResp = {\n\t\t\t\t\t\tChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t\t\t\t\t\tClientId: _this6.pool.getClientId(),\n\t\t\t\t\t\tChallengeResponses: challengeResponses,\n\t\t\t\t\t\tSession: data.Session\n\t\t\t\t\t};\n\t\t\t\t\tif (_this6.getUserContextData()) {\n\t\t\t\t\t\tjsonReqResp.UserContextData = _this6.getUserContextData();\n\t\t\t\t\t}\n\n\t\t\t\t\t_this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n\t\t\t\t\t\tif (errAuthenticate) {\n\t\t\t\t\t\t\treturn callback.onFailure(errAuthenticate);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t\t\t\t\t\t_this6.cacheTokens();\n\n\t\t\t\t\t\treturn callback.onSuccess(_this6.signInUserSession);\n\t\t\t\t\t});\n\t\t\t\t\treturn undefined;\n\t\t\t\t\t// getPasswordAuthenticationKey callback end\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\t// getLargeAValue callback end\n\t\t});\n\t};\n\n\t/**\n  * This is used for a certain user to confirm the registration by using a confirmation code\n  * @param {string} confirmationCode Code entered by user.\n  * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tConfirmationCode: confirmationCode,\n\t\t\tUsername: this.username,\n\t\t\tForceAliasCreation: forceAliasCreation,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('ConfirmSignUp', jsonReq, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t};\n\n\t/**\n  * This is used by the user once he has the responses to a custom challenge\n  * @param {string} answerChallenge The custom challenge answer.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {customChallenge} callback.customChallenge\n  *    Custom challenge response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n\t\tvar _this7 = this;\n\n\t\tvar challengeResponses = {};\n\t\tchallengeResponses.USERNAME = this.username;\n\t\tchallengeResponses.ANSWER = answerChallenge;\n\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tthis.getCachedDeviceKeyAndPassword();\n\t\tif (this.deviceKey != null) {\n\t\t\tchallengeResponses.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar jsonReq = {\n\t\t\tChallengeName: 'CUSTOM_CHALLENGE',\n\t\t\tChallengeResponses: challengeResponses,\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tSession: this.Session,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\n\t\t\treturn _this7.authenticateUserInternal(data, authenticationHelper, callback);\n\t\t});\n\t};\n\n\t/**\n  * This is used by the user once he has an MFA code\n  * @param {string} confirmationCode The MFA code entered by the user.\n  * @param {object} callback Result callback map.\n  * @param {string} mfaType The mfa we are replying to.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n\t\tvar _this8 = this;\n\n\t\tvar challengeResponses = {};\n\t\tchallengeResponses.USERNAME = this.username;\n\t\tchallengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\tvar mfaTypeSelection = mfaType || 'SMS_MFA';\n\t\tif (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n\t\t\tchallengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n\t\t}\n\n\t\tif (this.deviceKey != null) {\n\t\t\tchallengeResponses.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar jsonReq = {\n\t\t\tChallengeName: mfaTypeSelection,\n\t\t\tChallengeResponses: challengeResponses,\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tSession: this.Session,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\n\t\t\tvar challengeName = dataAuthenticate.ChallengeName;\n\n\t\t\tif (challengeName === 'DEVICE_SRP_AUTH') {\n\t\t\t\t_this8.getDeviceResponse(callback);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t_this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t\t\t_this8.cacheTokens();\n\n\t\t\tif (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t\t\t\treturn callback.onSuccess(_this8.signInUserSession);\n\t\t\t}\n\n\t\t\tvar authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n\t\t\tauthenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n\t\t\t\tif (errGenHash) {\n\t\t\t\t\treturn callback.onFailure(errGenHash);\n\t\t\t\t}\n\n\t\t\t\tvar deviceSecretVerifierConfig = {\n\t\t\t\t\tSalt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t\t\t\t\tPasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t\t\t\t};\n\n\t\t\t\t_this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t\t\t\t_this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t\t\t\t_this8.randomPassword = authenticationHelper.getRandomPassword();\n\n\t\t\t\t_this8.client.request('ConfirmDevice', {\n\t\t\t\t\tDeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t\t\t\t\tAccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\t\t\tDeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t\t\t\t\tDeviceName: navigator.userAgent\n\t\t\t\t}, function (errConfirm, dataConfirm) {\n\t\t\t\t\tif (errConfirm) {\n\t\t\t\t\t\treturn callback.onFailure(errConfirm);\n\t\t\t\t\t}\n\n\t\t\t\t\t_this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t\t\t\t\t_this8.cacheDeviceKeyAndPassword();\n\t\t\t\t\tif (dataConfirm.UserConfirmationNecessary === true) {\n\t\t\t\t\t\treturn callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t\t\t\t\t}\n\t\t\t\t\treturn callback.onSuccess(_this8.signInUserSession);\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t};\n\n\t/**\n  * This is used by an authenticated user to change the current password\n  * @param {string} oldUserPassword The current password.\n  * @param {string} newUserPassword The requested new password.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('ChangePassword', {\n\t\t\tPreviousPassword: oldUserPassword,\n\t\t\tProposedPassword: newUserPassword,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to enable MFA for itself\n  * @deprecated\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.enableMFA = function enableMFA(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tvar mfaOptions = [];\n\t\tvar mfaEnabled = {\n\t\t\tDeliveryMedium: 'SMS',\n\t\t\tAttributeName: 'phone_number'\n\t\t};\n\t\tmfaOptions.push(mfaEnabled);\n\n\t\tthis.client.request('SetUserSettings', {\n\t\t\tMFAOptions: mfaOptions,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to enable MFA for itself\n  * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n  * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('SetUserMFAPreference', {\n\t\t\tSMSMfaSettings: smsMfaSettings,\n\t\t\tSoftwareTokenMfaSettings: softwareTokenMfaSettings,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to disable MFA for itself\n  * @deprecated\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.disableMFA = function disableMFA(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tvar mfaOptions = [];\n\n\t\tthis.client.request('SetUserSettings', {\n\t\t\tMFAOptions: mfaOptions,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to delete itself\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.deleteUser = function deleteUser(callback, clientMetadata) {\n\t\tvar _this9 = this;\n\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('DeleteUser', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\t_this9.clearCachedUser();\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n  */\n\t/**\n  * This is used by an authenticated user to change a list of attributes\n  * @param {AttributeArg[]} attributes A list of the new user attributes.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('UpdateUserAttributes', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tUserAttributes: attributes,\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to get a list of attributes\n  * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getUserAttributes = function getUserAttributes(callback) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('GetUser', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err, userData) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\n\t\t\tvar attributeList = [];\n\n\t\t\tfor (var i = 0; i < userData.UserAttributes.length; i++) {\n\t\t\t\tvar attribute = {\n\t\t\t\t\tName: userData.UserAttributes[i].Name,\n\t\t\t\t\tValue: userData.UserAttributes[i].Value\n\t\t\t\t};\n\t\t\t\tvar userAttribute = new CognitoUserAttribute(attribute);\n\t\t\t\tattributeList.push(userAttribute);\n\t\t\t}\n\n\t\t\treturn callback(null, attributeList);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to get the MFAOptions\n  * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getMFAOptions = function getMFAOptions(callback) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('GetUser', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err, userData) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\n\t\t\treturn callback(null, userData.MFAOptions);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated users to get the userData\n  * @param {nodeCallback<UserData>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getUserData = function getUserData(callback, params) {\n\t\tvar _this10 = this;\n\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\tthis.clearCachedUserData();\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tvar bypassCache = params ? params.bypassCache : false;\n\n\t\tvar userData = this.storage.getItem(this.userDataKey);\n\t\t// get the cached user data\n\n\t\tif (!userData || bypassCache) {\n\t\t\tthis.client.request('GetUser', {\n\t\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t\t}, function (err, latestUserData) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err, null);\n\t\t\t\t}\n\t\t\t\t_this10.cacheUserData(latestUserData);\n\t\t\t\tvar refresh = _this10.signInUserSession.getRefreshToken();\n\t\t\t\tif (refresh && refresh.getToken()) {\n\t\t\t\t\t_this10.refreshSession(refresh, function (refreshError, data) {\n\t\t\t\t\t\tif (refreshError) {\n\t\t\t\t\t\t\treturn callback(refreshError, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback(null, latestUserData);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn callback(null, latestUserData);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn callback(null, JSON.parse(userData));\n\t\t\t} catch (err) {\n\t\t\t\tthis.clearCachedUserData();\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to delete a list of attributes\n  * @param {string[]} attributeList Names of the attributes to delete.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.deleteAttributes = function deleteAttributes(attributeList, callback) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('DeleteUserAttributes', {\n\t\t\tUserAttributeNames: attributeList,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by a user to resend a confirmation code\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tUsername: this.username,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\n\t\tthis.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, result);\n\t\t});\n\t};\n\n\t/**\n  * This is used to get a session, either from the session object\n  * or from  the local storage, or by using a refresh token\n  *\n  * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getSession = function getSession(callback) {\n\t\tif (this.username == null) {\n\t\t\treturn callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t\t}\n\n\t\tif (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t\t\treturn callback(null, this.signInUserSession);\n\t\t}\n\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar idTokenKey = keyPrefix + '.idToken';\n\t\tvar accessTokenKey = keyPrefix + '.accessToken';\n\t\tvar refreshTokenKey = keyPrefix + '.refreshToken';\n\t\tvar clockDriftKey = keyPrefix + '.clockDrift';\n\n\t\tif (this.storage.getItem(idTokenKey)) {\n\t\t\tvar idToken = new CognitoIdToken({\n\t\t\t\tIdToken: this.storage.getItem(idTokenKey)\n\t\t\t});\n\t\t\tvar accessToken = new CognitoAccessToken({\n\t\t\t\tAccessToken: this.storage.getItem(accessTokenKey)\n\t\t\t});\n\t\t\tvar refreshToken = new CognitoRefreshToken({\n\t\t\t\tRefreshToken: this.storage.getItem(refreshTokenKey)\n\t\t\t});\n\t\t\tvar clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n\n\t\t\tvar sessionData = {\n\t\t\t\tIdToken: idToken,\n\t\t\t\tAccessToken: accessToken,\n\t\t\t\tRefreshToken: refreshToken,\n\t\t\t\tClockDrift: clockDrift\n\t\t\t};\n\t\t\tvar cachedSession = new CognitoUserSession(sessionData);\n\t\t\tif (cachedSession.isValid()) {\n\t\t\t\tthis.signInUserSession = cachedSession;\n\t\t\t\treturn callback(null, this.signInUserSession);\n\t\t\t}\n\n\t\t\tif (!refreshToken.getToken()) {\n\t\t\t\treturn callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t\t\t}\n\n\t\t\tthis.refreshSession(refreshToken, callback);\n\t\t} else {\n\t\t\tcallback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n\t\t}\n\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This uses the refreshToken to retrieve a new session\n  * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n  * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n\t\tvar _this11 = this;\n\n\t\tvar authParameters = {};\n\t\tauthParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tvar lastUserKey = keyPrefix + '.LastAuthUser';\n\n\t\tif (this.storage.getItem(lastUserKey)) {\n\t\t\tthis.username = this.storage.getItem(lastUserKey);\n\t\t\tvar deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t\t\tthis.deviceKey = this.storage.getItem(deviceKeyKey);\n\t\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tAuthFlow: 'REFRESH_TOKEN_AUTH',\n\t\t\tAuthParameters: authParameters,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === 'NotAuthorizedException') {\n\t\t\t\t\t_this11.clearCachedUser();\n\t\t\t\t}\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\tif (authResult) {\n\t\t\t\tvar authenticationResult = authResult.AuthenticationResult;\n\t\t\t\tif (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t\t\t\t\tauthenticationResult.RefreshToken = refreshToken.getToken();\n\t\t\t\t}\n\t\t\t\t_this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n\t\t\t\t_this11.cacheTokens();\n\t\t\t\treturn callback(null, _this11.signInUserSession);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t};\n\n\t/**\n  * This is used to save the session tokens to local storage\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.cacheTokens = function cacheTokens() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tvar idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t\tvar accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t\tvar refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t\tvar clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n\t\tvar lastUserKey = keyPrefix + '.LastAuthUser';\n\n\t\tthis.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t\tthis.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t\tthis.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t\tthis.storage.setItem(clockDriftKey, '' + this.signInUserSession.getClockDrift());\n\t\tthis.storage.setItem(lastUserKey, this.username);\n\t};\n\n\t/**\n  * This is to cache user data\n  */\n\n\n\tCognitoUser.prototype.cacheUserData = function cacheUserData(userData) {\n\t\tthis.storage.setItem(this.userDataKey, JSON.stringify(userData));\n\t};\n\n\t/**\n  * This is to remove cached user data\n  */\n\n\n\tCognitoUser.prototype.clearCachedUserData = function clearCachedUserData() {\n\t\tthis.storage.removeItem(this.userDataKey);\n\t};\n\n\tCognitoUser.prototype.clearCachedUser = function clearCachedUser() {\n\t\tthis.clearCachedTokens();\n\t\tthis.clearCachedUserData();\n\t};\n\n\t/**\n  * This is used to cache the device key and device group and device password\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar deviceKeyKey = keyPrefix + '.deviceKey';\n\t\tvar randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t\tvar deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n\t\tthis.storage.setItem(deviceKeyKey, this.deviceKey);\n\t\tthis.storage.setItem(randomPasswordKey, this.randomPassword);\n\t\tthis.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t};\n\n\t/**\n  * This is used to get current device key and device group and device password\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar deviceKeyKey = keyPrefix + '.deviceKey';\n\t\tvar randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t\tvar deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n\t\tif (this.storage.getItem(deviceKeyKey)) {\n\t\t\tthis.deviceKey = this.storage.getItem(deviceKeyKey);\n\t\t\tthis.randomPassword = this.storage.getItem(randomPasswordKey);\n\t\t\tthis.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n\t\t}\n\t};\n\n\t/**\n  * This is used to clear the device key info from local storage\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar deviceKeyKey = keyPrefix + '.deviceKey';\n\t\tvar randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t\tvar deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n\t\tthis.storage.removeItem(deviceKeyKey);\n\t\tthis.storage.removeItem(randomPasswordKey);\n\t\tthis.storage.removeItem(deviceGroupKeyKey);\n\t};\n\n\t/**\n  * This is used to clear the session tokens from local storage\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.clearCachedTokens = function clearCachedTokens() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tvar idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t\tvar accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t\tvar refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t\tvar lastUserKey = keyPrefix + '.LastAuthUser';\n\t\tvar clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n\n\t\tthis.storage.removeItem(idTokenKey);\n\t\tthis.storage.removeItem(accessTokenKey);\n\t\tthis.storage.removeItem(refreshTokenKey);\n\t\tthis.storage.removeItem(lastUserKey);\n\t\tthis.storage.removeItem(clockDriftKey);\n\t};\n\n\t/**\n  * This is used to build a user session from tokens retrieved in the authentication result\n  * @param {object} authResult Successful auth response from server.\n  * @returns {CognitoUserSession} The new user session.\n  * @private\n  */\n\n\n\tCognitoUser.prototype.getCognitoUserSession = function getCognitoUserSession(authResult) {\n\t\tvar idToken = new CognitoIdToken(authResult);\n\t\tvar accessToken = new CognitoAccessToken(authResult);\n\t\tvar refreshToken = new CognitoRefreshToken(authResult);\n\n\t\tvar sessionData = {\n\t\t\tIdToken: idToken,\n\t\t\tAccessToken: accessToken,\n\t\t\tRefreshToken: refreshToken\n\t\t};\n\n\t\treturn new CognitoUserSession(sessionData);\n\t};\n\n\t/**\n  * This is used to initiate a forgot password request\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {inputVerificationCode?} callback.inputVerificationCode\n  *    Optional callback raised instead of onSuccess with response data.\n  * @param {onSuccess} callback.onSuccess Called on success.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.forgotPassword = function forgotPassword(callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tUsername: this.username,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('ForgotPassword', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\tif (typeof callback.inputVerificationCode === 'function') {\n\t\t\t\treturn callback.inputVerificationCode(data);\n\t\t\t}\n\t\t\treturn callback.onSuccess(data);\n\t\t});\n\t};\n\n\t/**\n  * This is used to confirm a new password using a confirmationCode\n  * @param {string} confirmationCode Code entered by user.\n  * @param {string} newPassword Confirm new password.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<void>} callback.onSuccess Called on success.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tUsername: this.username,\n\t\t\tConfirmationCode: confirmationCode,\n\t\t\tPassword: newPassword,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess();\n\t\t});\n\t};\n\n\t/**\n  * This is used to initiate an attribute confirmation request\n  * @param {string} attributeName User attribute that needs confirmation.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('GetUserAttributeVerificationCode', {\n\t\t\tAttributeName: attributeName,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\tif (typeof callback.inputVerificationCode === 'function') {\n\t\t\t\treturn callback.inputVerificationCode(data);\n\t\t\t}\n\t\t\treturn callback.onSuccess();\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to confirm an attribute using a confirmation code\n  * @param {string} attributeName Attribute being confirmed.\n  * @param {string} confirmationCode Code entered by user.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('VerifyUserAttribute', {\n\t\t\tAttributeName: attributeName,\n\t\t\tCode: confirmationCode,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to get the device information using the current device key\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getDevice = function getDevice(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('GetDevice', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: this.deviceKey\n\t\t}, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess(data);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to forget a specific device\n  * @param {string} deviceKey Device key.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('ForgetDevice', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: deviceKey\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to forget the current device\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.forgetDevice = function forgetDevice(callback) {\n\t\tvar _this12 = this;\n\n\t\tthis.forgetSpecificDevice(this.deviceKey, {\n\t\t\tonFailure: callback.onFailure,\n\t\t\tonSuccess: function onSuccess(result) {\n\t\t\t\t_this12.deviceKey = null;\n\t\t\t\t_this12.deviceGroupKey = null;\n\t\t\t\t_this12.randomPassword = null;\n\t\t\t\t_this12.clearCachedDeviceKeyAndPassword();\n\t\t\t\treturn callback.onSuccess(result);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n  * This is used to set the device status as remembered\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('UpdateDeviceStatus', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: this.deviceKey,\n\t\t\tDeviceRememberedStatus: 'remembered'\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to set the device status as not remembered\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('UpdateDeviceStatus', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: this.deviceKey,\n\t\t\tDeviceRememberedStatus: 'not_remembered'\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to list all devices for a user\n  *\n  * @param {int} limit the number of devices returned in a call\n  * @param {string} paginationToken the pagination token in case any was returned before\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.listDevices = function listDevices(limit, paginationToken, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('ListDevices', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tLimit: limit,\n\t\t\tPaginationToken: paginationToken\n\t\t}, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess(data);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to globally revoke all tokens issued to a user\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.globalSignOut = function globalSignOut(callback) {\n\t\tvar _this13 = this;\n\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('GlobalSignOut', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\t_this13.clearCachedUser();\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used for the user to signOut of the application and clear the cached tokens.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.signOut = function signOut() {\n\t\tthis.signInUserSession = null;\n\t\tthis.clearCachedUser();\n\t};\n\n\t/**\n  * This is used by a user trying to select a given MFA\n  * @param {string} answerChallenge the mfa the user wants\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n\t\tvar _this14 = this;\n\n\t\tvar challengeResponses = {};\n\t\tchallengeResponses.USERNAME = this.username;\n\t\tchallengeResponses.ANSWER = answerChallenge;\n\n\t\tvar jsonReq = {\n\t\t\tChallengeName: 'SELECT_MFA_TYPE',\n\t\t\tChallengeResponses: challengeResponses,\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tSession: this.Session\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\t_this14.Session = data.Session;\n\t\t\tif (answerChallenge === 'SMS_MFA') {\n\t\t\t\treturn callback.mfaRequired(data.challengeName, data.challengeParameters);\n\t\t\t}\n\t\t\tif (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\treturn callback.totpRequired(data.challengeName, data.challengeParameters);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t};\n\n\t/**\n  * This returns the user context data for advanced security feature.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getUserContextData = function getUserContextData() {\n\t\tvar pool = this.pool;\n\t\treturn pool.getUserContextData(this.username);\n\t};\n\n\t/**\n  * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.associateSoftwareToken = function associateSoftwareToken(callback) {\n\t\tvar _this15 = this;\n\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\tthis.client.request('AssociateSoftwareToken', {\n\t\t\t\tSession: this.Session\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\t_this15.Session = data.Session;\n\t\t\t\treturn callback.associateSecretCode(data.SecretCode);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.client.request('AssociateSoftwareToken', {\n\t\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\treturn callback.associateSecretCode(data.SecretCode);\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n  * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n  * @param {string} totpCode The MFA code entered by the user.\n  * @param {string} friendlyDeviceName The device name we are assigning to the device.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n\t\tvar _this16 = this;\n\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\tthis.client.request('VerifySoftwareToken', {\n\t\t\t\tSession: this.Session,\n\t\t\t\tUserCode: totpCode,\n\t\t\t\tFriendlyDeviceName: friendlyDeviceName\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\t_this16.Session = data.Session;\n\t\t\t\tvar challengeResponses = {};\n\t\t\t\tchallengeResponses.USERNAME = _this16.username;\n\t\t\t\tvar jsonReq = {\n\t\t\t\t\tChallengeName: 'MFA_SETUP',\n\t\t\t\t\tClientId: _this16.pool.getClientId(),\n\t\t\t\t\tChallengeResponses: challengeResponses,\n\t\t\t\t\tSession: _this16.Session\n\t\t\t\t};\n\t\t\t\tif (_this16.getUserContextData()) {\n\t\t\t\t\tjsonReq.UserContextData = _this16.getUserContextData();\n\t\t\t\t}\n\t\t\t\t_this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n\t\t\t\t\tif (errRespond) {\n\t\t\t\t\t\treturn callback.onFailure(errRespond);\n\t\t\t\t\t}\n\t\t\t\t\t_this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n\t\t\t\t\t_this16.cacheTokens();\n\t\t\t\t\treturn callback.onSuccess(_this16.signInUserSession);\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t} else {\n\t\t\tthis.client.request('VerifySoftwareToken', {\n\t\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\t\tUserCode: totpCode,\n\t\t\t\tFriendlyDeviceName: friendlyDeviceName\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\treturn callback.onSuccess(data);\n\t\t\t});\n\t\t}\n\t};\n\n\treturn CognitoUser;\n}();\n\nexport default CognitoUser;"]},"metadata":{},"sourceType":"module"}