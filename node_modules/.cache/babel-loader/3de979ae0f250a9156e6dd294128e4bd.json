{"ast":null,"code":"var Buffer = require('buffer/').Buffer;\n\nvar hashUtils = require('./browserHashUtils');\n\nvar BLOCK_SIZE = 64;\nvar DIGEST_LENGTH = 20;\nvar KEY = new Uint32Array([0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0]);\nvar INIT = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\nvar MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;\n/**\n * @api private\n */\n\nfunction Sha1() {\n  this.h0 = 0x67452301;\n  this.h1 = 0xEFCDAB89;\n  this.h2 = 0x98BADCFE;\n  this.h3 = 0x10325476;\n  this.h4 = 0xC3D2E1F0; // The first 64 bytes (16 words) is the data chunk\n\n  this.block = new Uint32Array(80);\n  this.offset = 0;\n  this.shift = 24;\n  this.totalLength = 0;\n}\n/**\n * @api private\n */\n\n\nmodule.exports = exports = Sha1;\nSha1.BLOCK_SIZE = BLOCK_SIZE;\n\nSha1.prototype.update = function (data) {\n  if (this.finished) {\n    throw new Error('Attempted to update an already finished hash.');\n  }\n\n  if (hashUtils.isEmptyData(data)) {\n    return this;\n  }\n\n  data = hashUtils.convertToBuffer(data);\n  var length = data.length;\n  this.totalLength += length * 8;\n\n  for (var i = 0; i < length; i++) {\n    this.write(data[i]);\n  }\n\n  return this;\n};\n\nSha1.prototype.write = function write(byte) {\n  this.block[this.offset] |= (byte & 0xff) << this.shift;\n\n  if (this.shift) {\n    this.shift -= 8;\n  } else {\n    this.offset++;\n    this.shift = 24;\n  }\n\n  if (this.offset === 16) this.processBlock();\n};\n\nSha1.prototype.digest = function (encoding) {\n  // Pad\n  this.write(0x80);\n\n  if (this.offset > 14 || this.offset === 14 && this.shift < 24) {\n    this.processBlock();\n  }\n\n  this.offset = 14;\n  this.shift = 24; // 64-bit length big-endian\n\n  this.write(0x00); // numbers this big aren't accurate in javascript anyway\n\n  this.write(0x00); // ..So just hard-code to zero.\n\n  this.write(this.totalLength > 0xffffffffff ? this.totalLength / 0x10000000000 : 0x00);\n  this.write(this.totalLength > 0xffffffff ? this.totalLength / 0x100000000 : 0x00);\n\n  for (var s = 24; s >= 0; s -= 8) {\n    this.write(this.totalLength >> s);\n  } // The value in state is little-endian rather than big-endian, so flip\n  // each word into a new Uint8Array\n\n\n  var out = new Buffer(DIGEST_LENGTH);\n  var outView = new DataView(out.buffer);\n  outView.setUint32(0, this.h0, false);\n  outView.setUint32(4, this.h1, false);\n  outView.setUint32(8, this.h2, false);\n  outView.setUint32(12, this.h3, false);\n  outView.setUint32(16, this.h4, false);\n  return encoding ? out.toString(encoding) : out;\n};\n\nSha1.prototype.processBlock = function processBlock() {\n  // Extend the sixteen 32-bit words into eighty 32-bit words:\n  for (var i = 16; i < 80; i++) {\n    var w = this.block[i - 3] ^ this.block[i - 8] ^ this.block[i - 14] ^ this.block[i - 16];\n    this.block[i] = w << 1 | w >>> 31;\n  } // Initialize hash value for this chunk:\n\n\n  var a = this.h0;\n  var b = this.h1;\n  var c = this.h2;\n  var d = this.h3;\n  var e = this.h4;\n  var f, k; // Main loop:\n\n  for (i = 0; i < 80; i++) {\n    if (i < 20) {\n      f = d ^ b & (c ^ d);\n      k = 0x5A827999;\n    } else if (i < 40) {\n      f = b ^ c ^ d;\n      k = 0x6ED9EBA1;\n    } else if (i < 60) {\n      f = b & c | d & (b | c);\n      k = 0x8F1BBCDC;\n    } else {\n      f = b ^ c ^ d;\n      k = 0xCA62C1D6;\n    }\n\n    var temp = (a << 5 | a >>> 27) + f + e + k + (this.block[i] | 0);\n    e = d;\n    d = c;\n    c = b << 30 | b >>> 2;\n    b = a;\n    a = temp;\n  } // Add this chunk's hash to result so far:\n\n\n  this.h0 = this.h0 + a | 0;\n  this.h1 = this.h1 + b | 0;\n  this.h2 = this.h2 + c | 0;\n  this.h3 = this.h3 + d | 0;\n  this.h4 = this.h4 + e | 0; // The block is now reusable.\n\n  this.offset = 0;\n\n  for (i = 0; i < 16; i++) {\n    this.block[i] = 0;\n  }\n};","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/browserSha1.js"],"names":["Buffer","require","hashUtils","BLOCK_SIZE","DIGEST_LENGTH","KEY","Uint32Array","INIT","MAX_HASHABLE_LENGTH","Math","pow","Sha1","h0","h1","h2","h3","h4","block","offset","shift","totalLength","module","exports","prototype","update","data","finished","Error","isEmptyData","convertToBuffer","length","i","write","byte","processBlock","digest","encoding","s","out","outView","DataView","buffer","setUint32","toString","w","a","b","c","d","e","f","k","temp"],"mappings":"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","sourcesContent":["var Buffer = require('buffer/').Buffer;\nvar hashUtils = require('./browserHashUtils');\n\nvar BLOCK_SIZE = 64;\n\nvar DIGEST_LENGTH = 20;\n\nvar KEY = new Uint32Array([\n    0x5a827999,\n    0x6ed9eba1,\n    0x8f1bbcdc | 0,\n    0xca62c1d6 | 0\n]);\n\nvar INIT = [\n    0x6a09e667,\n    0xbb67ae85,\n    0x3c6ef372,\n    0xa54ff53a,\n    0x510e527f,\n    0x9b05688c,\n    0x1f83d9ab,\n    0x5be0cd19,\n];\n\nvar MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;\n\n/**\n * @api private\n */\nfunction Sha1() {\n    this.h0 = 0x67452301;\n    this.h1 = 0xEFCDAB89;\n    this.h2 = 0x98BADCFE;\n    this.h3 = 0x10325476;\n    this.h4 = 0xC3D2E1F0;\n    // The first 64 bytes (16 words) is the data chunk\n    this.block = new Uint32Array(80);\n    this.offset = 0;\n    this.shift = 24;\n    this.totalLength = 0;\n}\n\n/**\n * @api private\n */\nmodule.exports = exports = Sha1;\n\nSha1.BLOCK_SIZE = BLOCK_SIZE;\n\nSha1.prototype.update = function (data) {\n    if (this.finished) {\n        throw new Error('Attempted to update an already finished hash.');\n    }\n\n    if (hashUtils.isEmptyData(data)) {\n        return this;\n    }\n\n    data = hashUtils.convertToBuffer(data);\n\n    var length = data.length;\n    this.totalLength += length * 8;\n    for (var i = 0; i < length; i++) {\n        this.write(data[i]);\n    }\n\n    return this;\n};\n\nSha1.prototype.write = function write(byte) {\n    this.block[this.offset] |= (byte & 0xff) << this.shift;\n    if (this.shift) {\n        this.shift -= 8;\n    } else {\n        this.offset++;\n        this.shift = 24;\n    }\n\n    if (this.offset === 16) this.processBlock();\n};\n\nSha1.prototype.digest = function (encoding) {\n    // Pad\n    this.write(0x80);\n    if (this.offset > 14 || (this.offset === 14 && this.shift < 24)) {\n      this.processBlock();\n    }\n    this.offset = 14;\n    this.shift = 24;\n\n    // 64-bit length big-endian\n    this.write(0x00); // numbers this big aren't accurate in javascript anyway\n    this.write(0x00); // ..So just hard-code to zero.\n    this.write(this.totalLength > 0xffffffffff ? this.totalLength / 0x10000000000 : 0x00);\n    this.write(this.totalLength > 0xffffffff ? this.totalLength / 0x100000000 : 0x00);\n    for (var s = 24; s >= 0; s -= 8) {\n        this.write(this.totalLength >> s);\n    }\n    // The value in state is little-endian rather than big-endian, so flip\n    // each word into a new Uint8Array\n    var out = new Buffer(DIGEST_LENGTH);\n    var outView = new DataView(out.buffer);\n    outView.setUint32(0, this.h0, false);\n    outView.setUint32(4, this.h1, false);\n    outView.setUint32(8, this.h2, false);\n    outView.setUint32(12, this.h3, false);\n    outView.setUint32(16, this.h4, false);\n\n    return encoding ? out.toString(encoding) : out;\n};\n\nSha1.prototype.processBlock = function processBlock() {\n    // Extend the sixteen 32-bit words into eighty 32-bit words:\n    for (var i = 16; i < 80; i++) {\n      var w = this.block[i - 3] ^ this.block[i - 8] ^ this.block[i - 14] ^ this.block[i - 16];\n      this.block[i] = (w << 1) | (w >>> 31);\n    }\n\n    // Initialize hash value for this chunk:\n    var a = this.h0;\n    var b = this.h1;\n    var c = this.h2;\n    var d = this.h3;\n    var e = this.h4;\n    var f, k;\n\n    // Main loop:\n    for (i = 0; i < 80; i++) {\n      if (i < 20) {\n        f = d ^ (b & (c ^ d));\n        k = 0x5A827999;\n      }\n      else if (i < 40) {\n        f = b ^ c ^ d;\n        k = 0x6ED9EBA1;\n      }\n      else if (i < 60) {\n        f = (b & c) | (d & (b | c));\n        k = 0x8F1BBCDC;\n      }\n      else {\n        f = b ^ c ^ d;\n        k = 0xCA62C1D6;\n      }\n      var temp = (a << 5 | a >>> 27) + f + e + k + (this.block[i]|0);\n      e = d;\n      d = c;\n      c = (b << 30 | b >>> 2);\n      b = a;\n      a = temp;\n    }\n\n    // Add this chunk's hash to result so far:\n    this.h0 = (this.h0 + a) | 0;\n    this.h1 = (this.h1 + b) | 0;\n    this.h2 = (this.h2 + c) | 0;\n    this.h3 = (this.h3 + d) | 0;\n    this.h4 = (this.h4 + e) | 0;\n\n    // The block is now reusable.\n    this.offset = 0;\n    for (i = 0; i < 16; i++) {\n        this.block[i] = 0;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}