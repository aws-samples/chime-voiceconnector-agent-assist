{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport { GraphQLObjectType, GraphQLEnumType, GraphQLList, GraphQLNonNull, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType, isNamedType } from './definition';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { DirectiveLocation } from '../language/directiveLocation';\nexport var __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          return objectValues(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\nexport var __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + \"\\n\\nIn some cases, you need to provide options to alter GraphQL's \" + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      locations: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation))),\n        resolve: function resolve(obj) {\n          return obj.locations;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      }\n    };\n  }\n});\nexport var __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\nexport var __Type = new GraphQLObjectType({\n  name: '__Type',\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (isScalarType(type)) {\n            return TypeKind.SCALAR;\n          } else if (isObjectType(type)) {\n            return TypeKind.OBJECT;\n          } else if (isInterfaceType(type)) {\n            return TypeKind.INTERFACE;\n          } else if (isUnionType(type)) {\n            return TypeKind.UNION;\n          } else if (isEnumType(type)) {\n            return TypeKind.ENUM;\n          } else if (isInputObjectType(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (isListType(type)) {\n            return TypeKind.LIST;\n          } else if (isNonNullType(type)) {\n            return TypeKind.NON_NULL;\n          }\n\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      fields: {\n        type: GraphQLList(GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (isObjectType(type) || isInterfaceType(type)) {\n            var fields = objectValues(type.getFields());\n\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n\n            return fields;\n          }\n\n          return null;\n        }\n      },\n      interfaces: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (isObjectType(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if (isAbstractType(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: GraphQLList(GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (isEnumType(type)) {\n            var values = type.getValues();\n\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: GraphQLList(GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (isInputObjectType(type)) {\n            return objectValues(type.getFields());\n          }\n        }\n      },\n      ofType: {\n        type: __Type,\n        resolve: function resolve(obj) {\n          return obj.ofType;\n        }\n      }\n    };\n  }\n});\nexport var __Field = new GraphQLObjectType({\n  name: '__Field',\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      defaultValue: {\n        type: GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return isInvalid(inputVal.defaultValue) ? null : print(astFromValue(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\nexport var __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\nexport var __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. `possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. `enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. `ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport var SchemaMetaFieldDef = {\n  name: '__schema',\n  type: GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\nexport var TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    type: GraphQLNonNull(GraphQLString)\n  }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\nexport var TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};\nexport var introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];\nexport function isIntrospectionType(type) {\n  return isNamedType(type) && ( // Would prefer to use introspectionTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);\n}","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/graphql/type/introspection.mjs"],"names":["isInvalid","objectValues","astFromValue","print","GraphQLObjectType","GraphQLEnumType","GraphQLList","GraphQLNonNull","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","isAbstractType","isNamedType","GraphQLString","GraphQLBoolean","DirectiveLocation","__Schema","name","description","fields","types","type","__Type","resolve","schema","getTypeMap","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","directives","__Directive","getDirectives","obj","locations","__DirectiveLocation","args","__InputValue","directive","values","QUERY","value","MUTATION","SUBSCRIPTION","FIELD","FRAGMENT_DEFINITION","FRAGMENT_SPREAD","INLINE_FRAGMENT","VARIABLE_DEFINITION","SCHEMA","SCALAR","OBJECT","FIELD_DEFINITION","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","kind","__TypeKind","TypeKind","LIST","NON_NULL","Error","__Field","includeDeprecated","defaultValue","_ref","getFields","filter","field","deprecationReason","interfaces","getInterfaces","possibleTypes","context","_ref2","getPossibleTypes","enumValues","__EnumValue","_ref3","getValues","inputFields","ofType","isDeprecated","inputVal","SchemaMetaFieldDef","source","_ref4","TypeMetaFieldDef","_ref5","_ref6","getType","TypeNameMetaFieldDef","_ref7","parentType","introspectionTypes","isIntrospectionType"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *  strict\n */\nimport isInvalid from '../jsutils/isInvalid';\nimport objectValues from '../jsutils/objectValues';\nimport { astFromValue } from '../utilities/astFromValue';\nimport { print } from '../language/printer';\nimport { GraphQLObjectType, GraphQLEnumType, GraphQLList, GraphQLNonNull, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType, isNamedType } from './definition';\nimport { GraphQLString, GraphQLBoolean } from './scalars';\nimport { DirectiveLocation } from '../language/directiveLocation';\nexport var __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It ' + 'exposes all available types and directives on the server, as well as ' + 'the entry points for query, mutation, and subscription operations.',\n  fields: function fields() {\n    return {\n      types: {\n        description: 'A list of all types supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Type))),\n        resolve: function resolve(schema) {\n          return objectValues(schema.getTypeMap());\n        }\n      },\n      queryType: {\n        description: 'The type that query operations will be rooted at.',\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(schema) {\n          return schema.getQueryType();\n        }\n      },\n      mutationType: {\n        description: 'If this server supports mutation, the type that ' + 'mutation operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getMutationType();\n        }\n      },\n      subscriptionType: {\n        description: 'If this server support subscription, the type that ' + 'subscription operations will be rooted at.',\n        type: __Type,\n        resolve: function resolve(schema) {\n          return schema.getSubscriptionType();\n        }\n      },\n      directives: {\n        description: 'A list of all directives supported by this server.',\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__Directive))),\n        resolve: function resolve(schema) {\n          return schema.getDirectives();\n        }\n      }\n    };\n  }\n});\nexport var __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description: 'A Directive provides a way to describe alternate runtime execution and ' + 'type validation behavior in a GraphQL document.' + \"\\n\\nIn some cases, you need to provide options to alter GraphQL's \" + 'execution behavior in ways field arguments will not suffice, such as ' + 'conditionally including or skipping a field. Directives provide this by ' + 'describing additional information to the executor.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      locations: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__DirectiveLocation))),\n        resolve: function resolve(obj) {\n          return obj.locations;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(directive) {\n          return directive.args || [];\n        }\n      }\n    };\n  }\n});\nexport var __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a ' + '__DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\nexport var __Type = new GraphQLObjectType({\n  name: '__Type',\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are ' + 'many kinds of types in GraphQL as represented by the `__TypeKind` enum.' + '\\n\\nDepending on the kind of a type, certain fields describe ' + 'information about that type. Scalar types provide no information ' + 'beyond a name and description, while Enum types provide their values. ' + 'Object and Interface types provide the fields they describe. Abstract ' + 'types, Union and Interface, provide the Object types possible ' + 'at runtime. List and NonNull types compose other types.',\n  fields: function fields() {\n    return {\n      kind: {\n        type: GraphQLNonNull(__TypeKind),\n        resolve: function resolve(type) {\n          if (isScalarType(type)) {\n            return TypeKind.SCALAR;\n          } else if (isObjectType(type)) {\n            return TypeKind.OBJECT;\n          } else if (isInterfaceType(type)) {\n            return TypeKind.INTERFACE;\n          } else if (isUnionType(type)) {\n            return TypeKind.UNION;\n          } else if (isEnumType(type)) {\n            return TypeKind.ENUM;\n          } else if (isInputObjectType(type)) {\n            return TypeKind.INPUT_OBJECT;\n          } else if (isListType(type)) {\n            return TypeKind.LIST;\n          } else if (isNonNullType(type)) {\n            return TypeKind.NON_NULL;\n          }\n\n          throw new Error('Unknown kind of type: ' + type);\n        }\n      },\n      name: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      fields: {\n        type: GraphQLList(GraphQLNonNull(__Field)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref) {\n          var includeDeprecated = _ref.includeDeprecated;\n\n          if (isObjectType(type) || isInterfaceType(type)) {\n            var fields = objectValues(type.getFields());\n\n            if (!includeDeprecated) {\n              fields = fields.filter(function (field) {\n                return !field.deprecationReason;\n              });\n            }\n\n            return fields;\n          }\n\n          return null;\n        }\n      },\n      interfaces: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type) {\n          if (isObjectType(type)) {\n            return type.getInterfaces();\n          }\n        }\n      },\n      possibleTypes: {\n        type: GraphQLList(GraphQLNonNull(__Type)),\n        resolve: function resolve(type, args, context, _ref2) {\n          var schema = _ref2.schema;\n\n          if (isAbstractType(type)) {\n            return schema.getPossibleTypes(type);\n          }\n        }\n      },\n      enumValues: {\n        type: GraphQLList(GraphQLNonNull(__EnumValue)),\n        args: {\n          includeDeprecated: {\n            type: GraphQLBoolean,\n            defaultValue: false\n          }\n        },\n        resolve: function resolve(type, _ref3) {\n          var includeDeprecated = _ref3.includeDeprecated;\n\n          if (isEnumType(type)) {\n            var values = type.getValues();\n\n            if (!includeDeprecated) {\n              values = values.filter(function (value) {\n                return !value.deprecationReason;\n              });\n            }\n\n            return values;\n          }\n        }\n      },\n      inputFields: {\n        type: GraphQLList(GraphQLNonNull(__InputValue)),\n        resolve: function resolve(type) {\n          if (isInputObjectType(type)) {\n            return objectValues(type.getFields());\n          }\n        }\n      },\n      ofType: {\n        type: __Type,\n        resolve: function resolve(obj) {\n          return obj.ofType;\n        }\n      }\n    };\n  }\n});\nexport var __Field = new GraphQLObjectType({\n  name: '__Field',\n  description: 'Object and Interface types are described by a list of Fields, each of ' + 'which has a name, potentially a list of arguments, and a return type.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      args: {\n        type: GraphQLNonNull(GraphQLList(GraphQLNonNull(__InputValue))),\n        resolve: function resolve(field) {\n          return field.args || [];\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description: 'Arguments provided to Fields or Directives and the input fields of an ' + 'InputObject are represented as Input Values which describe their type ' + 'and optionally a default value.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      type: {\n        type: GraphQLNonNull(__Type),\n        resolve: function resolve(obj) {\n          return obj.type;\n        }\n      },\n      defaultValue: {\n        type: GraphQLString,\n        description: 'A GraphQL-formatted string representing the default value for this ' + 'input value.',\n        resolve: function resolve(inputVal) {\n          return isInvalid(inputVal.defaultValue) ? null : print(astFromValue(inputVal.defaultValue, inputVal.type));\n        }\n      }\n    };\n  }\n});\nexport var __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description: 'One possible value for a given Enum. Enum values are unique values, not ' + 'a placeholder for a string or numeric value. However an Enum value is ' + 'returned in a JSON response as a string.',\n  fields: function fields() {\n    return {\n      name: {\n        type: GraphQLNonNull(GraphQLString),\n        resolve: function resolve(obj) {\n          return obj.name;\n        }\n      },\n      description: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.description;\n        }\n      },\n      isDeprecated: {\n        type: GraphQLNonNull(GraphQLBoolean),\n        resolve: function resolve(obj) {\n          return obj.isDeprecated;\n        }\n      },\n      deprecationReason: {\n        type: GraphQLString,\n        resolve: function resolve(obj) {\n          return obj.deprecationReason;\n        }\n      }\n    };\n  }\n});\nexport var TypeKind = {\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n};\nexport var __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. ' + '`fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. ' + '`fields` and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. `possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. `enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. ' + '`inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. `ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport var SchemaMetaFieldDef = {\n  name: '__schema',\n  type: GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref4) {\n    var schema = _ref4.schema;\n    return schema;\n  }\n};\nexport var TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    type: GraphQLNonNull(GraphQLString)\n  }],\n  resolve: function resolve(source, _ref5, context, _ref6) {\n    var name = _ref5.name;\n    var schema = _ref6.schema;\n    return schema.getType(name);\n  }\n};\nexport var TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: function resolve(source, args, context, _ref7) {\n    var parentType = _ref7.parentType;\n    return parentType.name;\n  }\n};\nexport var introspectionTypes = [__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind];\nexport function isIntrospectionType(type) {\n  return isNamedType(type) && ( // Would prefer to use introspectionTypes.some(), however %checks needs\n  // a simple expression.\n  type.name === __Schema.name || type.name === __Directive.name || type.name === __DirectiveLocation.name || type.name === __Type.name || type.name === __Field.name || type.name === __InputValue.name || type.name === __EnumValue.name || type.name === __TypeKind.name);\n}"]},"metadata":{},"sourceType":"module"}