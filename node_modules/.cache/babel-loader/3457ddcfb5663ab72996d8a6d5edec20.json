{"ast":null,"code":"import { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\n\nvar Parser =\n/** @class */\nfunction () {\n  function Parser() {}\n\n  Parser.parseMobilehubConfig = function (config) {\n    var amplifyConfig = {}; // Analytics\n\n    if (config['aws_mobile_analytics_app_id']) {\n      var Analytics = {\n        AWSPinpoint: {\n          appId: config['aws_mobile_analytics_app_id'],\n          region: config['aws_mobile_analytics_app_region']\n        }\n      };\n      amplifyConfig.Analytics = Analytics;\n    } // Auth\n\n\n    if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n      var Auth = {\n        userPoolId: config['aws_user_pools_id'],\n        userPoolWebClientId: config['aws_user_pools_web_client_id'],\n        region: config['aws_cognito_region'],\n        identityPoolId: config['aws_cognito_identity_pool_id'],\n        identityPoolRegion: config['aws_cognito_region'],\n        mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable' ? true : false\n      };\n      amplifyConfig.Auth = Auth;\n    } // Storage\n\n\n    var storageConfig;\n\n    if (config['aws_user_files_s3_bucket']) {\n      storageConfig = {\n        AWSS3: {\n          bucket: config['aws_user_files_s3_bucket'],\n          region: config['aws_user_files_s3_bucket_region'],\n          dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing']\n        }\n      };\n    } else {\n      storageConfig = config ? config.Storage || config : {};\n    }\n\n    amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n    amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n    amplifyConfig.Storage = Object.assign({}, storageConfig);\n    logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n    return amplifyConfig;\n  };\n\n  return Parser;\n}();\n\nexport default Parser;","map":{"version":3,"sources":["../src/Parser.ts"],"names":[],"mappings":"AACA,SAAS,aAAa,IAAI,MAA1B,QAAwC,UAAxC;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,QAAX,CAAf;;AAEA,IAAA,MAAA;AAAA;AAAA,YAAA;AAAA,WAAA,MAAA,GAAA,CAsDC;;AArDO,EAAA,MAAA,CAAA,oBAAA,GAAP,UAA4B,MAA5B,EAAkC;AACjC,QAAM,aAAa,GAAkB,EAArC,CADiC,CAEjC;;AACA,QAAI,MAAM,CAAC,6BAAD,CAAV,EAA2C;AAC1C,UAAM,SAAS,GAAG;AACjB,QAAA,WAAW,EAAE;AACZ,UAAA,KAAK,EAAE,MAAM,CAAC,6BAAD,CADD;AAEZ,UAAA,MAAM,EAAE,MAAM,CAAC,iCAAD;AAFF;AADI,OAAlB;AAMA,MAAA,aAAa,CAAC,SAAd,GAA0B,SAA1B;AACA,KAXgC,CAajC;;;AACA,QAAI,MAAM,CAAC,8BAAD,CAAN,IAA0C,MAAM,CAAC,mBAAD,CAApD,EAA2E;AAC1E,UAAM,IAAI,GAAG;AACZ,QAAA,UAAU,EAAE,MAAM,CAAC,mBAAD,CADN;AAEZ,QAAA,mBAAmB,EAAE,MAAM,CAAC,8BAAD,CAFf;AAGZ,QAAA,MAAM,EAAE,MAAM,CAAC,oBAAD,CAHF;AAIZ,QAAA,cAAc,EAAE,MAAM,CAAC,8BAAD,CAJV;AAKL,QAAA,kBAAkB,EAAE,MAAM,CAAC,oBAAD,CALrB;AAMZ,QAAA,eAAe,EACd,MAAM,CAAC,uBAAD,CAAN,KAAoC,QAApC,GAA+C,IAA/C,GAAsD;AAP3C,OAAb;AASA,MAAA,aAAa,CAAC,IAAd,GAAqB,IAArB;AACA,KAzBgC,CA2BjC;;;AACA,QAAI,aAAJ;;AACA,QAAI,MAAM,CAAC,0BAAD,CAAV,EAAwC;AACvC,MAAA,aAAa,GAAG;AACf,QAAA,KAAK,EAAE;AACN,UAAA,MAAM,EAAE,MAAM,CAAC,0BAAD,CADR;AAEN,UAAA,MAAM,EAAE,MAAM,CAAC,iCAAD,CAFR;AAGN,UAAA,0CAA0C,EACzC,MAAM,CACL,oEADK;AAJD;AADQ,OAAhB;AAUA,KAXD,MAWO;AACN,MAAA,aAAa,GAAG,MAAM,GAAG,MAAM,CAAC,OAAP,IAAkB,MAArB,GAA8B,EAApD;AACA;;AACD,IAAA,aAAa,CAAC,SAAd,GAA0B,MAAM,CAAC,MAAP,CACzB,EADyB,EAEzB,aAAa,CAAC,SAFW,EAGzB,MAAM,CAAC,SAHkB,CAA1B;AAKA,IAAA,aAAa,CAAC,IAAd,GAAqB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,aAAa,CAAC,IAAhC,EAAsC,MAAM,CAAC,IAA7C,CAArB;AACA,IAAA,aAAa,CAAC,OAAd,GAAwB,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,aAAlB,CAAxB;AACA,IAAA,MAAM,CAAC,KAAP,CAAa,cAAb,EAA6B,MAA7B,EAAqC,kBAArC,EAAyD,aAAzD;AACA,WAAO,aAAP;AACA,GApDM;;AAqDR,SAAA,MAAA;AAAC,CAtDD,EAAA","sourceRoot":"","sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nvar logger = new Logger('Parser');\nvar Parser = /** @class */ (function () {\n    function Parser() {\n    }\n    Parser.parseMobilehubConfig = function (config) {\n        var amplifyConfig = {};\n        // Analytics\n        if (config['aws_mobile_analytics_app_id']) {\n            var Analytics = {\n                AWSPinpoint: {\n                    appId: config['aws_mobile_analytics_app_id'],\n                    region: config['aws_mobile_analytics_app_region'],\n                },\n            };\n            amplifyConfig.Analytics = Analytics;\n        }\n        // Auth\n        if (config['aws_cognito_identity_pool_id'] || config['aws_user_pools_id']) {\n            var Auth = {\n                userPoolId: config['aws_user_pools_id'],\n                userPoolWebClientId: config['aws_user_pools_web_client_id'],\n                region: config['aws_cognito_region'],\n                identityPoolId: config['aws_cognito_identity_pool_id'],\n                identityPoolRegion: config['aws_cognito_region'],\n                mandatorySignIn: config['aws_mandatory_sign_in'] === 'enable' ? true : false,\n            };\n            amplifyConfig.Auth = Auth;\n        }\n        // Storage\n        var storageConfig;\n        if (config['aws_user_files_s3_bucket']) {\n            storageConfig = {\n                AWSS3: {\n                    bucket: config['aws_user_files_s3_bucket'],\n                    region: config['aws_user_files_s3_bucket_region'],\n                    dangerouslyConnectToHttpEndpointForTesting: config['aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing'],\n                },\n            };\n        }\n        else {\n            storageConfig = config ? config.Storage || config : {};\n        }\n        amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);\n        amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);\n        amplifyConfig.Storage = Object.assign({}, storageConfig);\n        logger.debug('parse config', config, 'to amplifyconfig', amplifyConfig);\n        return amplifyConfig;\n    };\n    return Parser;\n}());\nexport default Parser;\n//# sourceMappingURL=Parser.js.map"]},"metadata":{},"sourceType":"module"}