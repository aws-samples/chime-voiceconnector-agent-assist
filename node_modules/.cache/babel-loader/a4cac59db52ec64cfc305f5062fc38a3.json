{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { SYNC } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, predicateToGraphQLCondition } from './utils';\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\n\nvar SyncEngine =\n/** @class */\nfunction () {\n  function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, maxRecordsToSync, syncPageSize, conflictHandler, errorHandler) {\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.modelClasses = modelClasses;\n    this.userModelClasses = userModelClasses;\n    this.storage = storage;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.maxRecordsToSync = maxRecordsToSync;\n    this.syncPageSize = syncPageSize;\n    this.started = false;\n    this.online = false;\n    this.processingMutations = false;\n    var MutationEvent = this.modelClasses['MutationEvent'];\n    this.outbox = new MutationEventOutbox(this.schema, this.namespaceResolver, MutationEvent, ownSymbol);\n    this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n    this.syncQueriesProcessor = new SyncProcessor(this.schema, maxRecordsToSync, syncPageSize);\n    this.subscriptionsProcessor = new SubscriptionProcessor(this.schema);\n    this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, conflictHandler, errorHandler);\n  }\n\n  SyncEngine.prototype.start = function (params) {\n    var _this = this;\n\n    return new Observable(function (observer) {\n      logger.log('starting sync engine...');\n      _this.started = true;\n      var subscriptions = [];\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var err_1, datastoreConnectivity;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.setupModels(params)];\n\n              case 1:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _a.sent();\n                logger.error('Sync engine error on start', err_1);\n                return [2\n                /*return*/\n                ];\n\n              case 3:\n                datastoreConnectivity = new DataStoreConnectivity();\n                datastoreConnectivity.status().subscribe(function (_a) {\n                  var online = _a.online;\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var _b, ctlSubsObservable, dataSubsObservable, errorHandler, _c, _d, err_2, currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable, syncQuerySubscription, err_3;\n\n                    var _this = this;\n\n                    return __generator(this, function (_e) {\n                      switch (_e.label) {\n                        case 0:\n                          if (!(online && !this.online)) return [3\n                          /*break*/\n                          , 10];\n                          _b = this.subscriptionsProcessor.start(), ctlSubsObservable = _b[0], dataSubsObservable = _b[1];\n                          errorHandler = this.disconnectionHandler(datastoreConnectivity);\n                          _e.label = 1;\n\n                        case 1:\n                          _e.trys.push([1, 3,, 4]);\n\n                          _d = (_c = subscriptions).push;\n                          return [4\n                          /*yield*/\n                          , this.waitForSubscriptionsReady(ctlSubsObservable, errorHandler)];\n\n                        case 2:\n                          _d.apply(_c, [_e.sent()]);\n\n                          return [3\n                          /*break*/\n                          , 4];\n\n                        case 3:\n                          err_2 = _e.sent();\n                          observer.error(err_2);\n                          return [2\n                          /*return*/\n                          ];\n\n                        case 4:\n                          logger.log('Realtime ready');\n                          currentTimeStamp = new Date().getTime();\n                          return [4\n                          /*yield*/\n                          , this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n\n                        case 5:\n                          modelLastSync = _e.sent();\n                          paginatingModels = new Set(modelLastSync.keys());\n                          syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n\n                          if (this.isFullSync(modelLastSync)) {\n                            clearTimeout(this.fullSyncTimeoutId);\n                            this.fullSyncTimeoutId = undefined;\n                          }\n\n                          _e.label = 6;\n\n                        case 6:\n                          _e.trys.push([6, 8,, 9]);\n\n                          return [4\n                          /*yield*/\n                          , this.waitForSyncQueries(syncQueriesObservable, paginatingModels)];\n\n                        case 7:\n                          syncQuerySubscription = _e.sent();\n\n                          if (syncQuerySubscription) {\n                            subscriptions.push(syncQuerySubscription);\n                          }\n\n                          return [3\n                          /*break*/\n                          , 9];\n\n                        case 8:\n                          err_3 = _e.sent();\n                          observer.error(err_3);\n                          return [2\n                          /*return*/\n                          ];\n\n                        case 9:\n                          //#endregion\n                          //#region process mutations\n                          subscriptions.push(this.mutationsProcessor.start().subscribe(function (_a) {\n                            var _transformerMutationType = _a[0],\n                                modelDefinition = _a[1],\n                                item = _a[2];\n                            var modelConstructor = _this.userModelClasses[modelDefinition.name];\n\n                            var model = _this.modelInstanceCreator(modelConstructor, item);\n\n                            _this.modelMerger.merge(_this.storage, model);\n                          })); //#endregion\n                          // TODO: extract to function\n\n                          subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                            var _transformerMutationType = _a[0],\n                                modelDefinition = _a[1],\n                                item = _a[2];\n                            var modelConstructor = _this.userModelClasses[modelDefinition.name];\n\n                            var model = _this.modelInstanceCreator(modelConstructor, item);\n\n                            _this.modelMerger.merge(_this.storage, model);\n                          }));\n                          return [3\n                          /*break*/\n                          , 11];\n\n                        case 10:\n                          if (!online) {\n                            subscriptions.forEach(function (sub) {\n                              return sub.unsubscribe();\n                            });\n                            subscriptions = [];\n                          }\n\n                          _e.label = 11;\n\n                        case 11:\n                          this.online = online;\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                });\n                this.storage.observe(null, null, ownSymbol).filter(function (_a) {\n                  var model = _a.model;\n\n                  var modelDefinition = _this.getModelDefinition(model);\n\n                  return modelDefinition.syncable === true;\n                }).subscribe({\n                  next: function next(_a) {\n                    var opType = _a.opType,\n                        model = _a.model,\n                        element = _a.element,\n                        condition = _a.condition;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var namespace, MutationEventConstructor, graphQLCondition, mutationEvent;\n                      return __generator(this, function (_b) {\n                        switch (_b.label) {\n                          case 0:\n                            namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                            MutationEventConstructor = this.modelClasses['MutationEvent'];\n                            graphQLCondition = predicateToGraphQLCondition(condition);\n                            mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                            return [4\n                            /*yield*/\n                            , this.outbox.enqueue(this.storage, mutationEvent)];\n\n                          case 1:\n                            _b.sent();\n\n                            if (this.online) {\n                              this.mutationsProcessor.resume();\n                            }\n\n                            return [2\n                            /*return*/\n                            ];\n                        }\n                      });\n                    });\n                  }\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        subscriptions.forEach(function (sub) {\n          return sub.unsubscribe();\n        });\n      };\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelLastSync, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = Map.bind;\n            return [4\n            /*yield*/\n            , this.getModelsMetadata()];\n\n          case 1:\n            modelLastSync = new (_a.apply(Map, [void 0, _b.sent().map(function (_a) {\n              var namespace = _a.namespace,\n                  model = _a.model,\n                  lastSync = _a.lastSync,\n                  lastFullSync = _a.lastFullSync,\n                  fullSyncInterval = _a.fullSyncInterval;\n              var nextFullSync = lastFullSync + fullSyncInterval;\n              var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp ? 0 // perform full sync if expired\n              : lastSync; // perform delta sync\n\n              return [_this.schema.namespaces[namespace].models[model], [namespace, syncFrom]];\n            })]))();\n            return [2\n            /*return*/\n            , modelLastSync];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.isFullSync = function (modelsMap) {\n    for (var _i = 0, _a = Array.from(modelsMap.values()); _i < _a.length; _i++) {\n      var _b = _a[_i],\n          syncFrom = _b[1];\n\n      if (syncFrom === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SyncEngine.prototype.waitForSyncQueries = function (observable, paginatingModels) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          if (!_this.online) {\n            resolve();\n          }\n\n          var currentTimeStamp = new Date().getTime();\n          var subscription = observable.subscribe({\n            error: function error(err) {\n              reject(err);\n            },\n            next: function next(_a) {\n              var namespace = _a.namespace,\n                  modelDefinition = _a.modelDefinition,\n                  items = _a.items,\n                  done = _a.done,\n                  startedAt = _a.startedAt,\n                  isFullSync = _a.isFullSync;\n              return __awaiter(_this, void 0, void 0, function () {\n                var promises, modelMetadata_1, fullSyncInterval;\n\n                var _this = this;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      promises = items.map(function (item) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var modelConstructor, model;\n                          return __generator(this, function (_a) {\n                            modelConstructor = this.userModelClasses[modelDefinition.name];\n                            model = this.modelInstanceCreator(modelConstructor, item);\n                            return [2\n                            /*return*/\n                            , this.modelMerger.merge(this.storage, model)];\n                          });\n                        });\n                      });\n                      return [4\n                      /*yield*/\n                      , Promise.all(promises)];\n\n                    case 1:\n                      _b.sent();\n\n                      if (!done) return [3\n                      /*break*/\n                      , 4];\n                      paginatingModels.delete(modelDefinition);\n                      return [4\n                      /*yield*/\n                      , this.getModelMetadata(namespace, modelDefinition.name)];\n\n                    case 2:\n                      modelMetadata_1 = _b.sent();\n                      modelMetadata_1 = this.modelClasses.ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                        draft.lastSync = startedAt;\n                        draft.lastFullSync = isFullSync ? currentTimeStamp : modelMetadata_1.lastFullSync;\n                      });\n                      fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                      return [4\n                      /*yield*/\n                      , this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n\n                    case 3:\n                      _b.sent(); // resolve promise if all done\n\n\n                      if (paginatingModels.size === 0) {\n                        resolve(subscription);\n                      }\n\n                      if (isFullSync && !this.fullSyncTimeoutId) {\n                        // register next full sync when no full sync is already scheduled\n                        this.fullSyncTimeoutId = setTimeout(function () {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable;\n                            return __generator(this, function (_a) {\n                              switch (_a.label) {\n                                case 0:\n                                  currentTimeStamp = new Date().getTime();\n                                  return [4\n                                  /*yield*/\n                                  , this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n\n                                case 1:\n                                  modelLastSync = _a.sent();\n                                  paginatingModels = new Set(modelLastSync.keys());\n                                  syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n                                  this.fullSyncTimeoutId = undefined;\n                                  this.waitForSyncQueries(syncQueriesObservable, paginatingModels);\n                                  return [2\n                                  /*return*/\n                                  ];\n                              }\n                            });\n                          });\n                        }, fullSyncInterval);\n                      }\n\n                      _b.label = 4;\n\n                    case 4:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }\n          });\n        })];\n      });\n    });\n  };\n\n  SyncEngine.prototype.disconnectionHandler = function (datastoreConnectivity) {\n    return function (msg) {\n      // This implementation is tight to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n      if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg || PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n        datastoreConnectivity.socketDisconnected();\n      }\n    };\n  };\n\n  SyncEngine.prototype.waitForSubscriptionsReady = function (ctlSubsObservable, errorHandler) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          var subscription = ctlSubsObservable.subscribe({\n            next: function next(msg) {\n              if (msg === CONTROL_MSG.CONNECTED) {\n                resolve(subscription);\n              }\n            },\n            error: function error(err) {\n              reject(\"subscription failed \" + err);\n              errorHandler(err);\n            }\n          });\n        })];\n      });\n    });\n  };\n\n  SyncEngine.prototype.setupModels = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fullSyncInterval, ModelMetadata, models, promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            fullSyncInterval = params.fullSyncInterval;\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            models = [];\n            Object.values(this.schema.namespaces).forEach(function (namespace) {\n              Object.values(namespace.models).filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n              }).forEach(function (model) {\n                models.push([namespace.name, model.name]);\n              });\n            });\n            promises = models.map(function (_a) {\n              var namespace = _a[0],\n                  model = _a[1];\n              return __awaiter(_this, void 0, void 0, function () {\n                var modelMetadata;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getModelMetadata(namespace, model)];\n\n                    case 1:\n                      modelMetadata = _b.sent();\n                      if (!(modelMetadata === undefined)) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , this.storage.save(this.modelInstanceCreator(ModelMetadata, {\n                        model: model,\n                        namespace: namespace,\n                        lastSync: null,\n                        fullSyncInterval: fullSyncInterval,\n                        lastFullSync: null\n                      }), undefined, ownSymbol)];\n\n                    case 2:\n                      _b.sent();\n\n                      return [3\n                      /*break*/\n                      , 5];\n\n                    case 3:\n                      return [4\n                      /*yield*/\n                      , this.storage.save(this.modelClasses.ModelMetadata.copyOf(modelMetadata, function (draft) {\n                        draft.fullSyncInterval = fullSyncInterval;\n                      }))];\n\n                    case 4:\n                      _b.sent();\n\n                      _b.label = 5;\n\n                    case 5:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadata = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, modelsMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata)];\n\n          case 1:\n            modelsMetadata = _a.sent();\n            return [2\n            /*return*/\n            , modelsMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, predicate, modelMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) {\n              return c.namespace('eq', namespace).model('eq', model);\n            });\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata, predicate)];\n\n          case 1:\n            modelMetadata = _a.sent()[0];\n            return [2\n            /*return*/\n            , modelMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n    return modelDefinition;\n  };\n\n  SyncEngine.getNamespace = function () {\n    var namespace = {\n      name: SYNC,\n      relationships: {},\n      enums: {\n        OperationType: {\n          name: 'OperationType',\n          values: ['CREATE', 'UPDATE', 'DELETE']\n        }\n      },\n      nonModels: {},\n      models: {\n        MutationEvent: {\n          name: 'MutationEvent',\n          pluralName: 'MutationEvents',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            data: {\n              name: 'data',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            modelId: {\n              name: 'modelId',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            operation: {\n              name: 'operation',\n              type: {\n                enum: 'Operationtype'\n              },\n              isArray: false,\n              isRequired: true\n            },\n            condition: {\n              name: 'condition',\n              type: 'String',\n              isArray: false,\n              isRequired: true\n            }\n          }\n        },\n        ModelMetadata: {\n          name: 'ModelMetadata',\n          pluralName: 'ModelsMetadata',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            namespace: {\n              name: 'namespace',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            lastSync: {\n              name: 'lastSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            lastFullSync: {\n              name: 'lastFullSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            fullSyncInterval: {\n              name: 'fullSyncInterval',\n              type: 'Int',\n              isRequired: true,\n              isArray: false\n            }\n          }\n        }\n      }\n    };\n    return namespace;\n  };\n\n  return SyncEngine;\n}();\n\nexport { SyncEngine };","map":{"version":3,"sources":["../../src/sync/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { SYNC } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, predicateToGraphQLCondition, } from './utils';\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, maxRecordsToSync, syncPageSize, conflictHandler, errorHandler) {\n        this.schema = schema;\n        this.namespaceResolver = namespaceResolver;\n        this.modelClasses = modelClasses;\n        this.userModelClasses = userModelClasses;\n        this.storage = storage;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.maxRecordsToSync = maxRecordsToSync;\n        this.syncPageSize = syncPageSize;\n        this.started = false;\n        this.online = false;\n        this.processingMutations = false;\n        var MutationEvent = this.modelClasses['MutationEvent'];\n        this.outbox = new MutationEventOutbox(this.schema, this.namespaceResolver, MutationEvent, ownSymbol);\n        this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n        this.syncQueriesProcessor = new SyncProcessor(this.schema, maxRecordsToSync, syncPageSize);\n        this.subscriptionsProcessor = new SubscriptionProcessor(this.schema);\n        this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, conflictHandler, errorHandler);\n    }\n    SyncEngine.prototype.start = function (params) {\n        var _this = this;\n        return new Observable(function (observer) {\n            logger.log('starting sync engine...');\n            _this.started = true;\n            var subscriptions = [];\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var err_1, datastoreConnectivity;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            _a.trys.push([0, 2, , 3]);\n                            return [4 /*yield*/, this.setupModels(params)];\n                        case 1:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            err_1 = _a.sent();\n                            logger.error('Sync engine error on start', err_1);\n                            return [2 /*return*/];\n                        case 3:\n                            datastoreConnectivity = new DataStoreConnectivity();\n                            datastoreConnectivity.status().subscribe(function (_a) {\n                                var online = _a.online;\n                                return __awaiter(_this, void 0, void 0, function () {\n                                    var _b, ctlSubsObservable, dataSubsObservable, errorHandler, _c, _d, err_2, currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable, syncQuerySubscription, err_3;\n                                    var _this = this;\n                                    return __generator(this, function (_e) {\n                                        switch (_e.label) {\n                                            case 0:\n                                                if (!(online && !this.online)) return [3 /*break*/, 10];\n                                                _b = this.subscriptionsProcessor.start(), ctlSubsObservable = _b[0], dataSubsObservable = _b[1];\n                                                errorHandler = this.disconnectionHandler(datastoreConnectivity);\n                                                _e.label = 1;\n                                            case 1:\n                                                _e.trys.push([1, 3, , 4]);\n                                                _d = (_c = subscriptions).push;\n                                                return [4 /*yield*/, this.waitForSubscriptionsReady(ctlSubsObservable, errorHandler)];\n                                            case 2:\n                                                _d.apply(_c, [_e.sent()]);\n                                                return [3 /*break*/, 4];\n                                            case 3:\n                                                err_2 = _e.sent();\n                                                observer.error(err_2);\n                                                return [2 /*return*/];\n                                            case 4:\n                                                logger.log('Realtime ready');\n                                                currentTimeStamp = new Date().getTime();\n                                                return [4 /*yield*/, this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n                                            case 5:\n                                                modelLastSync = _e.sent();\n                                                paginatingModels = new Set(modelLastSync.keys());\n                                                syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n                                                if (this.isFullSync(modelLastSync)) {\n                                                    clearTimeout(this.fullSyncTimeoutId);\n                                                    this.fullSyncTimeoutId = undefined;\n                                                }\n                                                _e.label = 6;\n                                            case 6:\n                                                _e.trys.push([6, 8, , 9]);\n                                                return [4 /*yield*/, this.waitForSyncQueries(syncQueriesObservable, paginatingModels)];\n                                            case 7:\n                                                syncQuerySubscription = _e.sent();\n                                                if (syncQuerySubscription) {\n                                                    subscriptions.push(syncQuerySubscription);\n                                                }\n                                                return [3 /*break*/, 9];\n                                            case 8:\n                                                err_3 = _e.sent();\n                                                observer.error(err_3);\n                                                return [2 /*return*/];\n                                            case 9:\n                                                //#endregion\n                                                //#region process mutations\n                                                subscriptions.push(this.mutationsProcessor\n                                                    .start()\n                                                    .subscribe(function (_a) {\n                                                    var _transformerMutationType = _a[0], modelDefinition = _a[1], item = _a[2];\n                                                    var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                                                    var model = _this.modelInstanceCreator(modelConstructor, item);\n                                                    _this.modelMerger.merge(_this.storage, model);\n                                                }));\n                                                //#endregion\n                                                // TODO: extract to function\n                                                subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                                    var _transformerMutationType = _a[0], modelDefinition = _a[1], item = _a[2];\n                                                    var modelConstructor = _this.userModelClasses[modelDefinition.name];\n                                                    var model = _this.modelInstanceCreator(modelConstructor, item);\n                                                    _this.modelMerger.merge(_this.storage, model);\n                                                }));\n                                                return [3 /*break*/, 11];\n                                            case 10:\n                                                if (!online) {\n                                                    subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n                                                    subscriptions = [];\n                                                }\n                                                _e.label = 11;\n                                            case 11:\n                                                this.online = online;\n                                                return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            });\n                            this.storage\n                                .observe(null, null, ownSymbol)\n                                .filter(function (_a) {\n                                var model = _a.model;\n                                var modelDefinition = _this.getModelDefinition(model);\n                                return modelDefinition.syncable === true;\n                            })\n                                .subscribe({\n                                next: function (_a) {\n                                    var opType = _a.opType, model = _a.model, element = _a.element, condition = _a.condition;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var namespace, MutationEventConstructor, graphQLCondition, mutationEvent;\n                                        return __generator(this, function (_b) {\n                                            switch (_b.label) {\n                                                case 0:\n                                                    namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                                                    MutationEventConstructor = this.modelClasses['MutationEvent'];\n                                                    graphQLCondition = predicateToGraphQLCondition(condition);\n                                                    mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                                                    return [4 /*yield*/, this.outbox.enqueue(this.storage, mutationEvent)];\n                                                case 1:\n                                                    _b.sent();\n                                                    if (this.online) {\n                                                        this.mutationsProcessor.resume();\n                                                    }\n                                                    return [2 /*return*/];\n                                            }\n                                        });\n                                    });\n                                },\n                            });\n                            return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () {\n                subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n            };\n        });\n    };\n    SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n        return __awaiter(this, void 0, void 0, function () {\n            var modelLastSync, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = Map.bind;\n                        return [4 /*yield*/, this.getModelsMetadata()];\n                    case 1:\n                        modelLastSync = new (_a.apply(Map, [void 0, (_b.sent()).map(function (_a) {\n                                var namespace = _a.namespace, model = _a.model, lastSync = _a.lastSync, lastFullSync = _a.lastFullSync, fullSyncInterval = _a.fullSyncInterval;\n                                var nextFullSync = lastFullSync + fullSyncInterval;\n                                var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp\n                                    ? 0 // perform full sync if expired\n                                    : lastSync; // perform delta sync\n                                return [\n                                    _this.schema.namespaces[namespace].models[model],\n                                    [namespace, syncFrom],\n                                ];\n                            })]))();\n                        return [2 /*return*/, modelLastSync];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.isFullSync = function (modelsMap) {\n        for (var _i = 0, _a = Array.from(modelsMap.values()); _i < _a.length; _i++) {\n            var _b = _a[_i], syncFrom = _b[1];\n            if (syncFrom === 0) {\n                return true;\n            }\n        }\n        return false;\n    };\n    SyncEngine.prototype.waitForSyncQueries = function (observable, paginatingModels) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        if (!_this.online) {\n                            resolve();\n                        }\n                        var currentTimeStamp = new Date().getTime();\n                        var subscription = observable.subscribe({\n                            error: function (err) {\n                                reject(err);\n                            },\n                            next: function (_a) {\n                                var namespace = _a.namespace, modelDefinition = _a.modelDefinition, items = _a.items, done = _a.done, startedAt = _a.startedAt, isFullSync = _a.isFullSync;\n                                return __awaiter(_this, void 0, void 0, function () {\n                                    var promises, modelMetadata_1, fullSyncInterval;\n                                    var _this = this;\n                                    return __generator(this, function (_b) {\n                                        switch (_b.label) {\n                                            case 0:\n                                                promises = items.map(function (item) { return __awaiter(_this, void 0, void 0, function () {\n                                                    var modelConstructor, model;\n                                                    return __generator(this, function (_a) {\n                                                        modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                        model = this.modelInstanceCreator(modelConstructor, item);\n                                                        return [2 /*return*/, this.modelMerger.merge(this.storage, model)];\n                                                    });\n                                                }); });\n                                                return [4 /*yield*/, Promise.all(promises)];\n                                            case 1:\n                                                _b.sent();\n                                                if (!done) return [3 /*break*/, 4];\n                                                paginatingModels.delete(modelDefinition);\n                                                return [4 /*yield*/, this.getModelMetadata(namespace, modelDefinition.name)];\n                                            case 2:\n                                                modelMetadata_1 = _b.sent();\n                                                modelMetadata_1 = this.modelClasses\n                                                    .ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                                    draft.lastSync = startedAt;\n                                                    draft.lastFullSync = isFullSync\n                                                        ? currentTimeStamp\n                                                        : modelMetadata_1.lastFullSync;\n                                                });\n                                                fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                                return [4 /*yield*/, this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n                                            case 3:\n                                                _b.sent();\n                                                // resolve promise if all done\n                                                if (paginatingModels.size === 0) {\n                                                    resolve(subscription);\n                                                }\n                                                if (isFullSync && !this.fullSyncTimeoutId) {\n                                                    // register next full sync when no full sync is already scheduled\n                                                    this.fullSyncTimeoutId = setTimeout(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                        var currentTimeStamp, modelLastSync, paginatingModels, syncQueriesObservable;\n                                                        return __generator(this, function (_a) {\n                                                            switch (_a.label) {\n                                                                case 0:\n                                                                    currentTimeStamp = new Date().getTime();\n                                                                    return [4 /*yield*/, this.getModelsMetadataWithNextFullSync(currentTimeStamp)];\n                                                                case 1:\n                                                                    modelLastSync = _a.sent();\n                                                                    paginatingModels = new Set(modelLastSync.keys());\n                                                                    syncQueriesObservable = this.syncQueriesProcessor.start(modelLastSync);\n                                                                    this.fullSyncTimeoutId = undefined;\n                                                                    this.waitForSyncQueries(syncQueriesObservable, paginatingModels);\n                                                                    return [2 /*return*/];\n                                                            }\n                                                        });\n                                                    }); }, fullSyncInterval);\n                                                }\n                                                _b.label = 4;\n                                            case 4: return [2 /*return*/];\n                                        }\n                                    });\n                                });\n                            },\n                        });\n                    })];\n            });\n        });\n    };\n    SyncEngine.prototype.disconnectionHandler = function (datastoreConnectivity) {\n        return function (msg) {\n            // This implementation is tight to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n            if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg ||\n                PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n                datastoreConnectivity.socketDisconnected();\n            }\n        };\n    };\n    SyncEngine.prototype.waitForSubscriptionsReady = function (ctlSubsObservable, errorHandler) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                return [2 /*return*/, new Promise(function (resolve, reject) {\n                        var subscription = ctlSubsObservable.subscribe({\n                            next: function (msg) {\n                                if (msg === CONTROL_MSG.CONNECTED) {\n                                    resolve(subscription);\n                                }\n                            },\n                            error: function (err) {\n                                reject(\"subscription failed \" + err);\n                                errorHandler(err);\n                            },\n                        });\n                    })];\n            });\n        });\n    };\n    SyncEngine.prototype.setupModels = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fullSyncInterval, ModelMetadata, models, promises;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        fullSyncInterval = params.fullSyncInterval;\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        models = [];\n                        Object.values(this.schema.namespaces).forEach(function (namespace) {\n                            Object.values(namespace.models)\n                                .filter(function (_a) {\n                                var syncable = _a.syncable;\n                                return syncable;\n                            })\n                                .forEach(function (model) {\n                                models.push([namespace.name, model.name]);\n                            });\n                        });\n                        promises = models.map(function (_a) {\n                            var namespace = _a[0], model = _a[1];\n                            return __awaiter(_this, void 0, void 0, function () {\n                                var modelMetadata;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0: return [4 /*yield*/, this.getModelMetadata(namespace, model)];\n                                        case 1:\n                                            modelMetadata = _b.sent();\n                                            if (!(modelMetadata === undefined)) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.storage.save(this.modelInstanceCreator(ModelMetadata, {\n                                                    model: model,\n                                                    namespace: namespace,\n                                                    lastSync: null,\n                                                    fullSyncInterval: fullSyncInterval,\n                                                    lastFullSync: null,\n                                                }), undefined, ownSymbol)];\n                                        case 2:\n                                            _b.sent();\n                                            return [3 /*break*/, 5];\n                                        case 3: return [4 /*yield*/, this.storage.save(this.modelClasses.ModelMetadata.copyOf(modelMetadata, function (draft) {\n                                                draft.fullSyncInterval = fullSyncInterval;\n                                            }))];\n                                        case 4:\n                                            _b.sent();\n                                            _b.label = 5;\n                                        case 5: return [2 /*return*/];\n                                    }\n                                });\n                            });\n                        });\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelsMetadata = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, modelsMetadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        return [4 /*yield*/, this.storage.query(ModelMetadata)];\n                    case 1:\n                        modelsMetadata = _a.sent();\n                        return [2 /*return*/, modelsMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, predicate, modelMetadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        predicate = ModelPredicateCreator.createFromExisting(this.schema.namespaces[SYNC].models[ModelMetadata.name], function (c) { return c.namespace('eq', namespace).model('eq', model); });\n                        return [4 /*yield*/, this.storage.query(ModelMetadata, predicate)];\n                    case 1:\n                        modelMetadata = (_a.sent())[0];\n                        return [2 /*return*/, modelMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n        return modelDefinition;\n    };\n    SyncEngine.getNamespace = function () {\n        var namespace = {\n            name: SYNC,\n            relationships: {},\n            enums: {\n                OperationType: {\n                    name: 'OperationType',\n                    values: ['CREATE', 'UPDATE', 'DELETE'],\n                },\n            },\n            nonModels: {},\n            models: {\n                MutationEvent: {\n                    name: 'MutationEvent',\n                    pluralName: 'MutationEvents',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        data: {\n                            name: 'data',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        modelId: {\n                            name: 'modelId',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        operation: {\n                            name: 'operation',\n                            type: {\n                                enum: 'Operationtype',\n                            },\n                            isArray: false,\n                            isRequired: true,\n                        },\n                        condition: {\n                            name: 'condition',\n                            type: 'String',\n                            isArray: false,\n                            isRequired: true,\n                        },\n                    },\n                },\n                ModelMetadata: {\n                    name: 'ModelMetadata',\n                    pluralName: 'ModelsMetadata',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        namespace: {\n                            name: 'namespace',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        lastSync: {\n                            name: 'lastSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        lastFullSync: {\n                            name: 'lastFullSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        fullSyncInterval: {\n                            name: 'fullSyncInterval',\n                            type: 'Int',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                    },\n                },\n            },\n        };\n        return namespace;\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}