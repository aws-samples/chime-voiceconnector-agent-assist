{"ast":null,"code":"var AWS = require('../core');\n\nvar v4Credentials = require('./v4_credentials');\n\nvar inherit = AWS.util.inherit;\n/**\n * @api private\n */\n\nvar expiresHeader = 'presigned-expires';\n/**\n * @api private\n */\n\nAWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {\n  constructor: function V4(request, serviceName, options) {\n    AWS.Signers.RequestSigner.call(this, request);\n    this.serviceName = serviceName;\n    options = options || {};\n    this.signatureCache = typeof options.signatureCache === 'boolean' ? options.signatureCache : true;\n    this.operation = options.operation;\n    this.signatureVersion = options.signatureVersion;\n  },\n  algorithm: 'AWS4-HMAC-SHA256',\n  addAuthorization: function addAuthorization(credentials, date) {\n    var datetime = AWS.util.date.iso8601(date).replace(/[:\\-]|\\.\\d{3}/g, '');\n\n    if (this.isPresigned()) {\n      this.updateForPresigned(credentials, datetime);\n    } else {\n      this.addHeaders(credentials, datetime);\n    }\n\n    this.request.headers['Authorization'] = this.authorization(credentials, datetime);\n  },\n  addHeaders: function addHeaders(credentials, datetime) {\n    this.request.headers['X-Amz-Date'] = datetime;\n\n    if (credentials.sessionToken) {\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    }\n  },\n  updateForPresigned: function updateForPresigned(credentials, datetime) {\n    var credString = this.credentialString(datetime);\n    var qs = {\n      'X-Amz-Date': datetime,\n      'X-Amz-Algorithm': this.algorithm,\n      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,\n      'X-Amz-Expires': this.request.headers[expiresHeader],\n      'X-Amz-SignedHeaders': this.signedHeaders()\n    };\n\n    if (credentials.sessionToken) {\n      qs['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    if (this.request.headers['Content-Type']) {\n      qs['Content-Type'] = this.request.headers['Content-Type'];\n    }\n\n    if (this.request.headers['Content-MD5']) {\n      qs['Content-MD5'] = this.request.headers['Content-MD5'];\n    }\n\n    if (this.request.headers['Cache-Control']) {\n      qs['Cache-Control'] = this.request.headers['Cache-Control'];\n    } // need to pull in any other X-Amz-* headers\n\n\n    AWS.util.each.call(this, this.request.headers, function (key, value) {\n      if (key === expiresHeader) return;\n\n      if (this.isSignableHeader(key)) {\n        var lowerKey = key.toLowerCase(); // Metadata should be normalized\n\n        if (lowerKey.indexOf('x-amz-meta-') === 0) {\n          qs[lowerKey] = value;\n        } else if (lowerKey.indexOf('x-amz-') === 0) {\n          qs[key] = value;\n        }\n      }\n    });\n    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';\n    this.request.path += sep + AWS.util.queryParamsToString(qs);\n  },\n  authorization: function authorization(credentials, datetime) {\n    var parts = [];\n    var credString = this.credentialString(datetime);\n    parts.push(this.algorithm + ' Credential=' + credentials.accessKeyId + '/' + credString);\n    parts.push('SignedHeaders=' + this.signedHeaders());\n    parts.push('Signature=' + this.signature(credentials, datetime));\n    return parts.join(', ');\n  },\n  signature: function signature(credentials, datetime) {\n    var signingKey = v4Credentials.getSigningKey(credentials, datetime.substr(0, 8), this.request.region, this.serviceName, this.signatureCache);\n    return AWS.util.crypto.hmac(signingKey, this.stringToSign(datetime), 'hex');\n  },\n  stringToSign: function stringToSign(datetime) {\n    var parts = [];\n    parts.push('AWS4-HMAC-SHA256');\n    parts.push(datetime);\n    parts.push(this.credentialString(datetime));\n    parts.push(this.hexEncodedHash(this.canonicalString()));\n    return parts.join('\\n');\n  },\n  canonicalString: function canonicalString() {\n    var parts = [],\n        pathname = this.request.pathname();\n    if (this.serviceName !== 's3' && this.signatureVersion !== 's3v4') pathname = AWS.util.uriEscapePath(pathname);\n    parts.push(this.request.method);\n    parts.push(pathname);\n    parts.push(this.request.search());\n    parts.push(this.canonicalHeaders() + '\\n');\n    parts.push(this.signedHeaders());\n    parts.push(this.hexEncodedBodyHash());\n    return parts.join('\\n');\n  },\n  canonicalHeaders: function canonicalHeaders() {\n    var headers = [];\n    AWS.util.each.call(this, this.request.headers, function (key, item) {\n      headers.push([key, item]);\n    });\n    headers.sort(function (a, b) {\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;\n    });\n    var parts = [];\n    AWS.util.arrayEach.call(this, headers, function (item) {\n      var key = item[0].toLowerCase();\n\n      if (this.isSignableHeader(key)) {\n        var value = item[1];\n\n        if (typeof value === 'undefined' || value === null || typeof value.toString !== 'function') {\n          throw AWS.util.error(new Error('Header ' + key + ' contains invalid value'), {\n            code: 'InvalidHeader'\n          });\n        }\n\n        parts.push(key + ':' + this.canonicalHeaderValues(value.toString()));\n      }\n    });\n    return parts.join('\\n');\n  },\n  canonicalHeaderValues: function canonicalHeaderValues(values) {\n    return values.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n  },\n  signedHeaders: function signedHeaders() {\n    var keys = [];\n    AWS.util.each.call(this, this.request.headers, function (key) {\n      key = key.toLowerCase();\n      if (this.isSignableHeader(key)) keys.push(key);\n    });\n    return keys.sort().join(';');\n  },\n  credentialString: function credentialString(datetime) {\n    return v4Credentials.createScope(datetime.substr(0, 8), this.request.region, this.serviceName);\n  },\n  hexEncodedHash: function hash(string) {\n    return AWS.util.crypto.sha256(string, 'hex');\n  },\n  hexEncodedBodyHash: function hexEncodedBodyHash() {\n    var request = this.request;\n\n    if (this.isPresigned() && this.serviceName === 's3' && !request.body) {\n      return 'UNSIGNED-PAYLOAD';\n    } else if (request.headers['X-Amz-Content-Sha256']) {\n      return request.headers['X-Amz-Content-Sha256'];\n    } else {\n      return this.hexEncodedHash(this.request.body || '');\n    }\n  },\n  unsignableHeaders: ['authorization', 'content-type', 'content-length', 'user-agent', expiresHeader, 'expect', 'x-amzn-trace-id'],\n  isSignableHeader: function isSignableHeader(key) {\n    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;\n    return this.unsignableHeaders.indexOf(key) < 0;\n  },\n  isPresigned: function isPresigned() {\n    return this.request.headers[expiresHeader] ? true : false;\n  }\n});\n/**\n * @api private\n */\n\nmodule.exports = AWS.Signers.V4;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/@aws-amplify/core/node_modules/aws-sdk/lib/signers/v4.js"],"names":["AWS","require","v4Credentials","inherit","util","expiresHeader","Signers","V4","RequestSigner","constructor","request","serviceName","options","call","signatureCache","operation","signatureVersion","algorithm","addAuthorization","credentials","date","datetime","iso8601","replace","isPresigned","updateForPresigned","addHeaders","headers","authorization","sessionToken","credString","credentialString","qs","accessKeyId","signedHeaders","each","key","value","isSignableHeader","lowerKey","toLowerCase","indexOf","sep","path","queryParamsToString","parts","push","signature","join","signingKey","getSigningKey","substr","region","crypto","hmac","stringToSign","hexEncodedHash","canonicalString","pathname","uriEscapePath","method","search","canonicalHeaders","hexEncodedBodyHash","item","sort","a","b","arrayEach","toString","error","Error","code","canonicalHeaderValues","values","keys","createScope","hash","string","sha256","body","unsignableHeaders","module","exports"],"mappings":"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","sourcesContent":["var AWS = require('../core');\nvar v4Credentials = require('./v4_credentials');\nvar inherit = AWS.util.inherit;\n\n/**\n * @api private\n */\nvar expiresHeader = 'presigned-expires';\n\n/**\n * @api private\n */\nAWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {\n  constructor: function V4(request, serviceName, options) {\n    AWS.Signers.RequestSigner.call(this, request);\n    this.serviceName = serviceName;\n    options = options || {};\n    this.signatureCache = typeof options.signatureCache === 'boolean' ? options.signatureCache : true;\n    this.operation = options.operation;\n    this.signatureVersion = options.signatureVersion;\n  },\n\n  algorithm: 'AWS4-HMAC-SHA256',\n\n  addAuthorization: function addAuthorization(credentials, date) {\n    var datetime = AWS.util.date.iso8601(date).replace(/[:\\-]|\\.\\d{3}/g, '');\n\n    if (this.isPresigned()) {\n      this.updateForPresigned(credentials, datetime);\n    } else {\n      this.addHeaders(credentials, datetime);\n    }\n\n    this.request.headers['Authorization'] =\n      this.authorization(credentials, datetime);\n  },\n\n  addHeaders: function addHeaders(credentials, datetime) {\n    this.request.headers['X-Amz-Date'] = datetime;\n    if (credentials.sessionToken) {\n      this.request.headers['x-amz-security-token'] = credentials.sessionToken;\n    }\n  },\n\n  updateForPresigned: function updateForPresigned(credentials, datetime) {\n    var credString = this.credentialString(datetime);\n    var qs = {\n      'X-Amz-Date': datetime,\n      'X-Amz-Algorithm': this.algorithm,\n      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,\n      'X-Amz-Expires': this.request.headers[expiresHeader],\n      'X-Amz-SignedHeaders': this.signedHeaders()\n    };\n\n    if (credentials.sessionToken) {\n      qs['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    if (this.request.headers['Content-Type']) {\n      qs['Content-Type'] = this.request.headers['Content-Type'];\n    }\n    if (this.request.headers['Content-MD5']) {\n      qs['Content-MD5'] = this.request.headers['Content-MD5'];\n    }\n    if (this.request.headers['Cache-Control']) {\n      qs['Cache-Control'] = this.request.headers['Cache-Control'];\n    }\n\n    // need to pull in any other X-Amz-* headers\n    AWS.util.each.call(this, this.request.headers, function(key, value) {\n      if (key === expiresHeader) return;\n      if (this.isSignableHeader(key)) {\n        var lowerKey = key.toLowerCase();\n        // Metadata should be normalized\n        if (lowerKey.indexOf('x-amz-meta-') === 0) {\n          qs[lowerKey] = value;\n        } else if (lowerKey.indexOf('x-amz-') === 0) {\n          qs[key] = value;\n        }\n      }\n    });\n\n    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';\n    this.request.path += sep + AWS.util.queryParamsToString(qs);\n  },\n\n  authorization: function authorization(credentials, datetime) {\n    var parts = [];\n    var credString = this.credentialString(datetime);\n    parts.push(this.algorithm + ' Credential=' +\n      credentials.accessKeyId + '/' + credString);\n    parts.push('SignedHeaders=' + this.signedHeaders());\n    parts.push('Signature=' + this.signature(credentials, datetime));\n    return parts.join(', ');\n  },\n\n  signature: function signature(credentials, datetime) {\n    var signingKey = v4Credentials.getSigningKey(\n      credentials,\n      datetime.substr(0, 8),\n      this.request.region,\n      this.serviceName,\n      this.signatureCache\n    );\n    return AWS.util.crypto.hmac(signingKey, this.stringToSign(datetime), 'hex');\n  },\n\n  stringToSign: function stringToSign(datetime) {\n    var parts = [];\n    parts.push('AWS4-HMAC-SHA256');\n    parts.push(datetime);\n    parts.push(this.credentialString(datetime));\n    parts.push(this.hexEncodedHash(this.canonicalString()));\n    return parts.join('\\n');\n  },\n\n  canonicalString: function canonicalString() {\n    var parts = [], pathname = this.request.pathname();\n    if (this.serviceName !== 's3' && this.signatureVersion !== 's3v4') pathname = AWS.util.uriEscapePath(pathname);\n\n    parts.push(this.request.method);\n    parts.push(pathname);\n    parts.push(this.request.search());\n    parts.push(this.canonicalHeaders() + '\\n');\n    parts.push(this.signedHeaders());\n    parts.push(this.hexEncodedBodyHash());\n    return parts.join('\\n');\n  },\n\n  canonicalHeaders: function canonicalHeaders() {\n    var headers = [];\n    AWS.util.each.call(this, this.request.headers, function (key, item) {\n      headers.push([key, item]);\n    });\n    headers.sort(function (a, b) {\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;\n    });\n    var parts = [];\n    AWS.util.arrayEach.call(this, headers, function (item) {\n      var key = item[0].toLowerCase();\n      if (this.isSignableHeader(key)) {\n        var value = item[1];\n        if (typeof value === 'undefined' || value === null || typeof value.toString !== 'function') {\n          throw AWS.util.error(new Error('Header ' + key + ' contains invalid value'), {\n            code: 'InvalidHeader'\n          });\n        }\n        parts.push(key + ':' +\n          this.canonicalHeaderValues(value.toString()));\n      }\n    });\n    return parts.join('\\n');\n  },\n\n  canonicalHeaderValues: function canonicalHeaderValues(values) {\n    return values.replace(/\\s+/g, ' ').replace(/^\\s+|\\s+$/g, '');\n  },\n\n  signedHeaders: function signedHeaders() {\n    var keys = [];\n    AWS.util.each.call(this, this.request.headers, function (key) {\n      key = key.toLowerCase();\n      if (this.isSignableHeader(key)) keys.push(key);\n    });\n    return keys.sort().join(';');\n  },\n\n  credentialString: function credentialString(datetime) {\n    return v4Credentials.createScope(\n      datetime.substr(0, 8),\n      this.request.region,\n      this.serviceName\n    );\n  },\n\n  hexEncodedHash: function hash(string) {\n    return AWS.util.crypto.sha256(string, 'hex');\n  },\n\n  hexEncodedBodyHash: function hexEncodedBodyHash() {\n    var request = this.request;\n    if (this.isPresigned() && this.serviceName === 's3' && !request.body) {\n      return 'UNSIGNED-PAYLOAD';\n    } else if (request.headers['X-Amz-Content-Sha256']) {\n      return request.headers['X-Amz-Content-Sha256'];\n    } else {\n      return this.hexEncodedHash(this.request.body || '');\n    }\n  },\n\n  unsignableHeaders: [\n    'authorization',\n    'content-type',\n    'content-length',\n    'user-agent',\n    expiresHeader,\n    'expect',\n    'x-amzn-trace-id'\n  ],\n\n  isSignableHeader: function isSignableHeader(key) {\n    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;\n    return this.unsignableHeaders.indexOf(key) < 0;\n  },\n\n  isPresigned: function isPresigned() {\n    return this.request.headers[expiresHeader] ? true : false;\n  }\n\n});\n\n/**\n * @api private\n */\nmodule.exports = AWS.Signers.V4;\n"]},"metadata":{},"sourceType":"script"}