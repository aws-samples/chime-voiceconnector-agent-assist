{"ast":null,"code":"var AWS = require('./core');\n/**\n * Represents your AWS security credentials, specifically the\n * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.\n * Creating a `Credentials` object allows you to pass around your\n * security information to configuration and service objects.\n *\n * Note that this class typically does not need to be constructed manually,\n * as the {AWS.Config} and {AWS.Service} classes both accept simple\n * options hashes with the three keys. These structures will be converted\n * into Credentials objects automatically.\n *\n * ## Expiring and Refreshing Credentials\n *\n * Occasionally credentials can expire in the middle of a long-running\n * application. In this case, the SDK will automatically attempt to\n * refresh the credentials from the storage location if the Credentials\n * class implements the {refresh} method.\n *\n * If you are implementing a credential storage location, you\n * will want to create a subclass of the `Credentials` class and\n * override the {refresh} method. This method allows credentials to be\n * retrieved from the backing store, be it a file system, database, or\n * some network storage. The method should reset the credential attributes\n * on the object.\n *\n * @!attribute expired\n *   @return [Boolean] whether the credentials have been expired and\n *     require a refresh. Used in conjunction with {expireTime}.\n * @!attribute expireTime\n *   @return [Date] a time when credentials should be considered expired. Used\n *     in conjunction with {expired}.\n * @!attribute accessKeyId\n *   @return [String] the AWS access key ID\n * @!attribute secretAccessKey\n *   @return [String] the AWS secret access key\n * @!attribute sessionToken\n *   @return [String] an optional AWS session token\n */\n\n\nAWS.Credentials = AWS.util.inherit({\n  /**\n   * A credentials object can be created using positional arguments or an options\n   * hash.\n   *\n   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)\n   *   Creates a Credentials object with a given set of credential information\n   *   as positional arguments.\n   *   @param accessKeyId [String] the AWS access key ID\n   *   @param secretAccessKey [String] the AWS secret access key\n   *   @param sessionToken [String] the optional AWS session token\n   *   @example Create a credentials object with AWS credentials\n   *     var creds = new AWS.Credentials('akid', 'secret', 'session');\n   * @overload AWS.Credentials(options)\n   *   Creates a Credentials object with a given set of credential information\n   *   as an options hash.\n   *   @option options accessKeyId [String] the AWS access key ID\n   *   @option options secretAccessKey [String] the AWS secret access key\n   *   @option options sessionToken [String] the optional AWS session token\n   *   @example Create a credentials object with AWS credentials\n   *     var creds = new AWS.Credentials({\n   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'\n   *     });\n   */\n  constructor: function Credentials() {\n    // hide secretAccessKey from being displayed with util.inspect\n    AWS.util.hideProperties(this, ['secretAccessKey']);\n    this.expired = false;\n    this.expireTime = null;\n    this.refreshCallbacks = [];\n\n    if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      var creds = arguments[0].credentials || arguments[0];\n      this.accessKeyId = creds.accessKeyId;\n      this.secretAccessKey = creds.secretAccessKey;\n      this.sessionToken = creds.sessionToken;\n    } else {\n      this.accessKeyId = arguments[0];\n      this.secretAccessKey = arguments[1];\n      this.sessionToken = arguments[2];\n    }\n  },\n\n  /**\n   * @return [Integer] the number of seconds before {expireTime} during which\n   *   the credentials will be considered expired.\n   */\n  expiryWindow: 15,\n\n  /**\n   * @return [Boolean] whether the credentials object should call {refresh}\n   * @note Subclasses should override this method to provide custom refresh\n   *   logic.\n   */\n  needsRefresh: function needsRefresh() {\n    var currentTime = AWS.util.date.getDate().getTime();\n    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);\n\n    if (this.expireTime && adjustedTime > this.expireTime) {\n      return true;\n    } else {\n      return this.expired || !this.accessKeyId || !this.secretAccessKey;\n    }\n  },\n\n  /**\n   * Gets the existing credentials, refreshing them if they are not yet loaded\n   * or have expired. Users should call this method before using {refresh},\n   * as this will not attempt to reload credentials when they are already\n   * loaded into the object.\n   *\n   * @callback callback function(err)\n   *   When this callback is called with no error, it means either credentials\n   *   do not need to be refreshed or refreshed credentials information has\n   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n   *   and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   */\n  get: function get(callback) {\n    var self = this;\n\n    if (this.needsRefresh()) {\n      this.refresh(function (err) {\n        if (!err) self.expired = false; // reset expired flag\n\n        if (callback) callback(err);\n      });\n    } else if (callback) {\n      callback();\n    }\n  },\n\n  /**\n   * @!method  getPromise()\n   *   Returns a 'thenable' promise.\n   *   Gets the existing credentials, refreshing them if they are not yet loaded\n   *   or have expired. Users should call this method before using {refresh},\n   *   as this will not attempt to reload credentials when they are already\n   *   loaded into the object.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function()\n   *     Called if the promise is fulfilled. When this callback is called, it\n   *     means either credentials do not need to be refreshed or refreshed\n   *     credentials information has been loaded into the object (as the\n   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `get` call.\n   *   @example Calling the `getPromise` method.\n   *     var promise = credProvider.getPromise();\n   *     promise.then(function() { ... }, function(err) { ... });\n   */\n\n  /**\n   * @!method  refreshPromise()\n   *   Returns a 'thenable' promise.\n   *   Refreshes the credentials. Users should call {get} before attempting\n   *   to forcibly refresh credentials.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function()\n   *     Called if the promise is fulfilled. When this callback is called, it\n   *     means refreshed credentials information has been loaded into the object\n   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Calling the `refreshPromise` method.\n   *     var promise = credProvider.refreshPromise();\n   *     promise.then(function() { ... }, function(err) { ... });\n   */\n\n  /**\n   * Refreshes the credentials. Users should call {get} before attempting\n   * to forcibly refresh credentials.\n   *\n   * @callback callback function(err)\n   *   When this callback is called with no error, it means refreshed\n   *   credentials information has been loaded into the object (as the\n   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @note Subclasses should override this class to reset the\n   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}\n   *   on the credentials object and then call the callback with\n   *   any error information.\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.expired = false;\n    callback();\n  },\n\n  /**\n   * @api private\n   * @param callback\n   */\n  coalesceRefresh: function coalesceRefresh(callback, sync) {\n    var self = this;\n\n    if (self.refreshCallbacks.push(callback) === 1) {\n      self.load(function onLoad(err) {\n        AWS.util.arrayEach(self.refreshCallbacks, function (callback) {\n          if (sync) {\n            callback(err);\n          } else {\n            // callback could throw, so defer to ensure all callbacks are notified\n            AWS.util.defer(function () {\n              callback(err);\n            });\n          }\n        });\n        self.refreshCallbacks.length = 0;\n      });\n    }\n  },\n\n  /**\n   * @api private\n   * @param callback\n   */\n  load: function load(callback) {\n    callback();\n  }\n});\n/**\n * @api private\n */\n\nAWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);\n  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);\n};\n/**\n * @api private\n */\n\n\nAWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getPromise;\n  delete this.prototype.refreshPromise;\n};\n\nAWS.util.addPromises(AWS.Credentials);","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/credentials.js"],"names":["AWS","require","Credentials","util","inherit","constructor","hideProperties","expired","expireTime","refreshCallbacks","arguments","length","creds","credentials","accessKeyId","secretAccessKey","sessionToken","expiryWindow","needsRefresh","currentTime","date","getDate","getTime","adjustedTime","Date","get","callback","self","refresh","err","coalesceRefresh","sync","push","load","onLoad","arrayEach","defer","addPromisesToClass","PromiseDependency","prototype","getPromise","promisifyMethod","refreshPromise","deletePromisesFromClass","addPromises"],"mappings":"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","sourcesContent":["var AWS = require('./core');\n\n/**\n * Represents your AWS security credentials, specifically the\n * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.\n * Creating a `Credentials` object allows you to pass around your\n * security information to configuration and service objects.\n *\n * Note that this class typically does not need to be constructed manually,\n * as the {AWS.Config} and {AWS.Service} classes both accept simple\n * options hashes with the three keys. These structures will be converted\n * into Credentials objects automatically.\n *\n * ## Expiring and Refreshing Credentials\n *\n * Occasionally credentials can expire in the middle of a long-running\n * application. In this case, the SDK will automatically attempt to\n * refresh the credentials from the storage location if the Credentials\n * class implements the {refresh} method.\n *\n * If you are implementing a credential storage location, you\n * will want to create a subclass of the `Credentials` class and\n * override the {refresh} method. This method allows credentials to be\n * retrieved from the backing store, be it a file system, database, or\n * some network storage. The method should reset the credential attributes\n * on the object.\n *\n * @!attribute expired\n *   @return [Boolean] whether the credentials have been expired and\n *     require a refresh. Used in conjunction with {expireTime}.\n * @!attribute expireTime\n *   @return [Date] a time when credentials should be considered expired. Used\n *     in conjunction with {expired}.\n * @!attribute accessKeyId\n *   @return [String] the AWS access key ID\n * @!attribute secretAccessKey\n *   @return [String] the AWS secret access key\n * @!attribute sessionToken\n *   @return [String] an optional AWS session token\n */\nAWS.Credentials = AWS.util.inherit({\n  /**\n   * A credentials object can be created using positional arguments or an options\n   * hash.\n   *\n   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)\n   *   Creates a Credentials object with a given set of credential information\n   *   as positional arguments.\n   *   @param accessKeyId [String] the AWS access key ID\n   *   @param secretAccessKey [String] the AWS secret access key\n   *   @param sessionToken [String] the optional AWS session token\n   *   @example Create a credentials object with AWS credentials\n   *     var creds = new AWS.Credentials('akid', 'secret', 'session');\n   * @overload AWS.Credentials(options)\n   *   Creates a Credentials object with a given set of credential information\n   *   as an options hash.\n   *   @option options accessKeyId [String] the AWS access key ID\n   *   @option options secretAccessKey [String] the AWS secret access key\n   *   @option options sessionToken [String] the optional AWS session token\n   *   @example Create a credentials object with AWS credentials\n   *     var creds = new AWS.Credentials({\n   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'\n   *     });\n   */\n  constructor: function Credentials() {\n    // hide secretAccessKey from being displayed with util.inspect\n    AWS.util.hideProperties(this, ['secretAccessKey']);\n\n    this.expired = false;\n    this.expireTime = null;\n    this.refreshCallbacks = [];\n    if (arguments.length === 1 && typeof arguments[0] === 'object') {\n      var creds = arguments[0].credentials || arguments[0];\n      this.accessKeyId = creds.accessKeyId;\n      this.secretAccessKey = creds.secretAccessKey;\n      this.sessionToken = creds.sessionToken;\n    } else {\n      this.accessKeyId = arguments[0];\n      this.secretAccessKey = arguments[1];\n      this.sessionToken = arguments[2];\n    }\n  },\n\n  /**\n   * @return [Integer] the number of seconds before {expireTime} during which\n   *   the credentials will be considered expired.\n   */\n  expiryWindow: 15,\n\n  /**\n   * @return [Boolean] whether the credentials object should call {refresh}\n   * @note Subclasses should override this method to provide custom refresh\n   *   logic.\n   */\n  needsRefresh: function needsRefresh() {\n    var currentTime = AWS.util.date.getDate().getTime();\n    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);\n\n    if (this.expireTime && adjustedTime > this.expireTime) {\n      return true;\n    } else {\n      return this.expired || !this.accessKeyId || !this.secretAccessKey;\n    }\n  },\n\n  /**\n   * Gets the existing credentials, refreshing them if they are not yet loaded\n   * or have expired. Users should call this method before using {refresh},\n   * as this will not attempt to reload credentials when they are already\n   * loaded into the object.\n   *\n   * @callback callback function(err)\n   *   When this callback is called with no error, it means either credentials\n   *   do not need to be refreshed or refreshed credentials information has\n   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,\n   *   and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   */\n  get: function get(callback) {\n    var self = this;\n    if (this.needsRefresh()) {\n      this.refresh(function(err) {\n        if (!err) self.expired = false; // reset expired flag\n        if (callback) callback(err);\n      });\n    } else if (callback) {\n      callback();\n    }\n  },\n\n  /**\n   * @!method  getPromise()\n   *   Returns a 'thenable' promise.\n   *   Gets the existing credentials, refreshing them if they are not yet loaded\n   *   or have expired. Users should call this method before using {refresh},\n   *   as this will not attempt to reload credentials when they are already\n   *   loaded into the object.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function()\n   *     Called if the promise is fulfilled. When this callback is called, it\n   *     means either credentials do not need to be refreshed or refreshed\n   *     credentials information has been loaded into the object (as the\n   *     `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `get` call.\n   *   @example Calling the `getPromise` method.\n   *     var promise = credProvider.getPromise();\n   *     promise.then(function() { ... }, function(err) { ... });\n   */\n\n  /**\n   * @!method  refreshPromise()\n   *   Returns a 'thenable' promise.\n   *   Refreshes the credentials. Users should call {get} before attempting\n   *   to forcibly refresh credentials.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @callback fulfilledCallback function()\n   *     Called if the promise is fulfilled. When this callback is called, it\n   *     means refreshed credentials information has been loaded into the object\n   *     (as the `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Calling the `refreshPromise` method.\n   *     var promise = credProvider.refreshPromise();\n   *     promise.then(function() { ... }, function(err) { ... });\n   */\n\n  /**\n   * Refreshes the credentials. Users should call {get} before attempting\n   * to forcibly refresh credentials.\n   *\n   * @callback callback function(err)\n   *   When this callback is called with no error, it means refreshed\n   *   credentials information has been loaded into the object (as the\n   *   `accessKeyId`, `secretAccessKey`, and `sessionToken` properties).\n   *   @param err [Error] if an error occurred, this value will be filled\n   * @note Subclasses should override this class to reset the\n   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}\n   *   on the credentials object and then call the callback with\n   *   any error information.\n   * @see get\n   */\n  refresh: function refresh(callback) {\n    this.expired = false;\n    callback();\n  },\n\n  /**\n   * @api private\n   * @param callback\n   */\n  coalesceRefresh: function coalesceRefresh(callback, sync) {\n    var self = this;\n    if (self.refreshCallbacks.push(callback) === 1) {\n      self.load(function onLoad(err) {\n        AWS.util.arrayEach(self.refreshCallbacks, function(callback) {\n          if (sync) {\n            callback(err);\n          } else {\n            // callback could throw, so defer to ensure all callbacks are notified\n            AWS.util.defer(function () {\n              callback(err);\n            });\n          }\n        });\n        self.refreshCallbacks.length = 0;\n      });\n    }\n  },\n\n  /**\n   * @api private\n   * @param callback\n   */\n  load: function load(callback) {\n    callback();\n  }\n});\n\n/**\n * @api private\n */\nAWS.Credentials.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getPromise = AWS.util.promisifyMethod('get', PromiseDependency);\n  this.prototype.refreshPromise = AWS.util.promisifyMethod('refresh', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.Credentials.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getPromise;\n  delete this.prototype.refreshPromise;\n};\n\nAWS.util.addPromises(AWS.Credentials);\n"]},"metadata":{},"sourceType":"script"}