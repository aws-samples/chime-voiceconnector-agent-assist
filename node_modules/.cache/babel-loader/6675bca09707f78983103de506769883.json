{"ast":null,"code":"var AWS = require('./core');\n\nvar Api = require('./model/api');\n\nvar regionConfig = require('./region_config');\n\nvar inherit = AWS.util.inherit;\nvar clientCount = 0;\n/**\n * The service class representing an AWS service.\n *\n * @class_abstract This class is an abstract class.\n *\n * @!attribute apiVersions\n *   @return [Array<String>] the list of API versions supported by this service.\n *   @readonly\n */\n\nAWS.Service = inherit({\n  /**\n   * Create a new service object with a configuration object\n   *\n   * @param config [map] a map of configuration options\n   */\n  constructor: function Service(config) {\n    if (!this.loadServiceClass) {\n      throw AWS.util.error(new Error(), 'Service must be constructed with `new\\' operator');\n    }\n\n    var ServiceClass = this.loadServiceClass(config || {});\n\n    if (ServiceClass) {\n      var originalConfig = AWS.util.copy(config);\n      var svc = new ServiceClass(config);\n      Object.defineProperty(svc, '_originalConfig', {\n        get: function get() {\n          return originalConfig;\n        },\n        enumerable: false,\n        configurable: true\n      });\n      svc._clientId = ++clientCount;\n      return svc;\n    }\n\n    this.initialize(config);\n  },\n\n  /**\n   * @api private\n   */\n  initialize: function initialize(config) {\n    var svcConfig = AWS.config[this.serviceIdentifier];\n    this.config = new AWS.Config(AWS.config);\n    if (svcConfig) this.config.update(svcConfig, true);\n    if (config) this.config.update(config, true);\n    this.validateService();\n    if (!this.config.endpoint) regionConfig.configureEndpoint(this);\n    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);\n    this.setEndpoint(this.config.endpoint); //enable attaching listeners to service client\n\n    AWS.SequentialExecutor.call(this);\n    AWS.Service.addDefaultMonitoringListeners(this);\n\n    if ((this.config.clientSideMonitoring || AWS.Service._clientSideMonitoring) && this.publisher) {\n      var publisher = this.publisher;\n      this.addNamedListener('PUBLISH_API_CALL', 'apiCall', function PUBLISH_API_CALL(event) {\n        process.nextTick(function () {\n          publisher.eventHandler(event);\n        });\n      });\n      this.addNamedListener('PUBLISH_API_ATTEMPT', 'apiCallAttempt', function PUBLISH_API_ATTEMPT(event) {\n        process.nextTick(function () {\n          publisher.eventHandler(event);\n        });\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {},\n\n  /**\n   * @api private\n   */\n  loadServiceClass: function loadServiceClass(serviceConfig) {\n    var config = serviceConfig;\n\n    if (!AWS.util.isEmpty(this.api)) {\n      return null;\n    } else if (config.apiConfig) {\n      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);\n    } else if (!this.constructor.services) {\n      return null;\n    } else {\n      config = new AWS.Config(AWS.config);\n      config.update(serviceConfig, true);\n      var version = config.apiVersions[this.constructor.serviceIdentifier];\n      version = version || config.apiVersion;\n      return this.getLatestServiceClass(version);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  getLatestServiceClass: function getLatestServiceClass(version) {\n    version = this.getLatestServiceVersion(version);\n\n    if (this.constructor.services[version] === null) {\n      AWS.Service.defineServiceApi(this.constructor, version);\n    }\n\n    return this.constructor.services[version];\n  },\n\n  /**\n   * @api private\n   */\n  getLatestServiceVersion: function getLatestServiceVersion(version) {\n    if (!this.constructor.services || this.constructor.services.length === 0) {\n      throw new Error('No services defined on ' + this.constructor.serviceIdentifier);\n    }\n\n    if (!version) {\n      version = 'latest';\n    } else if (AWS.util.isType(version, Date)) {\n      version = AWS.util.date.iso8601(version).split('T')[0];\n    }\n\n    if (Object.hasOwnProperty(this.constructor.services, version)) {\n      return version;\n    }\n\n    var keys = Object.keys(this.constructor.services).sort();\n    var selectedVersion = null;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      // versions that end in \"*\" are not available on disk and can be\n      // skipped, so do not choose these as selectedVersions\n      if (keys[i][keys[i].length - 1] !== '*') {\n        selectedVersion = keys[i];\n      }\n\n      if (keys[i].substr(0, 10) <= version) {\n        return selectedVersion;\n      }\n    }\n\n    throw new Error('Could not find ' + this.constructor.serviceIdentifier + ' API to satisfy version constraint `' + version + '\\'');\n  },\n\n  /**\n   * @api private\n   */\n  api: {},\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 3,\n\n  /**\n   * @api private\n   */\n  customizeRequests: function customizeRequests(callback) {\n    if (!callback) {\n      this.customRequestHandler = null;\n    } else if (typeof callback === 'function') {\n      this.customRequestHandler = callback;\n    } else {\n      throw new Error('Invalid callback type \\'' + typeof callback + '\\' provided in customizeRequests');\n    }\n  },\n\n  /**\n   * Calls an operation on a service with the given input parameters.\n   *\n   * @param operation [String] the name of the operation to call on the service.\n   * @param params [map] a map of input options for the operation\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  makeRequest: function makeRequest(operation, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = null;\n    }\n\n    params = params || {};\n\n    if (this.config.params) {\n      // copy only toplevel bound params\n      var rules = this.api.operations[operation];\n\n      if (rules) {\n        params = AWS.util.copy(params);\n        AWS.util.each(this.config.params, function (key, value) {\n          if (rules.input.members[key]) {\n            if (params[key] === undefined || params[key] === null) {\n              params[key] = value;\n            }\n          }\n        });\n      }\n    }\n\n    var request = new AWS.Request(this, operation, params);\n    this.addAllRequestListeners(request);\n    this.attachMonitoringEmitter(request);\n    if (callback) request.send(callback);\n    return request;\n  },\n\n  /**\n   * Calls an operation on a service with the given input parameters, without\n   * any authentication data. This method is useful for \"public\" API operations.\n   *\n   * @param operation [String] the name of the operation to call on the service.\n   * @param params [map] a map of input options for the operation\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    var request = this.makeRequest(operation, params).toUnauthenticated();\n    return callback ? request.send(callback) : request;\n  },\n\n  /**\n   * Waits for a given state\n   *\n   * @param state [String] the state on the service to wait for\n   * @param params [map] a map of parameters to pass with each request\n   * @option params $waiter [map] a map of configuration options for the waiter\n   * @option params $waiter.delay [Number] The number of seconds to wait between\n   *                                       requests\n   * @option params $waiter.maxAttempts [Number] The maximum number of requests\n   *                                             to send while waiting\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  waitFor: function waitFor(state, params, callback) {\n    var waiter = new AWS.ResourceWaiter(this, state);\n    return waiter.wait(params, callback);\n  },\n\n  /**\n   * @api private\n   */\n  addAllRequestListeners: function addAllRequestListeners(request) {\n    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(), AWS.EventListeners.CorePost];\n\n    for (var i = 0; i < list.length; i++) {\n      if (list[i]) request.addListeners(list[i]);\n    } // disable parameter validation\n\n\n    if (!this.config.paramValidation) {\n      request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n    }\n\n    if (this.config.logger) {\n      // add logging events\n      request.addListeners(AWS.EventListeners.Logger);\n    }\n\n    this.setupRequestListeners(request); // call prototype's customRequestHandler\n\n    if (typeof this.constructor.prototype.customRequestHandler === 'function') {\n      this.constructor.prototype.customRequestHandler(request);\n    } // call instance's customRequestHandler\n\n\n    if (Object.prototype.hasOwnProperty.call(this, 'customRequestHandler') && typeof this.customRequestHandler === 'function') {\n      this.customRequestHandler(request);\n    }\n  },\n\n  /**\n   * Event recording metrics for a whole API call.\n   * @returns {object} a subset of api call metrics\n   * @api private\n   */\n  apiCallEvent: function apiCallEvent(request) {\n    var api = request.service.api.operations[request.operation];\n    var monitoringEvent = {\n      Type: 'ApiCall',\n      Api: api ? api.name : request.operation,\n      Version: 1,\n      Service: request.service.api.serviceId || request.service.api.endpointPrefix,\n      Region: request.httpRequest.region,\n      MaxRetriesExceeded: 0,\n      UserAgent: request.httpRequest.getUserAgent()\n    };\n    var response = request.response;\n\n    if (response.httpResponse.statusCode) {\n      monitoringEvent.FinalHttpStatusCode = response.httpResponse.statusCode;\n    }\n\n    if (response.error) {\n      var error = response.error;\n      var statusCode = response.httpResponse.statusCode;\n\n      if (statusCode > 299) {\n        if (error.code) monitoringEvent.FinalAwsException = error.code;\n        if (error.message) monitoringEvent.FinalAwsExceptionMessage = error.message;\n      } else {\n        if (error.code || error.name) monitoringEvent.FinalSdkException = error.code || error.name;\n        if (error.message) monitoringEvent.FinalSdkExceptionMessage = error.message;\n      }\n    }\n\n    return monitoringEvent;\n  },\n\n  /**\n   * Event recording metrics for an API call attempt.\n   * @returns {object} a subset of api call attempt metrics\n   * @api private\n   */\n  apiAttemptEvent: function apiAttemptEvent(request) {\n    var api = request.service.api.operations[request.operation];\n    var monitoringEvent = {\n      Type: 'ApiCallAttempt',\n      Api: api ? api.name : request.operation,\n      Version: 1,\n      Service: request.service.api.serviceId || request.service.api.endpointPrefix,\n      Fqdn: request.httpRequest.endpoint.hostname,\n      UserAgent: request.httpRequest.getUserAgent()\n    };\n    var response = request.response;\n\n    if (response.httpResponse.statusCode) {\n      monitoringEvent.HttpStatusCode = response.httpResponse.statusCode;\n    }\n\n    if (!request._unAuthenticated && request.service.config.credentials && request.service.config.credentials.accessKeyId) {\n      monitoringEvent.AccessKey = request.service.config.credentials.accessKeyId;\n    }\n\n    if (!response.httpResponse.headers) return monitoringEvent;\n\n    if (request.httpRequest.headers['x-amz-security-token']) {\n      monitoringEvent.SessionToken = request.httpRequest.headers['x-amz-security-token'];\n    }\n\n    if (response.httpResponse.headers['x-amzn-requestid']) {\n      monitoringEvent.XAmznRequestId = response.httpResponse.headers['x-amzn-requestid'];\n    }\n\n    if (response.httpResponse.headers['x-amz-request-id']) {\n      monitoringEvent.XAmzRequestId = response.httpResponse.headers['x-amz-request-id'];\n    }\n\n    if (response.httpResponse.headers['x-amz-id-2']) {\n      monitoringEvent.XAmzId2 = response.httpResponse.headers['x-amz-id-2'];\n    }\n\n    return monitoringEvent;\n  },\n\n  /**\n   * Add metrics of failed request.\n   * @api private\n   */\n  attemptFailEvent: function attemptFailEvent(request) {\n    var monitoringEvent = this.apiAttemptEvent(request);\n    var response = request.response;\n    var error = response.error;\n\n    if (response.httpResponse.statusCode > 299) {\n      if (error.code) monitoringEvent.AwsException = error.code;\n      if (error.message) monitoringEvent.AwsExceptionMessage = error.message;\n    } else {\n      if (error.code || error.name) monitoringEvent.SdkException = error.code || error.name;\n      if (error.message) monitoringEvent.SdkExceptionMessage = error.message;\n    }\n\n    return monitoringEvent;\n  },\n\n  /**\n   * Attach listeners to request object to fetch metrics of each request\n   * and emit data object through \\'ApiCall\\' and \\'ApiCallAttempt\\' events.\n   * @api private\n   */\n  attachMonitoringEmitter: function attachMonitoringEmitter(request) {\n    var attemptTimestamp; //timestamp marking the beginning of a request attempt\n\n    var attemptStartRealTime; //Start time of request attempt. Used to calculating attemptLatency\n\n    var attemptLatency; //latency from request sent out to http response reaching SDK\n\n    var callStartRealTime; //Start time of API call. Used to calculating API call latency\n\n    var attemptCount = 0; //request.retryCount is not reliable here\n\n    var region; //region cache region for each attempt since it can be updated in plase (e.g. s3)\n\n    var callTimestamp; //timestamp when the request is created\n\n    var self = this;\n    var addToHead = true;\n    request.on('validate', function () {\n      callStartRealTime = AWS.util.realClock.now();\n      callTimestamp = Date.now();\n    }, addToHead);\n    request.on('sign', function () {\n      attemptStartRealTime = AWS.util.realClock.now();\n      attemptTimestamp = Date.now();\n      region = request.httpRequest.region;\n      attemptCount++;\n    }, addToHead);\n    request.on('validateResponse', function () {\n      attemptLatency = Math.round(AWS.util.realClock.now() - attemptStartRealTime);\n    });\n    request.addNamedListener('API_CALL_ATTEMPT', 'success', function API_CALL_ATTEMPT() {\n      var apiAttemptEvent = self.apiAttemptEvent(request);\n      apiAttemptEvent.Timestamp = attemptTimestamp;\n      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;\n      apiAttemptEvent.Region = region;\n      self.emit('apiCallAttempt', [apiAttemptEvent]);\n    });\n    request.addNamedListener('API_CALL_ATTEMPT_RETRY', 'retry', function API_CALL_ATTEMPT_RETRY() {\n      var apiAttemptEvent = self.attemptFailEvent(request);\n      apiAttemptEvent.Timestamp = attemptTimestamp; //attemptLatency may not be available if fail before response\n\n      attemptLatency = attemptLatency || Math.round(AWS.util.realClock.now() - attemptStartRealTime);\n      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;\n      apiAttemptEvent.Region = region;\n      self.emit('apiCallAttempt', [apiAttemptEvent]);\n    });\n    request.addNamedListener('API_CALL', 'complete', function API_CALL() {\n      var apiCallEvent = self.apiCallEvent(request);\n      apiCallEvent.AttemptCount = attemptCount;\n      if (apiCallEvent.AttemptCount <= 0) return;\n      apiCallEvent.Timestamp = callTimestamp;\n      var latency = Math.round(AWS.util.realClock.now() - callStartRealTime);\n      apiCallEvent.Latency = latency >= 0 ? latency : 0;\n      var response = request.response;\n\n      if (response.error && response.error.retryable && typeof response.retryCount === 'number' && typeof response.maxRetries === 'number' && response.retryCount >= response.maxRetries) {\n        apiCallEvent.MaxRetriesExceeded = 1;\n      }\n\n      self.emit('apiCall', [apiCallEvent]);\n    });\n  },\n\n  /**\n   * Override this method to setup any custom request listeners for each\n   * new request to the service.\n   *\n   * @method_abstract This is an abstract method.\n   */\n  setupRequestListeners: function setupRequestListeners(request) {},\n\n  /**\n   * Gets the signer class for a given request\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var version; // get operation authtype if present\n\n    var operation = null;\n    var authtype = '';\n\n    if (request) {\n      var operations = request.service.api.operations || {};\n      operation = operations[request.operation] || null;\n      authtype = operation ? operation.authtype : '';\n    }\n\n    if (this.config.signatureVersion) {\n      version = this.config.signatureVersion;\n    } else if (authtype === 'v4' || authtype === 'v4-unsigned-body') {\n      version = 'v4';\n    } else {\n      version = this.api.signatureVersion;\n    }\n\n    return AWS.Signers.RequestSigner.getVersion(version);\n  },\n\n  /**\n   * @api private\n   */\n  serviceInterface: function serviceInterface() {\n    switch (this.api.protocol) {\n      case 'ec2':\n        return AWS.EventListeners.Query;\n\n      case 'query':\n        return AWS.EventListeners.Query;\n\n      case 'json':\n        return AWS.EventListeners.Json;\n\n      case 'rest-json':\n        return AWS.EventListeners.RestJson;\n\n      case 'rest-xml':\n        return AWS.EventListeners.RestXml;\n    }\n\n    if (this.api.protocol) {\n      throw new Error('Invalid service `protocol\\' ' + this.api.protocol + ' in API config');\n    }\n  },\n\n  /**\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    return resp.httpResponse.statusCode < 300;\n  },\n\n  /**\n   * How many times a failed request should be retried before giving up.\n   * the defaultRetryCount can be overriden by service classes.\n   *\n   * @api private\n   */\n  numRetries: function numRetries() {\n    if (this.config.maxRetries !== undefined) {\n      return this.config.maxRetries;\n    } else {\n      return this.defaultRetryCount;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays(retryCount, err) {\n    return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions, err);\n  },\n\n  /**\n   * @api private\n   */\n  retryableError: function retryableError(error) {\n    if (this.timeoutError(error)) return true;\n    if (this.networkingError(error)) return true;\n    if (this.expiredCredentialsError(error)) return true;\n    if (this.throttledError(error)) return true;\n    if (error.statusCode >= 500) return true;\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  networkingError: function networkingError(error) {\n    return error.code === 'NetworkingError';\n  },\n\n  /**\n   * @api private\n   */\n  timeoutError: function timeoutError(error) {\n    return error.code === 'TimeoutError';\n  },\n\n  /**\n   * @api private\n   */\n  expiredCredentialsError: function expiredCredentialsError(error) {\n    // TODO : this only handles *one* of the expired credential codes\n    return error.code === 'ExpiredTokenException';\n  },\n\n  /**\n   * @api private\n   */\n  clockSkewError: function clockSkewError(error) {\n    switch (error.code) {\n      case 'RequestTimeTooSkewed':\n      case 'RequestExpired':\n      case 'InvalidSignatureException':\n      case 'SignatureDoesNotMatch':\n      case 'AuthFailure':\n      case 'RequestInTheFuture':\n        return true;\n\n      default:\n        return false;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  getSkewCorrectedDate: function getSkewCorrectedDate() {\n    return new Date(Date.now() + this.config.systemClockOffset);\n  },\n\n  /**\n   * @api private\n   */\n  applyClockOffset: function applyClockOffset(newServerTime) {\n    if (newServerTime) {\n      this.config.systemClockOffset = newServerTime - Date.now();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isClockSkewed: function isClockSkewed(newServerTime) {\n    if (newServerTime) {\n      return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 300000;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throttledError: function throttledError(error) {\n    // this logic varies between services\n    if (error.statusCode === 429) return true;\n\n    switch (error.code) {\n      case 'ProvisionedThroughputExceededException':\n      case 'Throttling':\n      case 'ThrottlingException':\n      case 'RequestLimitExceeded':\n      case 'RequestThrottled':\n      case 'RequestThrottledException':\n      case 'TooManyRequestsException':\n      case 'TransactionInProgressException': //dynamodb\n\n      case 'EC2ThrottledException':\n        return true;\n\n      default:\n        return false;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  endpointFromTemplate: function endpointFromTemplate(endpoint) {\n    if (typeof endpoint !== 'string') return endpoint;\n    var e = endpoint;\n    e = e.replace(/\\{service\\}/g, this.api.endpointPrefix);\n    e = e.replace(/\\{region\\}/g, this.config.region);\n    e = e.replace(/\\{scheme\\}/g, this.config.sslEnabled ? 'https' : 'http');\n    return e;\n  },\n\n  /**\n   * @api private\n   */\n  setEndpoint: function setEndpoint(endpoint) {\n    this.endpoint = new AWS.Endpoint(endpoint, this.config);\n  },\n\n  /**\n   * @api private\n   */\n  paginationConfig: function paginationConfig(operation, throwException) {\n    var paginator = this.api.operations[operation].paginator;\n\n    if (!paginator) {\n      if (throwException) {\n        var e = new Error();\n        throw AWS.util.error(e, 'No pagination configuration for ' + operation);\n      }\n\n      return null;\n    }\n\n    return paginator;\n  }\n});\nAWS.util.update(AWS.Service, {\n  /**\n   * Adds one method for each operation described in the api configuration\n   *\n   * @api private\n   */\n  defineMethods: function defineMethods(svc) {\n    AWS.util.each(svc.prototype.api.operations, function iterator(method) {\n      if (svc.prototype[method]) return;\n      var operation = svc.prototype.api.operations[method];\n\n      if (operation.authtype === 'none') {\n        svc.prototype[method] = function (params, callback) {\n          return this.makeUnauthenticatedRequest(method, params, callback);\n        };\n      } else {\n        svc.prototype[method] = function (params, callback) {\n          return this.makeRequest(method, params, callback);\n        };\n      }\n    });\n  },\n\n  /**\n   * Defines a new Service class using a service identifier and list of versions\n   * including an optional set of features (functions) to apply to the class\n   * prototype.\n   *\n   * @param serviceIdentifier [String] the identifier for the service\n   * @param versions [Array<String>] a list of versions that work with this\n   *   service\n   * @param features [Object] an object to attach to the prototype\n   * @return [Class<Service>] the service class defined by this function.\n   */\n  defineService: function defineService(serviceIdentifier, versions, features) {\n    AWS.Service._serviceMap[serviceIdentifier] = true;\n\n    if (!Array.isArray(versions)) {\n      features = versions;\n      versions = [];\n    }\n\n    var svc = inherit(AWS.Service, features || {});\n\n    if (typeof serviceIdentifier === 'string') {\n      AWS.Service.addVersions(svc, versions);\n      var identifier = svc.serviceIdentifier || serviceIdentifier;\n      svc.serviceIdentifier = identifier;\n    } else {\n      // defineService called with an API\n      svc.prototype.api = serviceIdentifier;\n      AWS.Service.defineMethods(svc);\n    }\n\n    AWS.SequentialExecutor.call(this.prototype); //util.clientSideMonitoring is only available in node\n\n    if (!this.prototype.publisher && AWS.util.clientSideMonitoring) {\n      var Publisher = AWS.util.clientSideMonitoring.Publisher;\n      var configProvider = AWS.util.clientSideMonitoring.configProvider;\n      var publisherConfig = configProvider();\n      this.prototype.publisher = new Publisher(publisherConfig);\n\n      if (publisherConfig.enabled) {\n        //if csm is enabled in environment, SDK should send all metrics\n        AWS.Service._clientSideMonitoring = true;\n      }\n    }\n\n    AWS.SequentialExecutor.call(svc.prototype);\n    AWS.Service.addDefaultMonitoringListeners(svc.prototype);\n    return svc;\n  },\n\n  /**\n   * @api private\n   */\n  addVersions: function addVersions(svc, versions) {\n    if (!Array.isArray(versions)) versions = [versions];\n    svc.services = svc.services || {};\n\n    for (var i = 0; i < versions.length; i++) {\n      if (svc.services[versions[i]] === undefined) {\n        svc.services[versions[i]] = null;\n      }\n    }\n\n    svc.apiVersions = Object.keys(svc.services).sort();\n  },\n\n  /**\n   * @api private\n   */\n  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {\n    var svc = inherit(superclass, {\n      serviceIdentifier: superclass.serviceIdentifier\n    });\n\n    function setApi(api) {\n      if (api.isApi) {\n        svc.prototype.api = api;\n      } else {\n        svc.prototype.api = new Api(api, {\n          serviceIdentifier: superclass.serviceIdentifier\n        });\n      }\n    }\n\n    if (typeof version === 'string') {\n      if (apiConfig) {\n        setApi(apiConfig);\n      } else {\n        try {\n          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));\n        } catch (err) {\n          throw AWS.util.error(err, {\n            message: 'Could not find API configuration ' + superclass.serviceIdentifier + '-' + version\n          });\n        }\n      }\n\n      if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {\n        superclass.apiVersions = superclass.apiVersions.concat(version).sort();\n      }\n\n      superclass.services[version] = svc;\n    } else {\n      setApi(version);\n    }\n\n    AWS.Service.defineMethods(svc);\n    return svc;\n  },\n\n  /**\n   * @api private\n   */\n  hasService: function hasService(identifier) {\n    return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);\n  },\n\n  /**\n   * @param attachOn attach default monitoring listeners to object\n   *\n   * Each monitoring event should be emitted from service client to service constructor prototype and then\n   * to global service prototype like bubbling up. These default monitoring events listener will transfer\n   * the monitoring events to the upper layer.\n   * @api private\n   */\n  addDefaultMonitoringListeners: function addDefaultMonitoringListeners(attachOn) {\n    attachOn.addNamedListener('MONITOR_EVENTS_BUBBLE', 'apiCallAttempt', function EVENTS_BUBBLE(event) {\n      var baseClass = Object.getPrototypeOf(attachOn);\n      if (baseClass._events) baseClass.emit('apiCallAttempt', [event]);\n    });\n    attachOn.addNamedListener('CALL_EVENTS_BUBBLE', 'apiCall', function CALL_EVENTS_BUBBLE(event) {\n      var baseClass = Object.getPrototypeOf(attachOn);\n      if (baseClass._events) baseClass.emit('apiCall', [event]);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  _serviceMap: {}\n});\nAWS.util.mixin(AWS.Service, AWS.SequentialExecutor);\n/**\n * @api private\n */\n\nmodule.exports = AWS.Service;","map":{"version":3,"sources":["/home/ec2-user/chime-voiceconnector-agent-assist/node_modules/aws-sdk/lib/service.js"],"names":["AWS","require","Api","regionConfig","inherit","util","clientCount","Service","constructor","config","loadServiceClass","error","Error","ServiceClass","originalConfig","copy","svc","Object","defineProperty","get","enumerable","configurable","_clientId","initialize","svcConfig","serviceIdentifier","Config","update","validateService","endpoint","configureEndpoint","endpointFromTemplate","setEndpoint","SequentialExecutor","call","addDefaultMonitoringListeners","clientSideMonitoring","_clientSideMonitoring","publisher","addNamedListener","PUBLISH_API_CALL","event","process","nextTick","eventHandler","PUBLISH_API_ATTEMPT","serviceConfig","isEmpty","api","apiConfig","defineServiceApi","services","version","apiVersions","apiVersion","getLatestServiceClass","getLatestServiceVersion","length","isType","Date","date","iso8601","split","hasOwnProperty","keys","sort","selectedVersion","i","substr","defaultRetryCount","customizeRequests","callback","customRequestHandler","makeRequest","operation","params","rules","operations","each","key","value","input","members","undefined","request","Request","addAllRequestListeners","attachMonitoringEmitter","send","makeUnauthenticatedRequest","toUnauthenticated","waitFor","state","waiter","ResourceWaiter","wait","list","events","EventListeners","Core","serviceInterface","CorePost","addListeners","paramValidation","removeListener","VALIDATE_PARAMETERS","logger","Logger","setupRequestListeners","prototype","apiCallEvent","service","monitoringEvent","Type","name","Version","serviceId","endpointPrefix","Region","httpRequest","region","MaxRetriesExceeded","UserAgent","getUserAgent","response","httpResponse","statusCode","FinalHttpStatusCode","code","FinalAwsException","message","FinalAwsExceptionMessage","FinalSdkException","FinalSdkExceptionMessage","apiAttemptEvent","Fqdn","hostname","HttpStatusCode","_unAuthenticated","credentials","accessKeyId","AccessKey","headers","SessionToken","XAmznRequestId","XAmzRequestId","XAmzId2","attemptFailEvent","AwsException","AwsExceptionMessage","SdkException","SdkExceptionMessage","attemptTimestamp","attemptStartRealTime","attemptLatency","callStartRealTime","attemptCount","callTimestamp","self","addToHead","on","realClock","now","Math","round","API_CALL_ATTEMPT","Timestamp","AttemptLatency","emit","API_CALL_ATTEMPT_RETRY","API_CALL","AttemptCount","latency","Latency","retryable","retryCount","maxRetries","getSignerClass","authtype","signatureVersion","Signers","RequestSigner","getVersion","protocol","Query","Json","RestJson","RestXml","successfulResponse","resp","numRetries","retryDelays","err","calculateRetryDelay","retryDelayOptions","retryableError","timeoutError","networkingError","expiredCredentialsError","throttledError","clockSkewError","getSkewCorrectedDate","systemClockOffset","applyClockOffset","newServerTime","isClockSkewed","abs","getTime","e","replace","sslEnabled","Endpoint","paginationConfig","throwException","paginator","defineMethods","iterator","method","defineService","versions","features","_serviceMap","Array","isArray","addVersions","identifier","Publisher","configProvider","publisherConfig","enabled","superclass","setApi","isApi","apiLoader","concat","hasService","attachOn","EVENTS_BUBBLE","baseClass","getPrototypeOf","_events","CALL_EVENTS_BUBBLE","mixin","module","exports"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAIC,GAAG,GAAGD,OAAO,CAAC,aAAD,CAAjB;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,iBAAD,CAA1B;;AAEA,IAAIG,OAAO,GAAGJ,GAAG,CAACK,IAAJ,CAASD,OAAvB;AACA,IAAIE,WAAW,GAAG,CAAlB;AAEA;;;;;;;;;;AASAN,GAAG,CAACO,OAAJ,GAAcH,OAAO,CAAC;AACpB;;;;;AAKAI,EAAAA,WAAW,EAAE,SAASD,OAAT,CAAiBE,MAAjB,EAAyB;AACpC,QAAI,CAAC,KAAKC,gBAAV,EAA4B;AAC1B,YAAMV,GAAG,CAACK,IAAJ,CAASM,KAAT,CAAe,IAAIC,KAAJ,EAAf,EACJ,kDADI,CAAN;AAED;;AACD,QAAIC,YAAY,GAAG,KAAKH,gBAAL,CAAsBD,MAAM,IAAI,EAAhC,CAAnB;;AACA,QAAII,YAAJ,EAAkB;AAChB,UAAIC,cAAc,GAAGd,GAAG,CAACK,IAAJ,CAASU,IAAT,CAAcN,MAAd,CAArB;AACA,UAAIO,GAAG,GAAG,IAAIH,YAAJ,CAAiBJ,MAAjB,CAAV;AACAQ,MAAAA,MAAM,CAACC,cAAP,CAAsBF,GAAtB,EAA2B,iBAA3B,EAA8C;AAC5CG,QAAAA,GAAG,EAAE,eAAW;AAAE,iBAAOL,cAAP;AAAwB,SADE;AAE5CM,QAAAA,UAAU,EAAE,KAFgC;AAG5CC,QAAAA,YAAY,EAAE;AAH8B,OAA9C;AAKAL,MAAAA,GAAG,CAACM,SAAJ,GAAgB,EAAEhB,WAAlB;AACA,aAAOU,GAAP;AACD;;AACD,SAAKO,UAAL,CAAgBd,MAAhB;AACD,GAxBmB;;AA0BpB;;;AAGAc,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBd,MAApB,EAA4B;AACtC,QAAIe,SAAS,GAAGxB,GAAG,CAACS,MAAJ,CAAW,KAAKgB,iBAAhB,CAAhB;AACA,SAAKhB,MAAL,GAAc,IAAIT,GAAG,CAAC0B,MAAR,CAAe1B,GAAG,CAACS,MAAnB,CAAd;AACA,QAAIe,SAAJ,EAAe,KAAKf,MAAL,CAAYkB,MAAZ,CAAmBH,SAAnB,EAA8B,IAA9B;AACf,QAAIf,MAAJ,EAAY,KAAKA,MAAL,CAAYkB,MAAZ,CAAmBlB,MAAnB,EAA2B,IAA3B;AAEZ,SAAKmB,eAAL;AACA,QAAI,CAAC,KAAKnB,MAAL,CAAYoB,QAAjB,EAA2B1B,YAAY,CAAC2B,iBAAb,CAA+B,IAA/B;AAE3B,SAAKrB,MAAL,CAAYoB,QAAZ,GAAuB,KAAKE,oBAAL,CAA0B,KAAKtB,MAAL,CAAYoB,QAAtC,CAAvB;AACA,SAAKG,WAAL,CAAiB,KAAKvB,MAAL,CAAYoB,QAA7B,EAVsC,CAWtC;;AACA7B,IAAAA,GAAG,CAACiC,kBAAJ,CAAuBC,IAAvB,CAA4B,IAA5B;AACAlC,IAAAA,GAAG,CAACO,OAAJ,CAAY4B,6BAAZ,CAA0C,IAA1C;;AACA,QAAI,CAAC,KAAK1B,MAAL,CAAY2B,oBAAZ,IAAoCpC,GAAG,CAACO,OAAJ,CAAY8B,qBAAjD,KAA2E,KAAKC,SAApF,EAA+F;AAC7F,UAAIA,SAAS,GAAG,KAAKA,SAArB;AACA,WAAKC,gBAAL,CAAsB,kBAAtB,EAA0C,SAA1C,EAAqD,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AACpFC,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAACL,UAAAA,SAAS,CAACM,YAAV,CAAuBH,KAAvB;AAA+B,SAA5D;AACD,OAFD;AAGA,WAAKF,gBAAL,CAAsB,qBAAtB,EAA6C,gBAA7C,EAA+D,SAASM,mBAAT,CAA6BJ,KAA7B,EAAoC;AACjGC,QAAAA,OAAO,CAACC,QAAR,CAAiB,YAAW;AAACL,UAAAA,SAAS,CAACM,YAAV,CAAuBH,KAAvB;AAA+B,SAA5D;AACD,OAFD;AAGD;AACF,GApDmB;;AAsDpB;;;AAGAb,EAAAA,eAAe,EAAE,SAASA,eAAT,GAA2B,CAC3C,CA1DmB;;AA4DpB;;;AAGAlB,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BoC,aAA1B,EAAyC;AACzD,QAAIrC,MAAM,GAAGqC,aAAb;;AACA,QAAI,CAAC9C,GAAG,CAACK,IAAJ,CAAS0C,OAAT,CAAiB,KAAKC,GAAtB,CAAL,EAAiC;AAC/B,aAAO,IAAP;AACD,KAFD,MAEO,IAAIvC,MAAM,CAACwC,SAAX,EAAsB;AAC3B,aAAOjD,GAAG,CAACO,OAAJ,CAAY2C,gBAAZ,CAA6B,KAAK1C,WAAlC,EAA+CC,MAAM,CAACwC,SAAtD,CAAP;AACD,KAFM,MAEA,IAAI,CAAC,KAAKzC,WAAL,CAAiB2C,QAAtB,EAAgC;AACrC,aAAO,IAAP;AACD,KAFM,MAEA;AACL1C,MAAAA,MAAM,GAAG,IAAIT,GAAG,CAAC0B,MAAR,CAAe1B,GAAG,CAACS,MAAnB,CAAT;AACAA,MAAAA,MAAM,CAACkB,MAAP,CAAcmB,aAAd,EAA6B,IAA7B;AACA,UAAIM,OAAO,GAAG3C,MAAM,CAAC4C,WAAP,CAAmB,KAAK7C,WAAL,CAAiBiB,iBAApC,CAAd;AACA2B,MAAAA,OAAO,GAAGA,OAAO,IAAI3C,MAAM,CAAC6C,UAA5B;AACA,aAAO,KAAKC,qBAAL,CAA2BH,OAA3B,CAAP;AACD;AACF,GA9EmB;;AAgFpB;;;AAGAG,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BH,OAA/B,EAAwC;AAC7DA,IAAAA,OAAO,GAAG,KAAKI,uBAAL,CAA6BJ,OAA7B,CAAV;;AACA,QAAI,KAAK5C,WAAL,CAAiB2C,QAAjB,CAA0BC,OAA1B,MAAuC,IAA3C,EAAiD;AAC/CpD,MAAAA,GAAG,CAACO,OAAJ,CAAY2C,gBAAZ,CAA6B,KAAK1C,WAAlC,EAA+C4C,OAA/C;AACD;;AAED,WAAO,KAAK5C,WAAL,CAAiB2C,QAAjB,CAA0BC,OAA1B,CAAP;AACD,GA1FmB;;AA4FpB;;;AAGAI,EAAAA,uBAAuB,EAAE,SAASA,uBAAT,CAAiCJ,OAAjC,EAA0C;AACjE,QAAI,CAAC,KAAK5C,WAAL,CAAiB2C,QAAlB,IAA8B,KAAK3C,WAAL,CAAiB2C,QAAjB,CAA0BM,MAA1B,KAAqC,CAAvE,EAA0E;AACxE,YAAM,IAAI7C,KAAJ,CAAU,4BACA,KAAKJ,WAAL,CAAiBiB,iBAD3B,CAAN;AAED;;AAED,QAAI,CAAC2B,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,QAAV;AACD,KAFD,MAEO,IAAIpD,GAAG,CAACK,IAAJ,CAASqD,MAAT,CAAgBN,OAAhB,EAAyBO,IAAzB,CAAJ,EAAoC;AACzCP,MAAAA,OAAO,GAAGpD,GAAG,CAACK,IAAJ,CAASuD,IAAT,CAAcC,OAAd,CAAsBT,OAAtB,EAA+BU,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAV;AACD;;AAED,QAAI7C,MAAM,CAAC8C,cAAP,CAAsB,KAAKvD,WAAL,CAAiB2C,QAAvC,EAAiDC,OAAjD,CAAJ,EAA+D;AAC7D,aAAOA,OAAP;AACD;;AAED,QAAIY,IAAI,GAAG/C,MAAM,CAAC+C,IAAP,CAAY,KAAKxD,WAAL,CAAiB2C,QAA7B,EAAuCc,IAAvC,EAAX;AACA,QAAIC,eAAe,GAAG,IAAtB;;AACA,SAAK,IAAIC,CAAC,GAAGH,IAAI,CAACP,MAAL,GAAc,CAA3B,EAA8BU,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC;AACA;AACA,UAAIH,IAAI,CAACG,CAAD,CAAJ,CAAQH,IAAI,CAACG,CAAD,CAAJ,CAAQV,MAAR,GAAiB,CAAzB,MAAgC,GAApC,EAAyC;AACvCS,QAAAA,eAAe,GAAGF,IAAI,CAACG,CAAD,CAAtB;AACD;;AACD,UAAIH,IAAI,CAACG,CAAD,CAAJ,CAAQC,MAAR,CAAe,CAAf,EAAkB,EAAlB,KAAyBhB,OAA7B,EAAsC;AACpC,eAAOc,eAAP;AACD;AACF;;AAED,UAAM,IAAItD,KAAJ,CAAU,oBAAoB,KAAKJ,WAAL,CAAiBiB,iBAArC,GACA,sCADA,GACyC2B,OADzC,GACmD,IAD7D,CAAN;AAED,GA9HmB;;AAgIpB;;;AAGAJ,EAAAA,GAAG,EAAE,EAnIe;;AAqIpB;;;AAGAqB,EAAAA,iBAAiB,EAAE,CAxIC;;AA0IpB;;;AAGAC,EAAAA,iBAAiB,EAAE,SAASA,iBAAT,CAA2BC,QAA3B,EAAqC;AACtD,QAAI,CAACA,QAAL,EAAe;AACb,WAAKC,oBAAL,GAA4B,IAA5B;AACD,KAFD,MAEO,IAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AACzC,WAAKC,oBAAL,GAA4BD,QAA5B;AACD,KAFM,MAEA;AACL,YAAM,IAAI3D,KAAJ,CAAU,6BAA6B,OAAO2D,QAApC,GAA+C,kCAAzD,CAAN;AACD;AACF,GArJmB;;AAuJpB;;;;;;;;;;;;;AAaAE,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBC,SAArB,EAAgCC,MAAhC,EAAwCJ,QAAxC,EAAkD;AAC7D,QAAI,OAAOI,MAAP,KAAkB,UAAtB,EAAkC;AAChCJ,MAAAA,QAAQ,GAAGI,MAAX;AACAA,MAAAA,MAAM,GAAG,IAAT;AACD;;AAEDA,IAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,QAAI,KAAKlE,MAAL,CAAYkE,MAAhB,EAAwB;AAAE;AACxB,UAAIC,KAAK,GAAG,KAAK5B,GAAL,CAAS6B,UAAT,CAAoBH,SAApB,CAAZ;;AACA,UAAIE,KAAJ,EAAW;AACTD,QAAAA,MAAM,GAAG3E,GAAG,CAACK,IAAJ,CAASU,IAAT,CAAc4D,MAAd,CAAT;AACA3E,QAAAA,GAAG,CAACK,IAAJ,CAASyE,IAAT,CAAc,KAAKrE,MAAL,CAAYkE,MAA1B,EAAkC,UAASI,GAAT,EAAcC,KAAd,EAAqB;AACrD,cAAIJ,KAAK,CAACK,KAAN,CAAYC,OAAZ,CAAoBH,GAApB,CAAJ,EAA8B;AAC5B,gBAAIJ,MAAM,CAACI,GAAD,CAAN,KAAgBI,SAAhB,IAA6BR,MAAM,CAACI,GAAD,CAAN,KAAgB,IAAjD,EAAuD;AACrDJ,cAAAA,MAAM,CAACI,GAAD,CAAN,GAAcC,KAAd;AACD;AACF;AACF,SAND;AAOD;AACF;;AAED,QAAII,OAAO,GAAG,IAAIpF,GAAG,CAACqF,OAAR,CAAgB,IAAhB,EAAsBX,SAAtB,EAAiCC,MAAjC,CAAd;AACA,SAAKW,sBAAL,CAA4BF,OAA5B;AACA,SAAKG,uBAAL,CAA6BH,OAA7B;AACA,QAAIb,QAAJ,EAAca,OAAO,CAACI,IAAR,CAAajB,QAAb;AACd,WAAOa,OAAP;AACD,GA9LmB;;AAgMpB;;;;;;;;;;;;;;AAcAK,EAAAA,0BAA0B,EAAE,SAASA,0BAAT,CAAoCf,SAApC,EAA+CC,MAA/C,EAAuDJ,QAAvD,EAAiE;AAC3F,QAAI,OAAOI,MAAP,KAAkB,UAAtB,EAAkC;AAChCJ,MAAAA,QAAQ,GAAGI,MAAX;AACAA,MAAAA,MAAM,GAAG,EAAT;AACD;;AAED,QAAIS,OAAO,GAAG,KAAKX,WAAL,CAAiBC,SAAjB,EAA4BC,MAA5B,EAAoCe,iBAApC,EAAd;AACA,WAAOnB,QAAQ,GAAGa,OAAO,CAACI,IAAR,CAAajB,QAAb,CAAH,GAA4Ba,OAA3C;AACD,GAtNmB;;AAwNpB;;;;;;;;;;;;;;;;;;AAkBAO,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,KAAjB,EAAwBjB,MAAxB,EAAgCJ,QAAhC,EAA0C;AACjD,QAAIsB,MAAM,GAAG,IAAI7F,GAAG,CAAC8F,cAAR,CAAuB,IAAvB,EAA6BF,KAA7B,CAAb;AACA,WAAOC,MAAM,CAACE,IAAP,CAAYpB,MAAZ,EAAoBJ,QAApB,CAAP;AACD,GA7OmB;;AA+OpB;;;AAGAe,EAAAA,sBAAsB,EAAE,SAASA,sBAAT,CAAgCF,OAAhC,EAAyC;AAC/D,QAAIY,IAAI,GAAG,CAAChG,GAAG,CAACiG,MAAL,EAAajG,GAAG,CAACkG,cAAJ,CAAmBC,IAAhC,EAAsC,KAAKC,gBAAL,EAAtC,EACCpG,GAAG,CAACkG,cAAJ,CAAmBG,QADpB,CAAX;;AAEA,SAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,IAAI,CAACvC,MAAzB,EAAiCU,CAAC,EAAlC,EAAsC;AACpC,UAAI6B,IAAI,CAAC7B,CAAD,CAAR,EAAaiB,OAAO,CAACkB,YAAR,CAAqBN,IAAI,CAAC7B,CAAD,CAAzB;AACd,KAL8D,CAO/D;;;AACA,QAAI,CAAC,KAAK1D,MAAL,CAAY8F,eAAjB,EAAkC;AAChCnB,MAAAA,OAAO,CAACoB,cAAR,CAAuB,UAAvB,EACExG,GAAG,CAACkG,cAAJ,CAAmBC,IAAnB,CAAwBM,mBAD1B;AAED;;AAED,QAAI,KAAKhG,MAAL,CAAYiG,MAAhB,EAAwB;AAAE;AACxBtB,MAAAA,OAAO,CAACkB,YAAR,CAAqBtG,GAAG,CAACkG,cAAJ,CAAmBS,MAAxC;AACD;;AAED,SAAKC,qBAAL,CAA2BxB,OAA3B,EAjB+D,CAkB/D;;AACA,QAAI,OAAO,KAAK5E,WAAL,CAAiBqG,SAAjB,CAA2BrC,oBAAlC,KAA2D,UAA/D,EAA2E;AACzE,WAAKhE,WAAL,CAAiBqG,SAAjB,CAA2BrC,oBAA3B,CAAgDY,OAAhD;AACD,KArB8D,CAsB/D;;;AACA,QAAInE,MAAM,CAAC4F,SAAP,CAAiB9C,cAAjB,CAAgC7B,IAAhC,CAAqC,IAArC,EAA2C,sBAA3C,KAAsE,OAAO,KAAKsC,oBAAZ,KAAqC,UAA/G,EAA2H;AACzH,WAAKA,oBAAL,CAA0BY,OAA1B;AACD;AACF,GA5QmB;;AA8QpB;;;;;AAKA0B,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsB1B,OAAtB,EAA+B;AAC3C,QAAIpC,GAAG,GAAGoC,OAAO,CAAC2B,OAAR,CAAgB/D,GAAhB,CAAoB6B,UAApB,CAA+BO,OAAO,CAACV,SAAvC,CAAV;AACA,QAAIsC,eAAe,GAAG;AACpBC,MAAAA,IAAI,EAAE,SADc;AAEpB/G,MAAAA,GAAG,EAAE8C,GAAG,GAAGA,GAAG,CAACkE,IAAP,GAAc9B,OAAO,CAACV,SAFV;AAGpByC,MAAAA,OAAO,EAAE,CAHW;AAIpB5G,MAAAA,OAAO,EAAE6E,OAAO,CAAC2B,OAAR,CAAgB/D,GAAhB,CAAoBoE,SAApB,IAAiChC,OAAO,CAAC2B,OAAR,CAAgB/D,GAAhB,CAAoBqE,cAJ1C;AAKpBC,MAAAA,MAAM,EAAElC,OAAO,CAACmC,WAAR,CAAoBC,MALR;AAMpBC,MAAAA,kBAAkB,EAAE,CANA;AAOpBC,MAAAA,SAAS,EAAEtC,OAAO,CAACmC,WAAR,CAAoBI,YAApB;AAPS,KAAtB;AASA,QAAIC,QAAQ,GAAGxC,OAAO,CAACwC,QAAvB;;AACA,QAAIA,QAAQ,CAACC,YAAT,CAAsBC,UAA1B,EAAsC;AACpCd,MAAAA,eAAe,CAACe,mBAAhB,GAAsCH,QAAQ,CAACC,YAAT,CAAsBC,UAA5D;AACD;;AACD,QAAIF,QAAQ,CAACjH,KAAb,EAAoB;AAClB,UAAIA,KAAK,GAAGiH,QAAQ,CAACjH,KAArB;AACA,UAAImH,UAAU,GAAGF,QAAQ,CAACC,YAAT,CAAsBC,UAAvC;;AACA,UAAIA,UAAU,GAAG,GAAjB,EAAsB;AACpB,YAAInH,KAAK,CAACqH,IAAV,EAAgBhB,eAAe,CAACiB,iBAAhB,GAAoCtH,KAAK,CAACqH,IAA1C;AAChB,YAAIrH,KAAK,CAACuH,OAAV,EAAmBlB,eAAe,CAACmB,wBAAhB,GAA2CxH,KAAK,CAACuH,OAAjD;AACpB,OAHD,MAGO;AACL,YAAIvH,KAAK,CAACqH,IAAN,IAAcrH,KAAK,CAACuG,IAAxB,EAA8BF,eAAe,CAACoB,iBAAhB,GAAoCzH,KAAK,CAACqH,IAAN,IAAcrH,KAAK,CAACuG,IAAxD;AAC9B,YAAIvG,KAAK,CAACuH,OAAV,EAAmBlB,eAAe,CAACqB,wBAAhB,GAA2C1H,KAAK,CAACuH,OAAjD;AACpB;AACF;;AACD,WAAOlB,eAAP;AACD,GA9SmB;;AAgTpB;;;;;AAKAsB,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyBlD,OAAzB,EAAkC;AACjD,QAAIpC,GAAG,GAAGoC,OAAO,CAAC2B,OAAR,CAAgB/D,GAAhB,CAAoB6B,UAApB,CAA+BO,OAAO,CAACV,SAAvC,CAAV;AACA,QAAIsC,eAAe,GAAG;AACpBC,MAAAA,IAAI,EAAE,gBADc;AAEpB/G,MAAAA,GAAG,EAAE8C,GAAG,GAAGA,GAAG,CAACkE,IAAP,GAAc9B,OAAO,CAACV,SAFV;AAGpByC,MAAAA,OAAO,EAAE,CAHW;AAIpB5G,MAAAA,OAAO,EAAE6E,OAAO,CAAC2B,OAAR,CAAgB/D,GAAhB,CAAoBoE,SAApB,IAAiChC,OAAO,CAAC2B,OAAR,CAAgB/D,GAAhB,CAAoBqE,cAJ1C;AAKpBkB,MAAAA,IAAI,EAAEnD,OAAO,CAACmC,WAAR,CAAoB1F,QAApB,CAA6B2G,QALf;AAMpBd,MAAAA,SAAS,EAAEtC,OAAO,CAACmC,WAAR,CAAoBI,YAApB;AANS,KAAtB;AAQA,QAAIC,QAAQ,GAAGxC,OAAO,CAACwC,QAAvB;;AACA,QAAIA,QAAQ,CAACC,YAAT,CAAsBC,UAA1B,EAAsC;AACpCd,MAAAA,eAAe,CAACyB,cAAhB,GAAiCb,QAAQ,CAACC,YAAT,CAAsBC,UAAvD;AACD;;AACD,QACE,CAAC1C,OAAO,CAACsD,gBAAT,IACAtD,OAAO,CAAC2B,OAAR,CAAgBtG,MAAhB,CAAuBkI,WADvB,IAEAvD,OAAO,CAAC2B,OAAR,CAAgBtG,MAAhB,CAAuBkI,WAAvB,CAAmCC,WAHrC,EAIE;AACA5B,MAAAA,eAAe,CAAC6B,SAAhB,GAA4BzD,OAAO,CAAC2B,OAAR,CAAgBtG,MAAhB,CAAuBkI,WAAvB,CAAmCC,WAA/D;AACD;;AACD,QAAI,CAAChB,QAAQ,CAACC,YAAT,CAAsBiB,OAA3B,EAAoC,OAAO9B,eAAP;;AACpC,QAAI5B,OAAO,CAACmC,WAAR,CAAoBuB,OAApB,CAA4B,sBAA5B,CAAJ,EAAyD;AACvD9B,MAAAA,eAAe,CAAC+B,YAAhB,GAA+B3D,OAAO,CAACmC,WAAR,CAAoBuB,OAApB,CAA4B,sBAA5B,CAA/B;AACD;;AACD,QAAIlB,QAAQ,CAACC,YAAT,CAAsBiB,OAAtB,CAA8B,kBAA9B,CAAJ,EAAuD;AACrD9B,MAAAA,eAAe,CAACgC,cAAhB,GAAiCpB,QAAQ,CAACC,YAAT,CAAsBiB,OAAtB,CAA8B,kBAA9B,CAAjC;AACD;;AACD,QAAIlB,QAAQ,CAACC,YAAT,CAAsBiB,OAAtB,CAA8B,kBAA9B,CAAJ,EAAuD;AACrD9B,MAAAA,eAAe,CAACiC,aAAhB,GAAgCrB,QAAQ,CAACC,YAAT,CAAsBiB,OAAtB,CAA8B,kBAA9B,CAAhC;AACD;;AACD,QAAIlB,QAAQ,CAACC,YAAT,CAAsBiB,OAAtB,CAA8B,YAA9B,CAAJ,EAAiD;AAC/C9B,MAAAA,eAAe,CAACkC,OAAhB,GAA0BtB,QAAQ,CAACC,YAAT,CAAsBiB,OAAtB,CAA8B,YAA9B,CAA1B;AACD;;AACD,WAAO9B,eAAP;AACD,GAxVmB;;AA0VpB;;;;AAIAmC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0B/D,OAA1B,EAAmC;AACnD,QAAI4B,eAAe,GAAG,KAAKsB,eAAL,CAAqBlD,OAArB,CAAtB;AACA,QAAIwC,QAAQ,GAAGxC,OAAO,CAACwC,QAAvB;AACA,QAAIjH,KAAK,GAAGiH,QAAQ,CAACjH,KAArB;;AACA,QAAIiH,QAAQ,CAACC,YAAT,CAAsBC,UAAtB,GAAmC,GAAvC,EAA6C;AAC3C,UAAInH,KAAK,CAACqH,IAAV,EAAgBhB,eAAe,CAACoC,YAAhB,GAA+BzI,KAAK,CAACqH,IAArC;AAChB,UAAIrH,KAAK,CAACuH,OAAV,EAAmBlB,eAAe,CAACqC,mBAAhB,GAAsC1I,KAAK,CAACuH,OAA5C;AACpB,KAHD,MAGO;AACL,UAAIvH,KAAK,CAACqH,IAAN,IAAcrH,KAAK,CAACuG,IAAxB,EAA8BF,eAAe,CAACsC,YAAhB,GAA+B3I,KAAK,CAACqH,IAAN,IAAcrH,KAAK,CAACuG,IAAnD;AAC9B,UAAIvG,KAAK,CAACuH,OAAV,EAAmBlB,eAAe,CAACuC,mBAAhB,GAAsC5I,KAAK,CAACuH,OAA5C;AACpB;;AACD,WAAOlB,eAAP;AACD,GA1WmB;;AA4WpB;;;;;AAKAzB,EAAAA,uBAAuB,EAAE,SAASA,uBAAT,CAAiCH,OAAjC,EAA0C;AACjE,QAAIoE,gBAAJ,CADiE,CAC3C;;AACtB,QAAIC,oBAAJ,CAFiE,CAEvC;;AAC1B,QAAIC,cAAJ,CAHiE,CAG7C;;AACpB,QAAIC,iBAAJ,CAJiE,CAI1C;;AACvB,QAAIC,YAAY,GAAG,CAAnB,CALiE,CAK3C;;AACtB,QAAIpC,MAAJ,CANiE,CAMrD;;AACZ,QAAIqC,aAAJ,CAPiE,CAO9C;;AACnB,QAAIC,IAAI,GAAG,IAAX;AACA,QAAIC,SAAS,GAAG,IAAhB;AAEA3E,IAAAA,OAAO,CAAC4E,EAAR,CAAW,UAAX,EAAuB,YAAY;AACjCL,MAAAA,iBAAiB,GAAG3J,GAAG,CAACK,IAAJ,CAAS4J,SAAT,CAAmBC,GAAnB,EAApB;AACAL,MAAAA,aAAa,GAAGlG,IAAI,CAACuG,GAAL,EAAhB;AACD,KAHD,EAGGH,SAHH;AAIA3E,IAAAA,OAAO,CAAC4E,EAAR,CAAW,MAAX,EAAmB,YAAY;AAC7BP,MAAAA,oBAAoB,GAAGzJ,GAAG,CAACK,IAAJ,CAAS4J,SAAT,CAAmBC,GAAnB,EAAvB;AACAV,MAAAA,gBAAgB,GAAG7F,IAAI,CAACuG,GAAL,EAAnB;AACA1C,MAAAA,MAAM,GAAGpC,OAAO,CAACmC,WAAR,CAAoBC,MAA7B;AACAoC,MAAAA,YAAY;AACb,KALD,EAKGG,SALH;AAMA3E,IAAAA,OAAO,CAAC4E,EAAR,CAAW,kBAAX,EAA+B,YAAW;AACxCN,MAAAA,cAAc,GAAGS,IAAI,CAACC,KAAL,CAAWpK,GAAG,CAACK,IAAJ,CAAS4J,SAAT,CAAmBC,GAAnB,KAA2BT,oBAAtC,CAAjB;AACD,KAFD;AAGArE,IAAAA,OAAO,CAAC7C,gBAAR,CAAyB,kBAAzB,EAA6C,SAA7C,EAAwD,SAAS8H,gBAAT,GAA4B;AAClF,UAAI/B,eAAe,GAAGwB,IAAI,CAACxB,eAAL,CAAqBlD,OAArB,CAAtB;AACAkD,MAAAA,eAAe,CAACgC,SAAhB,GAA4Bd,gBAA5B;AACAlB,MAAAA,eAAe,CAACiC,cAAhB,GAAiCb,cAAc,IAAI,CAAlB,GAAsBA,cAAtB,GAAuC,CAAxE;AACApB,MAAAA,eAAe,CAAChB,MAAhB,GAAyBE,MAAzB;AACAsC,MAAAA,IAAI,CAACU,IAAL,CAAU,gBAAV,EAA4B,CAAClC,eAAD,CAA5B;AACD,KAND;AAOAlD,IAAAA,OAAO,CAAC7C,gBAAR,CAAyB,wBAAzB,EAAmD,OAAnD,EAA4D,SAASkI,sBAAT,GAAkC;AAC5F,UAAInC,eAAe,GAAGwB,IAAI,CAACX,gBAAL,CAAsB/D,OAAtB,CAAtB;AACAkD,MAAAA,eAAe,CAACgC,SAAhB,GAA4Bd,gBAA5B,CAF4F,CAG5F;;AACAE,MAAAA,cAAc,GAAGA,cAAc,IAC7BS,IAAI,CAACC,KAAL,CAAWpK,GAAG,CAACK,IAAJ,CAAS4J,SAAT,CAAmBC,GAAnB,KAA2BT,oBAAtC,CADF;AAEAnB,MAAAA,eAAe,CAACiC,cAAhB,GAAiCb,cAAc,IAAI,CAAlB,GAAsBA,cAAtB,GAAuC,CAAxE;AACApB,MAAAA,eAAe,CAAChB,MAAhB,GAAyBE,MAAzB;AACAsC,MAAAA,IAAI,CAACU,IAAL,CAAU,gBAAV,EAA4B,CAAClC,eAAD,CAA5B;AACD,KATD;AAUAlD,IAAAA,OAAO,CAAC7C,gBAAR,CAAyB,UAAzB,EAAqC,UAArC,EAAiD,SAASmI,QAAT,GAAoB;AACnE,UAAI5D,YAAY,GAAGgD,IAAI,CAAChD,YAAL,CAAkB1B,OAAlB,CAAnB;AACA0B,MAAAA,YAAY,CAAC6D,YAAb,GAA4Bf,YAA5B;AACA,UAAI9C,YAAY,CAAC6D,YAAb,IAA6B,CAAjC,EAAoC;AACpC7D,MAAAA,YAAY,CAACwD,SAAb,GAAyBT,aAAzB;AACA,UAAIe,OAAO,GAAGT,IAAI,CAACC,KAAL,CAAWpK,GAAG,CAACK,IAAJ,CAAS4J,SAAT,CAAmBC,GAAnB,KAA2BP,iBAAtC,CAAd;AACA7C,MAAAA,YAAY,CAAC+D,OAAb,GAAuBD,OAAO,IAAI,CAAX,GAAeA,OAAf,GAAyB,CAAhD;AACA,UAAIhD,QAAQ,GAAGxC,OAAO,CAACwC,QAAvB;;AACA,UACEA,QAAQ,CAACjH,KAAT,IACAiH,QAAQ,CAACjH,KAAT,CAAemK,SADf,IAEA,OAAOlD,QAAQ,CAACmD,UAAhB,KAA+B,QAF/B,IAGA,OAAOnD,QAAQ,CAACoD,UAAhB,KAA+B,QAH/B,IAICpD,QAAQ,CAACmD,UAAT,IAAuBnD,QAAQ,CAACoD,UALnC,EAME;AACAlE,QAAAA,YAAY,CAACW,kBAAb,GAAkC,CAAlC;AACD;;AACDqC,MAAAA,IAAI,CAACU,IAAL,CAAU,SAAV,EAAqB,CAAC1D,YAAD,CAArB;AACD,KAlBD;AAmBD,GA7amB;;AA+apB;;;;;;AAMAF,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BxB,OAA/B,EAAwC,CAC9D,CAtbmB;;AAwbpB;;;;AAIA6F,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwB7F,OAAxB,EAAiC;AAC/C,QAAIhC,OAAJ,CAD+C,CAE/C;;AACA,QAAIsB,SAAS,GAAG,IAAhB;AACA,QAAIwG,QAAQ,GAAG,EAAf;;AACA,QAAI9F,OAAJ,EAAa;AACX,UAAIP,UAAU,GAAGO,OAAO,CAAC2B,OAAR,CAAgB/D,GAAhB,CAAoB6B,UAApB,IAAkC,EAAnD;AACAH,MAAAA,SAAS,GAAGG,UAAU,CAACO,OAAO,CAACV,SAAT,CAAV,IAAiC,IAA7C;AACAwG,MAAAA,QAAQ,GAAGxG,SAAS,GAAGA,SAAS,CAACwG,QAAb,GAAwB,EAA5C;AACD;;AACD,QAAI,KAAKzK,MAAL,CAAY0K,gBAAhB,EAAkC;AAChC/H,MAAAA,OAAO,GAAG,KAAK3C,MAAL,CAAY0K,gBAAtB;AACD,KAFD,MAEO,IAAID,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,kBAAtC,EAA0D;AAC/D9H,MAAAA,OAAO,GAAG,IAAV;AACD,KAFM,MAEA;AACLA,MAAAA,OAAO,GAAG,KAAKJ,GAAL,CAASmI,gBAAnB;AACD;;AACD,WAAOnL,GAAG,CAACoL,OAAJ,CAAYC,aAAZ,CAA0BC,UAA1B,CAAqClI,OAArC,CAAP;AACD,GA9cmB;;AAgdpB;;;AAGAgD,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,GAA4B;AAC5C,YAAQ,KAAKpD,GAAL,CAASuI,QAAjB;AACE,WAAK,KAAL;AAAY,eAAOvL,GAAG,CAACkG,cAAJ,CAAmBsF,KAA1B;;AACZ,WAAK,OAAL;AAAc,eAAOxL,GAAG,CAACkG,cAAJ,CAAmBsF,KAA1B;;AACd,WAAK,MAAL;AAAa,eAAOxL,GAAG,CAACkG,cAAJ,CAAmBuF,IAA1B;;AACb,WAAK,WAAL;AAAkB,eAAOzL,GAAG,CAACkG,cAAJ,CAAmBwF,QAA1B;;AAClB,WAAK,UAAL;AAAiB,eAAO1L,GAAG,CAACkG,cAAJ,CAAmByF,OAA1B;AALnB;;AAOA,QAAI,KAAK3I,GAAL,CAASuI,QAAb,EAAuB;AACrB,YAAM,IAAI3K,KAAJ,CAAU,iCACd,KAAKoC,GAAL,CAASuI,QADK,GACM,gBADhB,CAAN;AAED;AACF,GA/dmB;;AAiepB;;;AAGAK,EAAAA,kBAAkB,EAAE,SAASA,kBAAT,CAA4BC,IAA5B,EAAkC;AACpD,WAAOA,IAAI,CAAChE,YAAL,CAAkBC,UAAlB,GAA+B,GAAtC;AACD,GAtemB;;AAwepB;;;;;;AAMAgE,EAAAA,UAAU,EAAE,SAASA,UAAT,GAAsB;AAChC,QAAI,KAAKrL,MAAL,CAAYuK,UAAZ,KAA2B7F,SAA/B,EAA0C;AACxC,aAAO,KAAK1E,MAAL,CAAYuK,UAAnB;AACD,KAFD,MAEO;AACL,aAAO,KAAK3G,iBAAZ;AACD;AACF,GApfmB;;AAsfpB;;;AAGA0H,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBhB,UAArB,EAAiCiB,GAAjC,EAAsC;AACjD,WAAOhM,GAAG,CAACK,IAAJ,CAAS4L,mBAAT,CAA6BlB,UAA7B,EAAyC,KAAKtK,MAAL,CAAYyL,iBAArD,EAAwEF,GAAxE,CAAP;AACD,GA3fmB;;AA6fpB;;;AAGAG,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBxL,KAAxB,EAA+B;AAC7C,QAAI,KAAKyL,YAAL,CAAkBzL,KAAlB,CAAJ,EAA8B,OAAO,IAAP;AAC9B,QAAI,KAAK0L,eAAL,CAAqB1L,KAArB,CAAJ,EAAiC,OAAO,IAAP;AACjC,QAAI,KAAK2L,uBAAL,CAA6B3L,KAA7B,CAAJ,EAAyC,OAAO,IAAP;AACzC,QAAI,KAAK4L,cAAL,CAAoB5L,KAApB,CAAJ,EAAgC,OAAO,IAAP;AAChC,QAAIA,KAAK,CAACmH,UAAN,IAAoB,GAAxB,EAA6B,OAAO,IAAP;AAC7B,WAAO,KAAP;AACD,GAvgBmB;;AAygBpB;;;AAGAuE,EAAAA,eAAe,EAAE,SAASA,eAAT,CAAyB1L,KAAzB,EAAgC;AAC/C,WAAOA,KAAK,CAACqH,IAAN,KAAe,iBAAtB;AACD,GA9gBmB;;AAghBpB;;;AAGAoE,EAAAA,YAAY,EAAE,SAASA,YAAT,CAAsBzL,KAAtB,EAA6B;AACzC,WAAOA,KAAK,CAACqH,IAAN,KAAe,cAAtB;AACD,GArhBmB;;AAuhBpB;;;AAGAsE,EAAAA,uBAAuB,EAAE,SAASA,uBAAT,CAAiC3L,KAAjC,EAAwC;AAC/D;AACA,WAAQA,KAAK,CAACqH,IAAN,KAAe,uBAAvB;AACD,GA7hBmB;;AA+hBpB;;;AAGAwE,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwB7L,KAAxB,EAA+B;AAC7C,YAAQA,KAAK,CAACqH,IAAd;AACE,WAAK,sBAAL;AACA,WAAK,gBAAL;AACA,WAAK,2BAAL;AACA,WAAK,uBAAL;AACA,WAAK,aAAL;AACA,WAAK,oBAAL;AACE,eAAO,IAAP;;AACF;AAAS,eAAO,KAAP;AARX;AAUD,GA7iBmB;;AA+iBpB;;;AAGAyE,EAAAA,oBAAoB,EAAE,SAASA,oBAAT,GAAgC;AACpD,WAAO,IAAI9I,IAAJ,CAASA,IAAI,CAACuG,GAAL,KAAa,KAAKzJ,MAAL,CAAYiM,iBAAlC,CAAP;AACD,GApjBmB;;AAsjBpB;;;AAGAC,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,aAA1B,EAAyC;AACzD,QAAIA,aAAJ,EAAmB;AACjB,WAAKnM,MAAL,CAAYiM,iBAAZ,GAAgCE,aAAa,GAAGjJ,IAAI,CAACuG,GAAL,EAAhD;AACD;AACF,GA7jBmB;;AA+jBpB;;;AAGA2C,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBD,aAAvB,EAAsC;AACnD,QAAIA,aAAJ,EAAmB;AACjB,aAAOzC,IAAI,CAAC2C,GAAL,CAAS,KAAKL,oBAAL,GAA4BM,OAA5B,KAAwCH,aAAjD,KAAmE,MAA1E;AACD;AACF,GAtkBmB;;AAwkBpB;;;AAGAL,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwB5L,KAAxB,EAA+B;AAC7C;AACA,QAAIA,KAAK,CAACmH,UAAN,KAAqB,GAAzB,EAA8B,OAAO,IAAP;;AAC9B,YAAQnH,KAAK,CAACqH,IAAd;AACE,WAAK,wCAAL;AACA,WAAK,YAAL;AACA,WAAK,qBAAL;AACA,WAAK,sBAAL;AACA,WAAK,kBAAL;AACA,WAAK,2BAAL;AACA,WAAK,0BAAL;AACA,WAAK,gCAAL,CARF,CAQyC;;AACvC,WAAK,uBAAL;AACE,eAAO,IAAP;;AACF;AACE,eAAO,KAAP;AAZJ;AAcD,GA5lBmB;;AA8lBpB;;;AAGAjG,EAAAA,oBAAoB,EAAE,SAASA,oBAAT,CAA8BF,QAA9B,EAAwC;AAC5D,QAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,OAAOA,QAAP;AAElC,QAAImL,CAAC,GAAGnL,QAAR;AACAmL,IAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,cAAV,EAA0B,KAAKjK,GAAL,CAASqE,cAAnC,CAAJ;AACA2F,IAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyB,KAAKxM,MAAL,CAAY+G,MAArC,CAAJ;AACAwF,IAAAA,CAAC,GAAGA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyB,KAAKxM,MAAL,CAAYyM,UAAZ,GAAyB,OAAzB,GAAmC,MAA5D,CAAJ;AACA,WAAOF,CAAP;AACD,GAzmBmB;;AA2mBpB;;;AAGAhL,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBH,QAArB,EAA+B;AAC1C,SAAKA,QAAL,GAAgB,IAAI7B,GAAG,CAACmN,QAAR,CAAiBtL,QAAjB,EAA2B,KAAKpB,MAAhC,CAAhB;AACD,GAhnBmB;;AAknBpB;;;AAGA2M,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0B1I,SAA1B,EAAqC2I,cAArC,EAAqD;AACrE,QAAIC,SAAS,GAAG,KAAKtK,GAAL,CAAS6B,UAAT,CAAoBH,SAApB,EAA+B4I,SAA/C;;AACA,QAAI,CAACA,SAAL,EAAgB;AACd,UAAID,cAAJ,EAAoB;AAClB,YAAIL,CAAC,GAAG,IAAIpM,KAAJ,EAAR;AACA,cAAMZ,GAAG,CAACK,IAAJ,CAASM,KAAT,CAAeqM,CAAf,EAAkB,qCAAqCtI,SAAvD,CAAN;AACD;;AACD,aAAO,IAAP;AACD;;AAED,WAAO4I,SAAP;AACD;AAhoBmB,CAAD,CAArB;AAmoBAtN,GAAG,CAACK,IAAJ,CAASsB,MAAT,CAAgB3B,GAAG,CAACO,OAApB,EAA6B;AAE3B;;;;;AAKAgN,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBvM,GAAvB,EAA4B;AACzChB,IAAAA,GAAG,CAACK,IAAJ,CAASyE,IAAT,CAAc9D,GAAG,CAAC6F,SAAJ,CAAc7D,GAAd,CAAkB6B,UAAhC,EAA4C,SAAS2I,QAAT,CAAkBC,MAAlB,EAA0B;AACpE,UAAIzM,GAAG,CAAC6F,SAAJ,CAAc4G,MAAd,CAAJ,EAA2B;AAC3B,UAAI/I,SAAS,GAAG1D,GAAG,CAAC6F,SAAJ,CAAc7D,GAAd,CAAkB6B,UAAlB,CAA6B4I,MAA7B,CAAhB;;AACA,UAAI/I,SAAS,CAACwG,QAAV,KAAuB,MAA3B,EAAmC;AACjClK,QAAAA,GAAG,CAAC6F,SAAJ,CAAc4G,MAAd,IAAwB,UAAU9I,MAAV,EAAkBJ,QAAlB,EAA4B;AAClD,iBAAO,KAAKkB,0BAAL,CAAgCgI,MAAhC,EAAwC9I,MAAxC,EAAgDJ,QAAhD,CAAP;AACD,SAFD;AAGD,OAJD,MAIO;AACLvD,QAAAA,GAAG,CAAC6F,SAAJ,CAAc4G,MAAd,IAAwB,UAAU9I,MAAV,EAAkBJ,QAAlB,EAA4B;AAClD,iBAAO,KAAKE,WAAL,CAAiBgJ,MAAjB,EAAyB9I,MAAzB,EAAiCJ,QAAjC,CAAP;AACD,SAFD;AAGD;AACF,KAZD;AAaD,GArB0B;;AAuB3B;;;;;;;;;;;AAWAmJ,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBjM,iBAAvB,EAA0CkM,QAA1C,EAAoDC,QAApD,EAA8D;AAC3E5N,IAAAA,GAAG,CAACO,OAAJ,CAAYsN,WAAZ,CAAwBpM,iBAAxB,IAA6C,IAA7C;;AACA,QAAI,CAACqM,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAAL,EAA8B;AAC5BC,MAAAA,QAAQ,GAAGD,QAAX;AACAA,MAAAA,QAAQ,GAAG,EAAX;AACD;;AAED,QAAI3M,GAAG,GAAGZ,OAAO,CAACJ,GAAG,CAACO,OAAL,EAAcqN,QAAQ,IAAI,EAA1B,CAAjB;;AAEA,QAAI,OAAOnM,iBAAP,KAA6B,QAAjC,EAA2C;AACzCzB,MAAAA,GAAG,CAACO,OAAJ,CAAYyN,WAAZ,CAAwBhN,GAAxB,EAA6B2M,QAA7B;AAEA,UAAIM,UAAU,GAAGjN,GAAG,CAACS,iBAAJ,IAAyBA,iBAA1C;AACAT,MAAAA,GAAG,CAACS,iBAAJ,GAAwBwM,UAAxB;AACD,KALD,MAKO;AAAE;AACPjN,MAAAA,GAAG,CAAC6F,SAAJ,CAAc7D,GAAd,GAAoBvB,iBAApB;AACAzB,MAAAA,GAAG,CAACO,OAAJ,CAAYgN,aAAZ,CAA0BvM,GAA1B;AACD;;AACDhB,IAAAA,GAAG,CAACiC,kBAAJ,CAAuBC,IAAvB,CAA4B,KAAK2E,SAAjC,EAlB2E,CAmB3E;;AACA,QAAI,CAAC,KAAKA,SAAL,CAAevE,SAAhB,IAA6BtC,GAAG,CAACK,IAAJ,CAAS+B,oBAA1C,EAAgE;AAC9D,UAAI8L,SAAS,GAAGlO,GAAG,CAACK,IAAJ,CAAS+B,oBAAT,CAA8B8L,SAA9C;AACA,UAAIC,cAAc,GAAGnO,GAAG,CAACK,IAAJ,CAAS+B,oBAAT,CAA8B+L,cAAnD;AACA,UAAIC,eAAe,GAAGD,cAAc,EAApC;AACA,WAAKtH,SAAL,CAAevE,SAAf,GAA2B,IAAI4L,SAAJ,CAAcE,eAAd,CAA3B;;AACA,UAAIA,eAAe,CAACC,OAApB,EAA6B;AAC3B;AACArO,QAAAA,GAAG,CAACO,OAAJ,CAAY8B,qBAAZ,GAAoC,IAApC;AACD;AACF;;AACDrC,IAAAA,GAAG,CAACiC,kBAAJ,CAAuBC,IAAvB,CAA4BlB,GAAG,CAAC6F,SAAhC;AACA7G,IAAAA,GAAG,CAACO,OAAJ,CAAY4B,6BAAZ,CAA0CnB,GAAG,CAAC6F,SAA9C;AACA,WAAO7F,GAAP;AACD,GAnE0B;;AAqE3B;;;AAGAgN,EAAAA,WAAW,EAAE,SAASA,WAAT,CAAqBhN,GAArB,EAA0B2M,QAA1B,EAAoC;AAC/C,QAAI,CAACG,KAAK,CAACC,OAAN,CAAcJ,QAAd,CAAL,EAA8BA,QAAQ,GAAG,CAACA,QAAD,CAAX;AAE9B3M,IAAAA,GAAG,CAACmC,QAAJ,GAAenC,GAAG,CAACmC,QAAJ,IAAgB,EAA/B;;AACA,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwJ,QAAQ,CAAClK,MAA7B,EAAqCU,CAAC,EAAtC,EAA0C;AACxC,UAAInD,GAAG,CAACmC,QAAJ,CAAawK,QAAQ,CAACxJ,CAAD,CAArB,MAA8BgB,SAAlC,EAA6C;AAC3CnE,QAAAA,GAAG,CAACmC,QAAJ,CAAawK,QAAQ,CAACxJ,CAAD,CAArB,IAA4B,IAA5B;AACD;AACF;;AAEDnD,IAAAA,GAAG,CAACqC,WAAJ,GAAkBpC,MAAM,CAAC+C,IAAP,CAAYhD,GAAG,CAACmC,QAAhB,EAA0Bc,IAA1B,EAAlB;AACD,GAnF0B;;AAqF3B;;;AAGAf,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BoL,UAA1B,EAAsClL,OAAtC,EAA+CH,SAA/C,EAA0D;AAC1E,QAAIjC,GAAG,GAAGZ,OAAO,CAACkO,UAAD,EAAa;AAC5B7M,MAAAA,iBAAiB,EAAE6M,UAAU,CAAC7M;AADF,KAAb,CAAjB;;AAIA,aAAS8M,MAAT,CAAgBvL,GAAhB,EAAqB;AACnB,UAAIA,GAAG,CAACwL,KAAR,EAAe;AACbxN,QAAAA,GAAG,CAAC6F,SAAJ,CAAc7D,GAAd,GAAoBA,GAApB;AACD,OAFD,MAEO;AACLhC,QAAAA,GAAG,CAAC6F,SAAJ,CAAc7D,GAAd,GAAoB,IAAI9C,GAAJ,CAAQ8C,GAAR,EAAa;AAC/BvB,UAAAA,iBAAiB,EAAE6M,UAAU,CAAC7M;AADC,SAAb,CAApB;AAGD;AACF;;AAED,QAAI,OAAO2B,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAIH,SAAJ,EAAe;AACbsL,QAAAA,MAAM,CAACtL,SAAD,CAAN;AACD,OAFD,MAEO;AACL,YAAI;AACFsL,UAAAA,MAAM,CAACvO,GAAG,CAACyO,SAAJ,CAAcH,UAAU,CAAC7M,iBAAzB,EAA4C2B,OAA5C,CAAD,CAAN;AACD,SAFD,CAEE,OAAO4I,GAAP,EAAY;AACZ,gBAAMhM,GAAG,CAACK,IAAJ,CAASM,KAAT,CAAeqL,GAAf,EAAoB;AACxB9D,YAAAA,OAAO,EAAE,sCACPoG,UAAU,CAAC7M,iBADJ,GACwB,GADxB,GAC8B2B;AAFf,WAApB,CAAN;AAID;AACF;;AACD,UAAI,CAACnC,MAAM,CAAC4F,SAAP,CAAiB9C,cAAjB,CAAgC7B,IAAhC,CAAqCoM,UAAU,CAACnL,QAAhD,EAA0DC,OAA1D,CAAL,EAAyE;AACvEkL,QAAAA,UAAU,CAACjL,WAAX,GAAyBiL,UAAU,CAACjL,WAAX,CAAuBqL,MAAvB,CAA8BtL,OAA9B,EAAuCa,IAAvC,EAAzB;AACD;;AACDqK,MAAAA,UAAU,CAACnL,QAAX,CAAoBC,OAApB,IAA+BpC,GAA/B;AACD,KAjBD,MAiBO;AACLuN,MAAAA,MAAM,CAACnL,OAAD,CAAN;AACD;;AAEDpD,IAAAA,GAAG,CAACO,OAAJ,CAAYgN,aAAZ,CAA0BvM,GAA1B;AACA,WAAOA,GAAP;AACD,GA9H0B;;AAgI3B;;;AAGA2N,EAAAA,UAAU,EAAE,oBAASV,UAAT,EAAqB;AAC/B,WAAOhN,MAAM,CAAC4F,SAAP,CAAiB9C,cAAjB,CAAgC7B,IAAhC,CAAqClC,GAAG,CAACO,OAAJ,CAAYsN,WAAjD,EAA8DI,UAA9D,CAAP;AACD,GArI0B;;AAuI3B;;;;;;;;AAQA9L,EAAAA,6BAA6B,EAAE,SAASA,6BAAT,CAAuCyM,QAAvC,EAAiD;AAC9EA,IAAAA,QAAQ,CAACrM,gBAAT,CAA0B,uBAA1B,EAAmD,gBAAnD,EAAqE,SAASsM,aAAT,CAAuBpM,KAAvB,EAA8B;AACjG,UAAIqM,SAAS,GAAG7N,MAAM,CAAC8N,cAAP,CAAsBH,QAAtB,CAAhB;AACA,UAAIE,SAAS,CAACE,OAAd,EAAuBF,SAAS,CAACtE,IAAV,CAAe,gBAAf,EAAiC,CAAC/H,KAAD,CAAjC;AACxB,KAHD;AAIAmM,IAAAA,QAAQ,CAACrM,gBAAT,CAA0B,oBAA1B,EAAgD,SAAhD,EAA2D,SAAS0M,kBAAT,CAA4BxM,KAA5B,EAAmC;AAC5F,UAAIqM,SAAS,GAAG7N,MAAM,CAAC8N,cAAP,CAAsBH,QAAtB,CAAhB;AACA,UAAIE,SAAS,CAACE,OAAd,EAAuBF,SAAS,CAACtE,IAAV,CAAe,SAAf,EAA0B,CAAC/H,KAAD,CAA1B;AACxB,KAHD;AAID,GAxJ0B;;AA0J3B;;;AAGAoL,EAAAA,WAAW,EAAE;AA7Jc,CAA7B;AAgKA7N,GAAG,CAACK,IAAJ,CAAS6O,KAAT,CAAelP,GAAG,CAACO,OAAnB,EAA4BP,GAAG,CAACiC,kBAAhC;AAEA;;;;AAGAkN,MAAM,CAACC,OAAP,GAAiBpP,GAAG,CAACO,OAArB","sourcesContent":["var AWS = require('./core');\nvar Api = require('./model/api');\nvar regionConfig = require('./region_config');\n\nvar inherit = AWS.util.inherit;\nvar clientCount = 0;\n\n/**\n * The service class representing an AWS service.\n *\n * @class_abstract This class is an abstract class.\n *\n * @!attribute apiVersions\n *   @return [Array<String>] the list of API versions supported by this service.\n *   @readonly\n */\nAWS.Service = inherit({\n  /**\n   * Create a new service object with a configuration object\n   *\n   * @param config [map] a map of configuration options\n   */\n  constructor: function Service(config) {\n    if (!this.loadServiceClass) {\n      throw AWS.util.error(new Error(),\n        'Service must be constructed with `new\\' operator');\n    }\n    var ServiceClass = this.loadServiceClass(config || {});\n    if (ServiceClass) {\n      var originalConfig = AWS.util.copy(config);\n      var svc = new ServiceClass(config);\n      Object.defineProperty(svc, '_originalConfig', {\n        get: function() { return originalConfig; },\n        enumerable: false,\n        configurable: true\n      });\n      svc._clientId = ++clientCount;\n      return svc;\n    }\n    this.initialize(config);\n  },\n\n  /**\n   * @api private\n   */\n  initialize: function initialize(config) {\n    var svcConfig = AWS.config[this.serviceIdentifier];\n    this.config = new AWS.Config(AWS.config);\n    if (svcConfig) this.config.update(svcConfig, true);\n    if (config) this.config.update(config, true);\n\n    this.validateService();\n    if (!this.config.endpoint) regionConfig.configureEndpoint(this);\n\n    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);\n    this.setEndpoint(this.config.endpoint);\n    //enable attaching listeners to service client\n    AWS.SequentialExecutor.call(this);\n    AWS.Service.addDefaultMonitoringListeners(this);\n    if ((this.config.clientSideMonitoring || AWS.Service._clientSideMonitoring) && this.publisher) {\n      var publisher = this.publisher;\n      this.addNamedListener('PUBLISH_API_CALL', 'apiCall', function PUBLISH_API_CALL(event) {\n        process.nextTick(function() {publisher.eventHandler(event);});\n      });\n      this.addNamedListener('PUBLISH_API_ATTEMPT', 'apiCallAttempt', function PUBLISH_API_ATTEMPT(event) {\n        process.nextTick(function() {publisher.eventHandler(event);});\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n  },\n\n  /**\n   * @api private\n   */\n  loadServiceClass: function loadServiceClass(serviceConfig) {\n    var config = serviceConfig;\n    if (!AWS.util.isEmpty(this.api)) {\n      return null;\n    } else if (config.apiConfig) {\n      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);\n    } else if (!this.constructor.services) {\n      return null;\n    } else {\n      config = new AWS.Config(AWS.config);\n      config.update(serviceConfig, true);\n      var version = config.apiVersions[this.constructor.serviceIdentifier];\n      version = version || config.apiVersion;\n      return this.getLatestServiceClass(version);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  getLatestServiceClass: function getLatestServiceClass(version) {\n    version = this.getLatestServiceVersion(version);\n    if (this.constructor.services[version] === null) {\n      AWS.Service.defineServiceApi(this.constructor, version);\n    }\n\n    return this.constructor.services[version];\n  },\n\n  /**\n   * @api private\n   */\n  getLatestServiceVersion: function getLatestServiceVersion(version) {\n    if (!this.constructor.services || this.constructor.services.length === 0) {\n      throw new Error('No services defined on ' +\n                      this.constructor.serviceIdentifier);\n    }\n\n    if (!version) {\n      version = 'latest';\n    } else if (AWS.util.isType(version, Date)) {\n      version = AWS.util.date.iso8601(version).split('T')[0];\n    }\n\n    if (Object.hasOwnProperty(this.constructor.services, version)) {\n      return version;\n    }\n\n    var keys = Object.keys(this.constructor.services).sort();\n    var selectedVersion = null;\n    for (var i = keys.length - 1; i >= 0; i--) {\n      // versions that end in \"*\" are not available on disk and can be\n      // skipped, so do not choose these as selectedVersions\n      if (keys[i][keys[i].length - 1] !== '*') {\n        selectedVersion = keys[i];\n      }\n      if (keys[i].substr(0, 10) <= version) {\n        return selectedVersion;\n      }\n    }\n\n    throw new Error('Could not find ' + this.constructor.serviceIdentifier +\n                    ' API to satisfy version constraint `' + version + '\\'');\n  },\n\n  /**\n   * @api private\n   */\n  api: {},\n\n  /**\n   * @api private\n   */\n  defaultRetryCount: 3,\n\n  /**\n   * @api private\n   */\n  customizeRequests: function customizeRequests(callback) {\n    if (!callback) {\n      this.customRequestHandler = null;\n    } else if (typeof callback === 'function') {\n      this.customRequestHandler = callback;\n    } else {\n      throw new Error('Invalid callback type \\'' + typeof callback + '\\' provided in customizeRequests');\n    }\n  },\n\n  /**\n   * Calls an operation on a service with the given input parameters.\n   *\n   * @param operation [String] the name of the operation to call on the service.\n   * @param params [map] a map of input options for the operation\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  makeRequest: function makeRequest(operation, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = null;\n    }\n\n    params = params || {};\n    if (this.config.params) { // copy only toplevel bound params\n      var rules = this.api.operations[operation];\n      if (rules) {\n        params = AWS.util.copy(params);\n        AWS.util.each(this.config.params, function(key, value) {\n          if (rules.input.members[key]) {\n            if (params[key] === undefined || params[key] === null) {\n              params[key] = value;\n            }\n          }\n        });\n      }\n    }\n\n    var request = new AWS.Request(this, operation, params);\n    this.addAllRequestListeners(request);\n    this.attachMonitoringEmitter(request);\n    if (callback) request.send(callback);\n    return request;\n  },\n\n  /**\n   * Calls an operation on a service with the given input parameters, without\n   * any authentication data. This method is useful for \"public\" API operations.\n   *\n   * @param operation [String] the name of the operation to call on the service.\n   * @param params [map] a map of input options for the operation\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {\n    if (typeof params === 'function') {\n      callback = params;\n      params = {};\n    }\n\n    var request = this.makeRequest(operation, params).toUnauthenticated();\n    return callback ? request.send(callback) : request;\n  },\n\n  /**\n   * Waits for a given state\n   *\n   * @param state [String] the state on the service to wait for\n   * @param params [map] a map of parameters to pass with each request\n   * @option params $waiter [map] a map of configuration options for the waiter\n   * @option params $waiter.delay [Number] The number of seconds to wait between\n   *                                       requests\n   * @option params $waiter.maxAttempts [Number] The maximum number of requests\n   *                                             to send while waiting\n   * @callback callback function(err, data)\n   *   If a callback is supplied, it is called when a response is returned\n   *   from the service.\n   *   @param err [Error] the error object returned from the request.\n   *     Set to `null` if the request is successful.\n   *   @param data [Object] the de-serialized data returned from\n   *     the request. Set to `null` if a request error occurs.\n   */\n  waitFor: function waitFor(state, params, callback) {\n    var waiter = new AWS.ResourceWaiter(this, state);\n    return waiter.wait(params, callback);\n  },\n\n  /**\n   * @api private\n   */\n  addAllRequestListeners: function addAllRequestListeners(request) {\n    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),\n                AWS.EventListeners.CorePost];\n    for (var i = 0; i < list.length; i++) {\n      if (list[i]) request.addListeners(list[i]);\n    }\n\n    // disable parameter validation\n    if (!this.config.paramValidation) {\n      request.removeListener('validate',\n        AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n    }\n\n    if (this.config.logger) { // add logging events\n      request.addListeners(AWS.EventListeners.Logger);\n    }\n\n    this.setupRequestListeners(request);\n    // call prototype's customRequestHandler\n    if (typeof this.constructor.prototype.customRequestHandler === 'function') {\n      this.constructor.prototype.customRequestHandler(request);\n    }\n    // call instance's customRequestHandler\n    if (Object.prototype.hasOwnProperty.call(this, 'customRequestHandler') && typeof this.customRequestHandler === 'function') {\n      this.customRequestHandler(request);\n    }\n  },\n\n  /**\n   * Event recording metrics for a whole API call.\n   * @returns {object} a subset of api call metrics\n   * @api private\n   */\n  apiCallEvent: function apiCallEvent(request) {\n    var api = request.service.api.operations[request.operation];\n    var monitoringEvent = {\n      Type: 'ApiCall',\n      Api: api ? api.name : request.operation,\n      Version: 1,\n      Service: request.service.api.serviceId || request.service.api.endpointPrefix,\n      Region: request.httpRequest.region,\n      MaxRetriesExceeded: 0,\n      UserAgent: request.httpRequest.getUserAgent(),\n    };\n    var response = request.response;\n    if (response.httpResponse.statusCode) {\n      monitoringEvent.FinalHttpStatusCode = response.httpResponse.statusCode;\n    }\n    if (response.error) {\n      var error = response.error;\n      var statusCode = response.httpResponse.statusCode;\n      if (statusCode > 299) {\n        if (error.code) monitoringEvent.FinalAwsException = error.code;\n        if (error.message) monitoringEvent.FinalAwsExceptionMessage = error.message;\n      } else {\n        if (error.code || error.name) monitoringEvent.FinalSdkException = error.code || error.name;\n        if (error.message) monitoringEvent.FinalSdkExceptionMessage = error.message;\n      }\n    }\n    return monitoringEvent;\n  },\n\n  /**\n   * Event recording metrics for an API call attempt.\n   * @returns {object} a subset of api call attempt metrics\n   * @api private\n   */\n  apiAttemptEvent: function apiAttemptEvent(request) {\n    var api = request.service.api.operations[request.operation];\n    var monitoringEvent = {\n      Type: 'ApiCallAttempt',\n      Api: api ? api.name : request.operation,\n      Version: 1,\n      Service: request.service.api.serviceId || request.service.api.endpointPrefix,\n      Fqdn: request.httpRequest.endpoint.hostname,\n      UserAgent: request.httpRequest.getUserAgent(),\n    };\n    var response = request.response;\n    if (response.httpResponse.statusCode) {\n      monitoringEvent.HttpStatusCode = response.httpResponse.statusCode;\n    }\n    if (\n      !request._unAuthenticated &&\n      request.service.config.credentials &&\n      request.service.config.credentials.accessKeyId\n    ) {\n      monitoringEvent.AccessKey = request.service.config.credentials.accessKeyId;\n    }\n    if (!response.httpResponse.headers) return monitoringEvent;\n    if (request.httpRequest.headers['x-amz-security-token']) {\n      monitoringEvent.SessionToken = request.httpRequest.headers['x-amz-security-token'];\n    }\n    if (response.httpResponse.headers['x-amzn-requestid']) {\n      monitoringEvent.XAmznRequestId = response.httpResponse.headers['x-amzn-requestid'];\n    }\n    if (response.httpResponse.headers['x-amz-request-id']) {\n      monitoringEvent.XAmzRequestId = response.httpResponse.headers['x-amz-request-id'];\n    }\n    if (response.httpResponse.headers['x-amz-id-2']) {\n      monitoringEvent.XAmzId2 = response.httpResponse.headers['x-amz-id-2'];\n    }\n    return monitoringEvent;\n  },\n\n  /**\n   * Add metrics of failed request.\n   * @api private\n   */\n  attemptFailEvent: function attemptFailEvent(request) {\n    var monitoringEvent = this.apiAttemptEvent(request);\n    var response = request.response;\n    var error = response.error;\n    if (response.httpResponse.statusCode > 299 ) {\n      if (error.code) monitoringEvent.AwsException = error.code;\n      if (error.message) monitoringEvent.AwsExceptionMessage = error.message;\n    } else {\n      if (error.code || error.name) monitoringEvent.SdkException = error.code || error.name;\n      if (error.message) monitoringEvent.SdkExceptionMessage = error.message;\n    }\n    return monitoringEvent;\n  },\n\n  /**\n   * Attach listeners to request object to fetch metrics of each request\n   * and emit data object through \\'ApiCall\\' and \\'ApiCallAttempt\\' events.\n   * @api private\n   */\n  attachMonitoringEmitter: function attachMonitoringEmitter(request) {\n    var attemptTimestamp; //timestamp marking the beginning of a request attempt\n    var attemptStartRealTime; //Start time of request attempt. Used to calculating attemptLatency\n    var attemptLatency; //latency from request sent out to http response reaching SDK\n    var callStartRealTime; //Start time of API call. Used to calculating API call latency\n    var attemptCount = 0; //request.retryCount is not reliable here\n    var region; //region cache region for each attempt since it can be updated in plase (e.g. s3)\n    var callTimestamp; //timestamp when the request is created\n    var self = this;\n    var addToHead = true;\n\n    request.on('validate', function () {\n      callStartRealTime = AWS.util.realClock.now();\n      callTimestamp = Date.now();\n    }, addToHead);\n    request.on('sign', function () {\n      attemptStartRealTime = AWS.util.realClock.now();\n      attemptTimestamp = Date.now();\n      region = request.httpRequest.region;\n      attemptCount++;\n    }, addToHead);\n    request.on('validateResponse', function() {\n      attemptLatency = Math.round(AWS.util.realClock.now() - attemptStartRealTime);\n    });\n    request.addNamedListener('API_CALL_ATTEMPT', 'success', function API_CALL_ATTEMPT() {\n      var apiAttemptEvent = self.apiAttemptEvent(request);\n      apiAttemptEvent.Timestamp = attemptTimestamp;\n      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;\n      apiAttemptEvent.Region = region;\n      self.emit('apiCallAttempt', [apiAttemptEvent]);\n    });\n    request.addNamedListener('API_CALL_ATTEMPT_RETRY', 'retry', function API_CALL_ATTEMPT_RETRY() {\n      var apiAttemptEvent = self.attemptFailEvent(request);\n      apiAttemptEvent.Timestamp = attemptTimestamp;\n      //attemptLatency may not be available if fail before response\n      attemptLatency = attemptLatency ||\n        Math.round(AWS.util.realClock.now() - attemptStartRealTime);\n      apiAttemptEvent.AttemptLatency = attemptLatency >= 0 ? attemptLatency : 0;\n      apiAttemptEvent.Region = region;\n      self.emit('apiCallAttempt', [apiAttemptEvent]);\n    });\n    request.addNamedListener('API_CALL', 'complete', function API_CALL() {\n      var apiCallEvent = self.apiCallEvent(request);\n      apiCallEvent.AttemptCount = attemptCount;\n      if (apiCallEvent.AttemptCount <= 0) return;\n      apiCallEvent.Timestamp = callTimestamp;\n      var latency = Math.round(AWS.util.realClock.now() - callStartRealTime);\n      apiCallEvent.Latency = latency >= 0 ? latency : 0;\n      var response = request.response;\n      if (\n        response.error &&\n        response.error.retryable &&\n        typeof response.retryCount === 'number' &&\n        typeof response.maxRetries === 'number' &&\n        (response.retryCount >= response.maxRetries)\n      ) {\n        apiCallEvent.MaxRetriesExceeded = 1;\n      }\n      self.emit('apiCall', [apiCallEvent]);\n    });\n  },\n\n  /**\n   * Override this method to setup any custom request listeners for each\n   * new request to the service.\n   *\n   * @method_abstract This is an abstract method.\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n  },\n\n  /**\n   * Gets the signer class for a given request\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var version;\n    // get operation authtype if present\n    var operation = null;\n    var authtype = '';\n    if (request) {\n      var operations = request.service.api.operations || {};\n      operation = operations[request.operation] || null;\n      authtype = operation ? operation.authtype : '';\n    }\n    if (this.config.signatureVersion) {\n      version = this.config.signatureVersion;\n    } else if (authtype === 'v4' || authtype === 'v4-unsigned-body') {\n      version = 'v4';\n    } else {\n      version = this.api.signatureVersion;\n    }\n    return AWS.Signers.RequestSigner.getVersion(version);\n  },\n\n  /**\n   * @api private\n   */\n  serviceInterface: function serviceInterface() {\n    switch (this.api.protocol) {\n      case 'ec2': return AWS.EventListeners.Query;\n      case 'query': return AWS.EventListeners.Query;\n      case 'json': return AWS.EventListeners.Json;\n      case 'rest-json': return AWS.EventListeners.RestJson;\n      case 'rest-xml': return AWS.EventListeners.RestXml;\n    }\n    if (this.api.protocol) {\n      throw new Error('Invalid service `protocol\\' ' +\n        this.api.protocol + ' in API config');\n    }\n  },\n\n  /**\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    return resp.httpResponse.statusCode < 300;\n  },\n\n  /**\n   * How many times a failed request should be retried before giving up.\n   * the defaultRetryCount can be overriden by service classes.\n   *\n   * @api private\n   */\n  numRetries: function numRetries() {\n    if (this.config.maxRetries !== undefined) {\n      return this.config.maxRetries;\n    } else {\n      return this.defaultRetryCount;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  retryDelays: function retryDelays(retryCount, err) {\n    return AWS.util.calculateRetryDelay(retryCount, this.config.retryDelayOptions, err);\n  },\n\n  /**\n   * @api private\n   */\n  retryableError: function retryableError(error) {\n    if (this.timeoutError(error)) return true;\n    if (this.networkingError(error)) return true;\n    if (this.expiredCredentialsError(error)) return true;\n    if (this.throttledError(error)) return true;\n    if (error.statusCode >= 500) return true;\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  networkingError: function networkingError(error) {\n    return error.code === 'NetworkingError';\n  },\n\n  /**\n   * @api private\n   */\n  timeoutError: function timeoutError(error) {\n    return error.code === 'TimeoutError';\n  },\n\n  /**\n   * @api private\n   */\n  expiredCredentialsError: function expiredCredentialsError(error) {\n    // TODO : this only handles *one* of the expired credential codes\n    return (error.code === 'ExpiredTokenException');\n  },\n\n  /**\n   * @api private\n   */\n  clockSkewError: function clockSkewError(error) {\n    switch (error.code) {\n      case 'RequestTimeTooSkewed':\n      case 'RequestExpired':\n      case 'InvalidSignatureException':\n      case 'SignatureDoesNotMatch':\n      case 'AuthFailure':\n      case 'RequestInTheFuture':\n        return true;\n      default: return false;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  getSkewCorrectedDate: function getSkewCorrectedDate() {\n    return new Date(Date.now() + this.config.systemClockOffset);\n  },\n\n  /**\n   * @api private\n   */\n  applyClockOffset: function applyClockOffset(newServerTime) {\n    if (newServerTime) {\n      this.config.systemClockOffset = newServerTime - Date.now();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isClockSkewed: function isClockSkewed(newServerTime) {\n    if (newServerTime) {\n      return Math.abs(this.getSkewCorrectedDate().getTime() - newServerTime) >= 300000;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  throttledError: function throttledError(error) {\n    // this logic varies between services\n    if (error.statusCode === 429) return true;\n    switch (error.code) {\n      case 'ProvisionedThroughputExceededException':\n      case 'Throttling':\n      case 'ThrottlingException':\n      case 'RequestLimitExceeded':\n      case 'RequestThrottled':\n      case 'RequestThrottledException':\n      case 'TooManyRequestsException':\n      case 'TransactionInProgressException': //dynamodb\n      case 'EC2ThrottledException':\n        return true;\n      default:\n        return false;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  endpointFromTemplate: function endpointFromTemplate(endpoint) {\n    if (typeof endpoint !== 'string') return endpoint;\n\n    var e = endpoint;\n    e = e.replace(/\\{service\\}/g, this.api.endpointPrefix);\n    e = e.replace(/\\{region\\}/g, this.config.region);\n    e = e.replace(/\\{scheme\\}/g, this.config.sslEnabled ? 'https' : 'http');\n    return e;\n  },\n\n  /**\n   * @api private\n   */\n  setEndpoint: function setEndpoint(endpoint) {\n    this.endpoint = new AWS.Endpoint(endpoint, this.config);\n  },\n\n  /**\n   * @api private\n   */\n  paginationConfig: function paginationConfig(operation, throwException) {\n    var paginator = this.api.operations[operation].paginator;\n    if (!paginator) {\n      if (throwException) {\n        var e = new Error();\n        throw AWS.util.error(e, 'No pagination configuration for ' + operation);\n      }\n      return null;\n    }\n\n    return paginator;\n  }\n});\n\nAWS.util.update(AWS.Service, {\n\n  /**\n   * Adds one method for each operation described in the api configuration\n   *\n   * @api private\n   */\n  defineMethods: function defineMethods(svc) {\n    AWS.util.each(svc.prototype.api.operations, function iterator(method) {\n      if (svc.prototype[method]) return;\n      var operation = svc.prototype.api.operations[method];\n      if (operation.authtype === 'none') {\n        svc.prototype[method] = function (params, callback) {\n          return this.makeUnauthenticatedRequest(method, params, callback);\n        };\n      } else {\n        svc.prototype[method] = function (params, callback) {\n          return this.makeRequest(method, params, callback);\n        };\n      }\n    });\n  },\n\n  /**\n   * Defines a new Service class using a service identifier and list of versions\n   * including an optional set of features (functions) to apply to the class\n   * prototype.\n   *\n   * @param serviceIdentifier [String] the identifier for the service\n   * @param versions [Array<String>] a list of versions that work with this\n   *   service\n   * @param features [Object] an object to attach to the prototype\n   * @return [Class<Service>] the service class defined by this function.\n   */\n  defineService: function defineService(serviceIdentifier, versions, features) {\n    AWS.Service._serviceMap[serviceIdentifier] = true;\n    if (!Array.isArray(versions)) {\n      features = versions;\n      versions = [];\n    }\n\n    var svc = inherit(AWS.Service, features || {});\n\n    if (typeof serviceIdentifier === 'string') {\n      AWS.Service.addVersions(svc, versions);\n\n      var identifier = svc.serviceIdentifier || serviceIdentifier;\n      svc.serviceIdentifier = identifier;\n    } else { // defineService called with an API\n      svc.prototype.api = serviceIdentifier;\n      AWS.Service.defineMethods(svc);\n    }\n    AWS.SequentialExecutor.call(this.prototype);\n    //util.clientSideMonitoring is only available in node\n    if (!this.prototype.publisher && AWS.util.clientSideMonitoring) {\n      var Publisher = AWS.util.clientSideMonitoring.Publisher;\n      var configProvider = AWS.util.clientSideMonitoring.configProvider;\n      var publisherConfig = configProvider();\n      this.prototype.publisher = new Publisher(publisherConfig);\n      if (publisherConfig.enabled) {\n        //if csm is enabled in environment, SDK should send all metrics\n        AWS.Service._clientSideMonitoring = true;\n      }\n    }\n    AWS.SequentialExecutor.call(svc.prototype);\n    AWS.Service.addDefaultMonitoringListeners(svc.prototype);\n    return svc;\n  },\n\n  /**\n   * @api private\n   */\n  addVersions: function addVersions(svc, versions) {\n    if (!Array.isArray(versions)) versions = [versions];\n\n    svc.services = svc.services || {};\n    for (var i = 0; i < versions.length; i++) {\n      if (svc.services[versions[i]] === undefined) {\n        svc.services[versions[i]] = null;\n      }\n    }\n\n    svc.apiVersions = Object.keys(svc.services).sort();\n  },\n\n  /**\n   * @api private\n   */\n  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {\n    var svc = inherit(superclass, {\n      serviceIdentifier: superclass.serviceIdentifier\n    });\n\n    function setApi(api) {\n      if (api.isApi) {\n        svc.prototype.api = api;\n      } else {\n        svc.prototype.api = new Api(api, {\n          serviceIdentifier: superclass.serviceIdentifier\n        });\n      }\n    }\n\n    if (typeof version === 'string') {\n      if (apiConfig) {\n        setApi(apiConfig);\n      } else {\n        try {\n          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));\n        } catch (err) {\n          throw AWS.util.error(err, {\n            message: 'Could not find API configuration ' +\n              superclass.serviceIdentifier + '-' + version\n          });\n        }\n      }\n      if (!Object.prototype.hasOwnProperty.call(superclass.services, version)) {\n        superclass.apiVersions = superclass.apiVersions.concat(version).sort();\n      }\n      superclass.services[version] = svc;\n    } else {\n      setApi(version);\n    }\n\n    AWS.Service.defineMethods(svc);\n    return svc;\n  },\n\n  /**\n   * @api private\n   */\n  hasService: function(identifier) {\n    return Object.prototype.hasOwnProperty.call(AWS.Service._serviceMap, identifier);\n  },\n\n  /**\n   * @param attachOn attach default monitoring listeners to object\n   *\n   * Each monitoring event should be emitted from service client to service constructor prototype and then\n   * to global service prototype like bubbling up. These default monitoring events listener will transfer\n   * the monitoring events to the upper layer.\n   * @api private\n   */\n  addDefaultMonitoringListeners: function addDefaultMonitoringListeners(attachOn) {\n    attachOn.addNamedListener('MONITOR_EVENTS_BUBBLE', 'apiCallAttempt', function EVENTS_BUBBLE(event) {\n      var baseClass = Object.getPrototypeOf(attachOn);\n      if (baseClass._events) baseClass.emit('apiCallAttempt', [event]);\n    });\n    attachOn.addNamedListener('CALL_EVENTS_BUBBLE', 'apiCall', function CALL_EVENTS_BUBBLE(event) {\n      var baseClass = Object.getPrototypeOf(attachOn);\n      if (baseClass._events) baseClass.emit('apiCall', [event]);\n    });\n  },\n\n  /**\n   * @api private\n   */\n  _serviceMap: {}\n});\n\nAWS.util.mixin(AWS.Service, AWS.SequentialExecutor);\n\n/**\n * @api private\n */\nmodule.exports = AWS.Service;\n"]},"metadata":{},"sourceType":"script"}