"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const archiver_1 = __importDefault(require("archiver"));
const pyUtils_1 = require("./pyUtils");
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
async function pythonPackage(context, params) {
    if (!params.lastPackageTimestamp || params.lastBuildTimestamp > params.lastPackageTimestamp) {
        const file = fs_extra_1.default.createWriteStream(params.dstFilename);
        const packageHash = await context.amplify.hashDir(params.srcRoot, ['dist']);
        return new Promise(async (resolve, reject) => {
            file.on('close', () => {
                resolve({ packageHash });
            });
            file.on('error', err => {
                reject(new Error(`Failed to zip with error: [${err}]`));
            });
            const zip = archiver_1.default.create('zip', {});
            zip.pipe(file);
            zip.glob('**/*', {
                cwd: path_1.default.join(params.srcRoot, 'src'),
                ignore: ['**/dist/**', '**/__pycache__/**'],
            });
            zip.directory(await pyUtils_1.getPipenvDir(params.srcRoot), false);
            zip.finalize();
        });
    }
    return Promise.resolve({});
}
exports.pythonPackage = pythonPackage;
//# sourceMappingURL=packageUtils.js.map