"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = __importDefault(require("glob"));
const execa = __importStar(require("execa"));
const constants_1 = require("../constants");
exports.build = async (request) => {
    return exports.buildCore(request, 'Release');
};
exports.buildCore = async (request, configuration) => {
    const distPath = path_1.default.join(request.srcRoot, 'dist');
    const sourceFolder = path_1.default.join(request.srcRoot, 'src');
    if (configuration === 'Debug' ||
        !request.lastBuildTimestamp ||
        !fs_extra_1.default.existsSync(distPath) ||
        isBuildStale(sourceFolder, request.lastBuildTimestamp)) {
        if (!fs_extra_1.default.existsSync(distPath)) {
            fs_extra_1.default.mkdirSync(distPath);
        }
        const buildArguments = [];
        switch (configuration) {
            case 'Release':
                buildArguments.push('publish', '-c', configuration, '-o', distPath);
                break;
            case 'Debug':
                buildArguments.push('build', '-c', configuration, '-p:CopyLocalLockFileAssemblies=true');
                break;
            default:
                throw new Error(`Unexpected configuration '${configuration}'`);
        }
        const result = execa.sync(constants_1.executableName, buildArguments, {
            cwd: sourceFolder,
        });
        if (result.exitCode !== 0) {
            throw new Error(`${constants_1.executableName} build failed, exit code was ${result.exitCode}`);
        }
        return { rebuilt: true };
    }
    return { rebuilt: false };
};
const isBuildStale = (sourceFolder, lastBuildTimestamp) => {
    if (!(lastBuildTimestamp instanceof Date && !isNaN(lastBuildTimestamp))) {
        return true;
    }
    const dirTime = new Date(fs_extra_1.default.statSync(sourceFolder).mtime);
    if (dirTime > lastBuildTimestamp) {
        return true;
    }
    const fileUpdatedAfterLastBuild = glob_1.default
        .sync('**/*', { cwd: sourceFolder, ignore: ['bin', 'obj', '+(bin|obj)/**/*'] })
        .find(file => new Date(fs_extra_1.default.statSync(path_1.default.join(sourceFolder, file)).mtime) > lastBuildTimestamp);
    return !!fileUpdatedAfterLastBuild;
};
//# sourceMappingURL=build.js.map