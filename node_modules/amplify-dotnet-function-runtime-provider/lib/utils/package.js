"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const execa = __importStar(require("execa"));
const constants_1 = require("../constants");
exports.packageAssemblies = async (request, context) => {
    const distPath = path_1.default.join(request.srcRoot, 'dist');
    const sourcePath = path_1.default.join(request.srcRoot, 'src');
    if (fs_extra_1.default.existsSync(request.dstFilename)) {
        fs_extra_1.default.removeSync(request.dstFilename);
    }
    const packageHash = (await context.amplify.hashDir(distPath, []));
    const result = execa.sync(constants_1.executableName, ['lambda', 'package', '--framework', 'netcoreapp3.1', '--configuration', 'Release', '--output-package', request.dstFilename], {
        cwd: sourcePath,
    });
    if (result.exitCode !== 0) {
        throw new Error(`Packaging failed. Exit code was ${result.exitCode}`);
    }
    return {
        packageHash: packageHash,
    };
};
//# sourceMappingURL=package.js.map