"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const execa = __importStar(require("execa"));
const build_1 = require("./build");
const constants_1 = require("../constants");
exports.invoke = async (request) => {
    await build_1.buildCore({
        env: request.env,
        runtime: request.runtime,
        srcRoot: request.srcRoot,
        lastBuildTimestamp: request.lastBuildTimestamp,
    }, 'Debug');
    const sourcePath = path_1.default.join(request.srcRoot, 'src');
    let result;
    let tempDir = '';
    let eventFile = '';
    try {
        tempDir = fs_extra_1.default.mkdtempSync(path_1.default.join(request.srcRoot, 'amplify'));
        eventFile = path_1.default.join(tempDir, 'event.json');
        fs_extra_1.default.writeFileSync(eventFile, request.event);
        result = execa.sync(constants_1.executableName, ['lambda-test-tool-3.1', '--no-ui', '--function-handler', request.handler, '--payload', eventFile, '--pause-exit', 'false'], {
            cwd: sourcePath,
            env: {
                ...process.env,
                ...request.envVars,
            },
        });
    }
    finally {
        if (tempDir && fs_extra_1.default.existsSync(tempDir)) {
            fs_extra_1.default.emptyDirSync(tempDir);
            fs_extra_1.default.removeSync(tempDir);
        }
    }
    if (result.exitCode !== 0) {
        throw new Error(`Test failed, exit code was ${result.exitCode}`);
    }
    return result.stdout;
};
//# sourceMappingURL=invoke.js.map