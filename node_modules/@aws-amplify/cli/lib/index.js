"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeAmplifyCommand = exports.execute = exports.run = void 0;
const path = __importStar(require("path"));
const plugin_manager_1 = require("./plugin-manager");
const input_manager_1 = require("./input-manager");
const context_manager_1 = require("./context-manager");
const context_extensions_1 = require("./context-extensions");
const execution_manager_1 = require("./execution-manager");
const constants_1 = require("./domain/constants");
const project_config_version_check_1 = require("./project-config-version-check");
const update_notifier_1 = __importDefault(require("update-notifier"));
const pkg = require('../package.json');
const notifier = update_notifier_1.default({ pkg });
const events_1 = require("events");
const rewireDeprecatedCommands_1 = require("./rewireDeprecatedCommands");
events_1.EventEmitter.defaultMaxListeners = 1000;
async function run() {
    try {
        let pluginPlatform = await plugin_manager_1.getPluginPlatform();
        let input = input_manager_1.getCommandLineInput(pluginPlatform);
        if (input.command !== 'help') {
            notifier.notify({ defer: false, isGlobal: true });
        }
        let verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        if (!verificationResult.verified) {
            if (verificationResult.message) {
                context_extensions_1.print.warning(verificationResult.message);
            }
            pluginPlatform = await plugin_manager_1.scan();
            input = input_manager_1.getCommandLineInput(pluginPlatform);
            verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        }
        if (!verificationResult.verified) {
            if (verificationResult.helpCommandAvailable) {
                input.command = constants_1.constants.HELP;
            }
            else {
                throw new Error(verificationResult.message);
            }
        }
        rewireDeprecatedCommands_1.rewireDeprecatedCommands(input);
        const context = context_manager_1.constructContext(pluginPlatform, input);
        await project_config_version_check_1.checkProjectConfigVersion(context);
        await execution_manager_1.executeCommand(context);
        context_manager_1.persistContext(context);
        if (input.command === 'help') {
            notifier.notify({ defer: true, isGlobal: true });
        }
        return 0;
    }
    catch (e) {
        if (e.message) {
            context_extensions_1.print.error(e.message);
        }
        if (e.stack) {
            context_extensions_1.print.info(e.stack);
        }
        process.exit(1);
    }
}
exports.run = run;
async function execute(input) {
    try {
        let pluginPlatform = await plugin_manager_1.getPluginPlatform();
        let verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        if (!verificationResult.verified) {
            if (verificationResult.message) {
                context_extensions_1.print.warning(verificationResult.message);
            }
            pluginPlatform = await plugin_manager_1.scan();
            verificationResult = input_manager_1.verifyInput(pluginPlatform, input);
        }
        if (!verificationResult.verified) {
            if (verificationResult.helpCommandAvailable) {
                input.command = constants_1.constants.HELP;
            }
            else {
                throw new Error(verificationResult.message);
            }
        }
        const context = context_manager_1.constructContext(pluginPlatform, input);
        await execution_manager_1.executeCommand(context);
        context_manager_1.persistContext(context);
        return 0;
    }
    catch (e) {
        if (e.message) {
            context_extensions_1.print.error(e.message);
        }
        if (e.stack) {
            context_extensions_1.print.info(e.stack);
        }
        return 1;
    }
}
exports.execute = execute;
async function executeAmplifyCommand(context) {
    const commandPath = path.normalize(path.join(__dirname, 'commands', context.input.command));
    const commandModule = require(commandPath);
    await commandModule.run(context);
}
exports.executeAmplifyCommand = executeAmplifyCommand;
//# sourceMappingURL=index.js.map