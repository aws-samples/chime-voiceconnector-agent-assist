"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validPluginName = exports.verifyPlugin = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const constants_1 = require("../domain/constants");
const readJsonFile_1 = require("../utils/readJsonFile");
const plugin_verification_result_1 = require("../domain/plugin-verification-result");
async function verifyPlugin(pluginDirPath) {
    let exists = await fs_extra_1.default.pathExists(pluginDirPath);
    if (exists) {
        const stat = await fs_extra_1.default.stat(pluginDirPath);
        if (!stat.isDirectory()) {
            exists = false;
        }
    }
    if (exists) {
        return verifyNodePackage(pluginDirPath);
    }
    return new plugin_verification_result_1.PluginVerificationResult(false, plugin_verification_result_1.PluginVerificationError.PluginDirPathNotExist);
}
exports.verifyPlugin = verifyPlugin;
async function validPluginName(pluginName) {
    const result = {
        isValid: true,
    };
    const corePluginJson = await readJsonFile_1.readJsonFile(path_1.default.normalize(path_1.default.join(__dirname, '../../amplify-plugin.json')));
    if (corePluginJson && corePluginJson.commands && corePluginJson.commands.includes(pluginName)) {
        result.isValid = false;
        result.message = 'Amplify CLI core command names can not be used as plugin name';
    }
    return result;
}
exports.validPluginName = validPluginName;
async function verifyNodePackage(pluginDirPath) {
    const pluginPackageJsonFilePath = path_1.default.join(pluginDirPath, constants_1.constants.PACKAGEJSON_FILE_NAME);
    try {
        const packageJson = await readJsonFile_1.readJsonFile(pluginPackageJsonFilePath);
        const context = {
            pluginDirPath,
        };
        const result = await verifyAmplifyManifest(context);
        result.packageJson = packageJson;
        return result;
    }
    catch (err) {
        return new plugin_verification_result_1.PluginVerificationResult(false, plugin_verification_result_1.PluginVerificationError.InvalidNodePackage, err);
    }
}
async function verifyAmplifyManifest(context) {
    const pluginManifestFilePath = path_1.default.join(context.pluginDirPath, constants_1.constants.MANIFEST_FILE_NAME);
    let exists = await fs_extra_1.default.pathExists(pluginManifestFilePath);
    if (exists) {
        const stat = await fs_extra_1.default.stat(pluginManifestFilePath);
        exists = stat.isFile();
    }
    if (!exists) {
        return new plugin_verification_result_1.PluginVerificationResult(false, plugin_verification_result_1.PluginVerificationError.MissingManifest);
    }
    try {
        const manifest = (await readJsonFile_1.readJsonFile(pluginManifestFilePath));
        const pluginNameValidationResult = await validPluginName(manifest.name);
        if (pluginNameValidationResult.isValid) {
            context.manifest = manifest;
            let result = verifyCommands(context);
            result = result.verified ? verifyEventHandlers(context) : result;
            result.manifest = manifest;
            return result;
        }
        return new plugin_verification_result_1.PluginVerificationResult(false, plugin_verification_result_1.PluginVerificationError.InvalidManifest, pluginNameValidationResult.message);
    }
    catch (err) {
        return new plugin_verification_result_1.PluginVerificationResult(false, plugin_verification_result_1.PluginVerificationError.InvalidManifest, err);
    }
}
function verifyCommands(context) {
    return new plugin_verification_result_1.PluginVerificationResult(true);
}
function verifyEventHandlers(context) {
    let isVerified = true;
    if (context.manifest.eventHandlers && context.manifest.eventHandlers.length > 0) {
        if (!context.pluginModule) {
            context.pluginModule = require(context.pluginDirPath);
        }
        isVerified =
            context.pluginModule.hasOwnProperty(constants_1.constants.HandleAmplifyEvent) &&
                typeof context.pluginModule[constants_1.constants.HandleAmplifyEvent] === 'function';
    }
    if (isVerified) {
        return new plugin_verification_result_1.PluginVerificationResult(true);
    }
    return new plugin_verification_result_1.PluginVerificationResult(false, plugin_verification_result_1.PluginVerificationError.MissingHandleAmplifyEventMethod);
}
//# sourceMappingURL=verify-plugin.js.map