import { PersistentModel, QueryOne } from '../../types';
declare class AsyncStorageDatabase {
    save<T extends PersistentModel>(item: T, storeName: string): Promise<void>;
    get<T extends PersistentModel>(id: string, storeName: string): Promise<T>;
    getOne(firstOrLast: QueryOne, storeName: string): Promise<any>;
    /**
     * This function gets all the records stored in async storage for a particular storeName
     * It uses getAllKeys to first retrieve the keys and then filters based on the prefix
     * It then loads all the records for that filtered set of keys using multiGet()
     */
    getAll<T extends PersistentModel>(storeName: string): Promise<T[]>;
    delete(id: string, storeName: string): Promise<void>;
    /**
     * Clear the AsyncStorage of all DataStore entries
     */
    clear(): Promise<void>;
    private getKeyForItem;
    private getKeyForStore;
    private getKeyPrefixForStoreItems;
}
export default AsyncStorageDatabase;
