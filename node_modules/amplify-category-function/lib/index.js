"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleAmplifyEvent = exports.executeAmplifyCommand = exports.getInvoker = exports.initEnv = exports.getPermissionPolicies = exports.migrate = exports.console = exports.update = exports.add = void 0;
const path_1 = __importDefault(require("path"));
const constants_1 = require("./constants");
const constants_2 = require("./provider-utils/awscloudformation/utils/constants");
const promise_sequential_1 = __importDefault(require("promise-sequential"));
const awscloudformation_1 = require("./provider-utils/awscloudformation");
async function add(context, providerName, service, parameters) {
    const options = {
        service,
        providerPlugin: providerName,
        build: true,
    };
    const providerController = require(`./provider-utils/${providerName}/index`);
    if (!providerController) {
        context.print.error('Provider not configured for this category');
        return;
    }
    return providerController.addResource(context, constants_1.category, service, options, parameters);
}
exports.add = add;
async function update(context, providerName, service, parameters, resourceToUpdate) {
    const providerController = require(`./provider-utils/${providerName}/index`);
    if (!providerController) {
        context.print.error('Provider not configured for this category');
        return;
    }
    return providerController.updateResource(context, constants_1.category, service, parameters, resourceToUpdate);
}
exports.update = update;
async function console(context) {
    context.print.info(`to be implemented: ${constants_1.category} console`);
}
exports.console = console;
async function migrate(context) {
    const { projectPath, amplifyMeta } = context.migrationInfo;
    const migrateResourcePromises = [];
    Object.keys(amplifyMeta).forEach(categoryName => {
        if (categoryName === constants_1.category) {
            Object.keys(amplifyMeta[constants_1.category]).forEach(resourceName => {
                try {
                    const providerController = require(`./provider-utils/${amplifyMeta[constants_1.category][resourceName].providerPlugin}/index`);
                    if (providerController) {
                        migrateResourcePromises.push(providerController.migrateResource(context, projectPath, amplifyMeta[constants_1.category][resourceName].service, resourceName));
                    }
                    else {
                        context.print.error(`Provider not configured for ${constants_1.category}: ${resourceName}`);
                    }
                }
                catch (e) {
                    context.print.warning(`Could not run migration for ${constants_1.category}: ${resourceName}`);
                    throw e;
                }
            });
        }
    });
    await Promise.all(migrateResourcePromises);
}
exports.migrate = migrate;
async function getPermissionPolicies(context, resourceOpsMapping) {
    const amplifyMetaFilePath = context.amplify.pathManager.getAmplifyMetaFilePath();
    const amplifyMeta = context.amplify.readJsonFile(amplifyMetaFilePath);
    const permissionPolicies = [];
    const resourceAttributes = [];
    Object.keys(resourceOpsMapping).forEach(resourceName => {
        try {
            const providerController = require(`./provider-utils/${amplifyMeta[constants_1.category][resourceName].providerPlugin}/index`);
            if (providerController) {
                const { policy, attributes } = providerController.getPermissionPolicies(context, amplifyMeta[constants_1.category][resourceName].service, resourceName, resourceOpsMapping[resourceName]);
                permissionPolicies.push(policy);
                resourceAttributes.push({ resourceName, attributes, category: constants_1.category });
            }
            else {
                context.print.error(`Provider not configured for ${constants_1.category}: ${resourceName}`);
            }
        }
        catch (e) {
            context.print.warning(`Could not get policies for ${constants_1.category}: ${resourceName}`);
            throw e;
        }
    });
    return { permissionPolicies, resourceAttributes };
}
exports.getPermissionPolicies = getPermissionPolicies;
async function initEnv(context) {
    const { amplify } = context;
    const { resourcesToBeCreated, resourcesToBeDeleted, resourcesToBeUpdated } = await amplify.getResourceStatus('function');
    resourcesToBeDeleted.forEach(authResource => {
        amplify.removeResourceParameters(context, 'function', authResource.resourceName);
    });
    const tasks = resourcesToBeCreated.concat(resourcesToBeUpdated);
    const functionTasks = tasks.map(functionResource => {
        const { resourceName } = functionResource;
        return async () => {
            const config = await awscloudformation_1.updateConfigOnEnvInit(context, 'function', resourceName);
            context.amplify.saveEnvResourceParameters(context, 'function', resourceName, config);
        };
    });
    await promise_sequential_1.default(functionTasks);
}
exports.initEnv = initEnv;
async function getInvoker(context, params) {
    const resourcePath = path_1.default.join(context.amplify.pathManager.getBackendDirPath(), constants_2.categoryName, params.resourceName);
    const breadcrumbs = context.amplify.readBreadcrumbs(context, constants_2.categoryName, params.resourceName);
    const runtimeManager = await context.amplify.loadRuntimePlugin(context, breadcrumbs.pluginId);
    const lastBuildTimestampStr = (await context.amplify.getResourceStatus(constants_1.category, params.resourceName)).allResources.find(resource => resource.resourceName === params.resourceName).lastBuildTimeStamp;
    return async (request) => await runtimeManager.invoke({
        handler: params.handler,
        event: JSON.stringify(request.event),
        env: context.amplify.getEnvInfo().envName,
        runtime: breadcrumbs.functionRuntime,
        srcRoot: resourcePath,
        envVars: params.envVars,
        lastBuildTimestamp: lastBuildTimestampStr ? new Date(lastBuildTimestampStr) : undefined,
    });
}
exports.getInvoker = getInvoker;
async function executeAmplifyCommand(context) {
    let commandPath = path_1.default.normalize(path_1.default.join(__dirname, 'commands'));
    if (context.input.command === 'help') {
        commandPath = path_1.default.join(commandPath, constants_1.category);
    }
    else {
        commandPath = path_1.default.join(commandPath, constants_1.category, context.input.command);
    }
    const commandModule = require(commandPath);
    await commandModule.run(context);
}
exports.executeAmplifyCommand = executeAmplifyCommand;
async function handleAmplifyEvent(context, args) {
    context.print.info(`${constants_1.category} handleAmplifyEvent to be implemented`);
    context.print.info(`Received event args ${args}`);
}
exports.handleAmplifyEvent = handleAmplifyEvent;
//# sourceMappingURL=index.js.map