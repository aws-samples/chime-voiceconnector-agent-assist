"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateConfigOnEnvInit = exports.getPermissionPolicies = exports.migrateResource = exports.updateResource = exports.addResource = void 0;
const supported_services_1 = require("../supported-services");
const constants_1 = require("./utils/constants");
const storeResources_1 = require("./utils/storeResources");
const lodash_1 = __importDefault(require("lodash"));
const funcParamsUtils_1 = require("./utils/funcParamsUtils");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
async function addResource(context, category, service, options, parameters) {
    const serviceConfig = supported_services_1.supportedServices[service];
    if (!serviceConfig) {
        throw `amplify-category-function is not configured to provide service type ${service}`;
    }
    let completeParams;
    if (!parameters || (!funcParamsUtils_1.isComplete(parameters) && !('trigger' in parameters))) {
        let funcParams = {
            providerContext: {
                provider: constants_1.provider,
                service: constants_1.serviceName,
                projectName: context.amplify.getProjectDetails().projectConfig.projectName,
            },
        };
        funcParams = funcParamsUtils_1.merge(funcParams, parameters);
        funcParams = funcParamsUtils_1.merge(funcParams, { cloudResourceTemplatePath: serviceConfig.cfnFilename });
        await serviceConfig.walkthroughs.createWalkthrough(context, funcParams);
        completeParams = funcParamsUtils_1.convertToComplete(funcParams);
    }
    else {
        completeParams = parameters;
    }
    storeResources_1.copyFunctionResources(context, completeParams);
    if (!completeParams.skipEdit) {
        await openEditor(context, category, completeParams);
    }
    return completeParams.resourceName;
}
exports.addResource = addResource;
async function updateResource(context, category, service, parameters, resourceToUpdate) {
    let answers;
    const serviceConfig = supported_services_1.supportedServices[service];
    if (!serviceConfig) {
        throw `amplify-category-function is not configured to provide service type ${service}`;
    }
    let result;
    if (!parameters) {
        result = await serviceConfig.walkthroughs.updateWalkthrough(context, resourceToUpdate);
    }
    else {
        result = { answers: parameters };
    }
    if (result.answers) {
        ({ answers } = result);
    }
    else {
        answers = result;
    }
    if (!answers.resourceName) {
        answers.resourceName = answers.functionName;
    }
    if (result.dependsOn) {
        context.amplify.updateamplifyMetaAfterResourceUpdate(category, answers.resourceName, 'dependsOn', result.dependsOn);
    }
    if (answers.parameters) {
        let cloudWatchParams = lodash_1.default.pick(answers.parameters, ['CloudWatchRule']);
        let params = lodash_1.default.omit(answers.parameters, ['CloudWatchRule']);
        storeResources_1.createParametersFile(context, params, answers.resourceName);
        storeResources_1.createParametersFile(context, cloudWatchParams, answers.resourceName, 'parameters.json');
    }
    if (answers.trigger) {
        const parametersFilePath = `${context.amplify.pathManager.getBackendDirPath()}/function/${resourceToUpdate}/parameters.json`;
        let previousParameters;
        if (fs_extra_1.default.existsSync(parametersFilePath)) {
            previousParameters = context.amplify.readJsonFile(parametersFilePath);
            if (previousParameters.trigger === true) {
                answers = Object.assign(answers, previousParameters);
            }
        }
        storeResources_1.createParametersFile(context, parameters, answers.resourceName);
    }
    if (!parameters || (parameters && !parameters.skipEdit)) {
        const breadcrumb = context.amplify.readBreadcrumbs(context, constants_1.categoryName, answers.resourceName);
        answers.functionTemplate = {
            defaultEditorFile: breadcrumb.defaultEditorFile,
        };
        await openEditor(context, category, answers);
    }
    return answers.resourceName;
}
exports.updateResource = updateResource;
async function openEditor(context, category, options) {
    let displayName = 'local';
    if ('trigger' in options) {
        displayName = options.resourceName;
    }
    const targetDir = context.amplify.pathManager.getBackendDirPath();
    if (await context.amplify.confirmPrompt.run(`Do you want to edit the ${displayName} lambda function now?`)) {
        let targetFile = '';
        if (options.functionTemplate) {
            const template = options.functionTemplate;
            if (template.defaultEditorFile) {
                targetFile = template.defaultEditorFile;
            }
            else if (template.sourceFiles && template.sourceFiles.length > 0) {
                let srcFile = options.functionTemplate.sourceFiles[0];
                targetFile = lodash_1.default.get(options.functionTemplate, ['destMap', srcFile], srcFile);
            }
        }
        const target = path_1.default.join(targetDir, category, options.resourceName, targetFile);
        await context.amplify.openEditor(context, target);
    }
}
function migrateResource(context, projectPath, service, resourceName) {
    const serviceConfig = supported_services_1.supportedServices[service];
    if (!serviceConfig.walkthroughs.migrate) {
        context.print.info(`No migration required for ${resourceName}`);
        return;
    }
    return serviceConfig.walkthroughs.migrate(context, projectPath, resourceName);
}
exports.migrateResource = migrateResource;
function getPermissionPolicies(context, service, resourceName, crudOptions) {
    const serviceConfig = supported_services_1.supportedServices[service];
    if (!serviceConfig.walkthroughs.getIAMPolicies) {
        context.print.info(`No policies found for ${resourceName}`);
        return;
    }
    return serviceConfig.walkthroughs.getIAMPolicies(resourceName, crudOptions);
}
exports.getPermissionPolicies = getPermissionPolicies;
function isInHeadlessMode(context) {
    return context.exeInfo.inputParams.yes;
}
function getHeadlessParams(context, service) {
    const { inputParams = {} } = context.exeInfo;
    return inputParams.categories && inputParams.categories.function && Array.isArray(inputParams.categories.function)
        ? inputParams.categories.function.find(i => i.resourceName === service) || {}
        : {};
}
async function updateConfigOnEnvInit(context, category, service) {
    const srvcMetaData = supported_services_1.supportedServices.Lambda;
    const providerPlugin = context.amplify.getPluginInstance(context, srvcMetaData.provider);
    const functionParametersPath = `${context.amplify.pathManager.getBackendDirPath()}/function/${service}/function-parameters.json`;
    let resourceParams = {};
    const functionParametersExists = fs_extra_1.default.existsSync(functionParametersPath);
    if (functionParametersExists) {
        resourceParams = context.amplify.readJsonFile(functionParametersPath);
    }
    let envParams = {};
    if (isInHeadlessMode(context)) {
        const functionParams = getHeadlessParams(context, service);
        return functionParams;
    }
    if (resourceParams.trigger === true) {
        envParams = await initTriggerEnvs(context, resourceParams, providerPlugin, envParams, srvcMetaData);
    }
    return envParams;
}
exports.updateConfigOnEnvInit = updateConfigOnEnvInit;
async function initTriggerEnvs(context, resourceParams, providerPlugin, envParams, srvcMetaData) {
    if (resourceParams && resourceParams.parentStack && resourceParams.parentResource) {
        const parentResourceParams = providerPlugin.loadResourceParameters(context, resourceParams.parentStack, resourceParams.parentResource);
        const triggers = typeof parentResourceParams.triggers === 'string' ? JSON.parse(parentResourceParams.triggers) : parentResourceParams.triggers;
        const currentTrigger = resourceParams.resourceName.replace(parentResourceParams.resourceName, '');
        if (currentTrigger && currentTrigger !== resourceParams.resourceName) {
            const currentEnvVariables = context.amplify.loadEnvResourceParameters(context, 'function', resourceParams.resourceName);
            const triggerPath = `${__dirname}/../../../../amplify-category-${resourceParams.parentStack}/provider-utils/${srvcMetaData.provider}/triggers/${currentTrigger}`;
            if (context.commandName !== 'checkout') {
                envParams = await context.amplify.getTriggerEnvInputs(context, triggerPath, currentTrigger, triggers[currentTrigger], currentEnvVariables);
            }
            else {
                envParams = currentEnvVariables;
            }
        }
    }
    return envParams;
}
module.exports = {
    addResource,
    updateResource,
    migrateResource,
    getPermissionPolicies,
    updateConfigOnEnvInit,
};
//# sourceMappingURL=index.js.map