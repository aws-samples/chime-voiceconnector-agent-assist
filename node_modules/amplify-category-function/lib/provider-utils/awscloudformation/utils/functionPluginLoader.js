"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPluginFromFactory = exports.runtimeWalkthrough = exports.templateWalkthrough = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
async function templateWalkthrough(context, params) {
    const selectionOptions = {
        pluginType: 'functionTemplate',
        listOptionsField: 'templates',
        predicate: condition => {
            return (condition.provider === params.providerContext.provider &&
                condition.service === params.providerContext.service &&
                (condition.runtime === params.runtime.value ||
                    (Array.isArray(condition.runtime) && condition.runtime.includes(params.runtime.value))));
        },
        selectionPrompt: 'Choose the function template that you want to use:',
        notFoundMessage: `No ${params.runtime.name} ${params.providerContext.service} templates found`,
    };
    const selection = await getSelectionFromContributors(context, selectionOptions);
    const plugin = await loadPluginFromFactory(selection.pluginPath, 'functionTemplateContributorFactory', context);
    const contributionRequest = {
        selection: selection.value,
        contributionContext: {
            runtime: params.runtime,
            functionName: params.functionName,
            resourceName: params.resourceName,
        },
    };
    return await plugin.contribute(contributionRequest);
}
exports.templateWalkthrough = templateWalkthrough;
async function runtimeWalkthrough(context, params) {
    const selectionOptions = {
        pluginType: 'functionRuntime',
        listOptionsField: 'runtimes',
        predicate: condition => {
            return condition.provider === params.providerContext.provider && condition.service === params.providerContext.service;
        },
        selectionPrompt: 'Choose the function runtime that you want to use:',
        notFoundMessage: `No runtimes found for provider ${params.providerContext.provider} and service ${params.providerContext.service}`,
    };
    const selection = await getSelectionFromContributors(context, selectionOptions);
    const plugin = await loadPluginFromFactory(selection.pluginPath, 'functionRuntimeContributorFactory', context);
    const depCheck = await plugin.checkDependencies(selection.value);
    if (!depCheck.hasRequiredDependencies) {
        context.print.warning(depCheck.errorMessage || 'Some dependencies required for building and packaging this runtime are not installed');
    }
    const contributionRequest = {
        selection: selection.value,
        contributionContext: {
            runtime: params.runtime,
            functionName: params.functionName,
            resourceName: params.resourceName,
        },
    };
    const contribution = await plugin.contribute(contributionRequest);
    return {
        ...contribution,
        runtimePluginId: selection.pluginId,
    };
}
exports.runtimeWalkthrough = runtimeWalkthrough;
async function getSelectionFromContributors(context, selectionOptions) {
    const notFoundSuffix = 'You can download and install additional plugins then rerun this command';
    const templateProviders = context.pluginPlatform.plugins[selectionOptions.pluginType];
    if (!templateProviders) {
        context.print.error(selectionOptions.notFoundMessage);
        context.print.error(notFoundSuffix);
        throw new Error('No plugins found for function configuration');
    }
    const selectionMap = new Map();
    const selections = templateProviders
        .filter(meta => selectionOptions.predicate(meta.manifest[selectionOptions.pluginType].conditions))
        .map(meta => {
        const packageLoc = meta.packageLocation;
        const pluginId = meta.manifest[selectionOptions.pluginType].pluginId;
        meta.manifest[selectionOptions.pluginType][selectionOptions.listOptionsField].forEach(op => {
            selectionMap.set(op.value, { path: packageLoc, pluginId });
        });
        return meta;
    })
        .map(meta => meta.manifest[selectionOptions.pluginType])
        .map(contributes => contributes[selectionOptions.listOptionsField])
        .reduce((acc, it) => acc.concat(it), [])
        .sort((a, b) => a.name.localeCompare(b.name));
    let selection;
    if (selections.length === 0) {
        context.print.error(selectionOptions.notFoundMessage);
        context.print.error(notFoundSuffix);
        throw new Error('Plugins found but no selections supplied for function configuration');
    }
    else if (selections.length === 1) {
        let singleOptionMsg = `Only one selection option found for ${selectionOptions.listOptionsField}. Using ${selections[0].name} by default`;
        if (selectionOptions.listOptionsField === 'templates') {
            singleOptionMsg = `Only one template found - using ${selections[0].name} by default.`;
        }
        else if (selectionOptions.listOptionsField === 'runtimes') {
            singleOptionMsg = `Only one runtime detected: ${selections[0].name}. Learn more about additional runtimes at https://docs.amplify.aws/cli/function`;
        }
        context.print.info(singleOptionMsg);
        selection = selections[0].value;
    }
    else {
        let answer = await inquirer_1.default.prompt([
            {
                type: 'list',
                name: 'selection',
                message: selectionOptions.selectionPrompt,
                choices: selections,
                default: selectionOptions.listOptionsField === 'runtimes' ? 'nodejs' : 'hello-world',
            },
        ]);
        selection = answer.selection;
    }
    return {
        value: selection,
        pluginPath: selectionMap.get(selection).path,
        pluginId: selectionMap.get(selection).pluginId,
    };
}
async function loadPluginFromFactory(pluginPath, expectedFactoryFunction, context) {
    let plugin;
    try {
        plugin = await Promise.resolve().then(() => __importStar(require(pluginPath)));
    }
    catch (err) {
        throw new Error('Could not load selected plugin');
    }
    if (!plugin) {
        throw new Error('Could not load selected plugin');
    }
    return plugin[expectedFactoryFunction](context);
}
exports.loadPluginFromFactory = loadPluginFromFactory;
//# sourceMappingURL=functionPluginLoader.js.map