"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createParametersFile = exports.copyTemplateFiles = exports.copyFunctionResources = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const constants_1 = require("./constants");
const lodash_1 = __importDefault(require("lodash"));
function copyFunctionResources(context, parameters) {
    context.amplify.updateamplifyMetaAfterResourceAdd(constants_1.categoryName, parameters.resourceName || parameters.functionName, translateFuncParamsToResourceOpts(parameters));
    copyTemplateFiles(context, parameters);
    createParametersFile(context, buildParametersFileObj(parameters), parameters.resourceName);
    if ('trigger' in parameters) {
        const params = {
            modules: parameters.modules.join(),
            resourceName: parameters.resourceName,
        };
        createParametersFile(context, params, parameters.resourceName, 'parameters.json');
    }
    context.amplify.leaveBreadcrumbs(context, constants_1.categoryName, parameters.resourceName, createBreadcrumbs(parameters));
    if ('cloudwatchRule' in parameters) {
        const params = {
            CloudWatchRule: parameters.cloudwatchRule,
        };
        createParametersFile(context, params, parameters.resourceName, 'parameters.json');
    }
}
exports.copyFunctionResources = copyFunctionResources;
function copyTemplateFiles(context, parameters) {
    const destDir = context.amplify.pathManager.getBackendDirPath();
    const copyJobs = parameters.functionTemplate.sourceFiles.map(file => {
        return {
            dir: parameters.functionTemplate.sourceRoot,
            template: file,
            target: path_1.default.join(destDir, constants_1.categoryName, parameters.resourceName, lodash_1.default.get(parameters.functionTemplate.destMap, file, file.replace(/\.ejs$/, ''))),
        };
    });
    let templateParams = parameters;
    if ('trigger' in parameters) {
        let triggerEnvs = context.amplify.loadEnvResourceParameters(context, 'function', parameters.resourceName);
        parameters.triggerEnvs = JSON.parse(parameters.triggerEnvs) || [];
        parameters.triggerEnvs.forEach(c => {
            triggerEnvs[c.key] = c.value;
        });
        templateParams = lodash_1.default.assign(templateParams, triggerEnvs);
    }
    context.amplify.copyBatch(context, copyJobs, templateParams, false);
    const cloudTemplateJob = {
        dir: '',
        template: parameters.cloudResourceTemplatePath,
        target: path_1.default.join(destDir, constants_1.categoryName, parameters.resourceName, `${parameters.resourceName}-cloudformation-template.json`),
    };
    context.amplify.copyBatch(context, [cloudTemplateJob], parameters, false);
}
exports.copyTemplateFiles = copyTemplateFiles;
function createParametersFile(context, parameters, resourceName, parametersFileName = 'function-parameters.json') {
    const projectBackendDirPath = context.amplify.pathManager.getBackendDirPath();
    const resourceDirPath = path_1.default.join(projectBackendDirPath, constants_1.categoryName, resourceName);
    fs_extra_1.default.ensureDirSync(resourceDirPath);
    const parametersFilePath = path_1.default.join(resourceDirPath, parametersFileName);
    const currentParameters = fs_extra_1.default.existsSync(parametersFilePath) ? context.amplify.readJsonFile(parametersFilePath) : {};
    const jsonString = JSON.stringify({ ...currentParameters, ...parameters }, null, 4);
    fs_extra_1.default.writeFileSync(parametersFilePath, jsonString, 'utf8');
}
exports.createParametersFile = createParametersFile;
function buildParametersFileObj(parameters) {
    if ('trigger' in parameters) {
        return lodash_1.default.omit(parameters, ['functionTemplate', 'cloudResourceTemplatePath']);
    }
    return parameters.parametersFileObj;
}
function translateFuncParamsToResourceOpts(params) {
    let result = {
        build: true,
        providerPlugin: constants_1.provider,
        service: constants_1.serviceName,
    };
    if (!('trigger' in params)) {
        result.dependsOn = params.dependsOn;
    }
    return result;
}
function createBreadcrumbs(params) {
    if ('trigger' in params) {
        return {
            pluginId: 'amplify-nodejs-function-runtime-provider',
            functionRuntime: 'nodejs',
            useLegacyBuild: true,
            defaultEditorFile: 'src/index.js',
        };
    }
    return {
        pluginId: params.runtimePluginId,
        functionRuntime: params.runtime.value,
        useLegacyBuild: params.runtime.value === 'nodejs' ? true : false,
        defaultEditorFile: params.functionTemplate.defaultEditorFile,
    };
}
//# sourceMappingURL=storeResources.js.map