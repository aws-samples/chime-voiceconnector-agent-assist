export declare const directives = "\n  # model directive\n  directive @model(queries: ModelQueryMap, mutations: ModelMutationMap, subscriptions: ModelSubscriptionMap) on OBJECT\n  input ModelMutationMap {\n    create: String\n    update: String\n    delete: String\n  }\n  input ModelQueryMap {\n    get: String\n    list: String\n  }\n  input ModelSubscriptionMap {\n    onCreate: [String]\n    onUpdate: [String]\n    onDelete: [String]\n    level: ModelSubscriptionLevel\n  }\n  enum ModelSubscriptionLevel {\n    off\n    public\n    on\n  }\n\n  # Key directive\n  directive @key(name: String, fields: [String!]!, queryField: String) repeatable on OBJECT\n\n  # Connection directive\n  directive @connection(\n    name: String\n    keyField: String\n    sortField: String\n    keyName: String\n    limit: Int\n    fields: [String!]\n  ) on FIELD_DEFINITION\n\n  directive @auth(rules: [AuthRule!]!) on OBJECT | FIELD_DEFINITION\n\n  input AuthRule {\n    # Specifies the auth rule's strategy. Allowed values are 'owner', 'groups', 'public', 'private'.\n    allow: AuthStrategy!\n\n    # Legacy name for identityClaim\n    identityField: String @deprecated(reason: \"The 'identityField' argument is replaced by the 'identityClaim'.\")\n\n    # Specifies the name of the provider to use for the rule. This overrides the default provider\n    # when 'public' and 'private' AuthStrategy is used. Specifying a provider for 'owner' or 'groups'\n    # are not allowed.\n    provider: AuthProvider\n\n    # Specifies the name of the claim to look for on the request's JWT token\n    # from Cognito User Pools (and in the future OIDC) that contains the identity\n    # of the user. If 'allow' is 'groups', this value should point to a list of groups\n    # in the claims. If 'allow' is 'owner', this value should point to the logged in user identity string.\n    # Defaults to \"cognito:username\" for Cognito User Pools auth.\n    identityClaim: String\n\n    # Allows for custom config of 'groups' which is validated against the JWT\n    # Specifies a static list of groups that should have access to the object\n    groupClaim: String\n\n    # Allowed when the 'allow' argument is 'owner'.\n    # Specifies the field of type String or [String] that contains owner(s) that can access the object.\n    ownerField: String # defaults to \"owner\"\n    # Allowed when the 'allow' argument is 'groups'.\n    # Specifies the field of type String or [String] that contains group(s) that can access the object.\n    groupsField: String\n\n    # Allowed when the 'allow' argument is 'groups'.\n    # Specifies a static list of groups that should have access to the object.\n    groups: [String]\n\n    # Specifies operations to which this auth rule should be applied.\n    operations: [ModelOperation]\n\n    # Deprecated. It is recommended to use the 'operations' arguments.\n    queries: [ModelQuery] @deprecated(reason: \"The 'queries' argument will be replaced by the 'operations' argument in a future release.\")\n\n    # Deprecated. It is recommended to use the 'operations' arguments.\n    mutations: [ModelMutation]\n      @deprecated(reason: \"The 'mutations' argument will be replaced by the 'operations' argument in a future release.\")\n  }\n\n  enum AuthStrategy {\n    owner\n    groups\n    private\n    public\n  }\n\n  enum AuthProvider {\n    apiKey\n    iam\n    oidc\n    userPools\n  }\n\n  enum ModelOperation {\n    create\n    update\n    delete\n    read\n  }\n\n  enum ModelQuery @deprecated(reason: \"ModelQuery will be replaced by the 'ModelOperation' in a future release.\") {\n    get\n    list\n  }\n\n  enum ModelMutation @deprecated(reason: \"ModelMutation will be replaced by the 'ModelOperation' in a future release.\") {\n    create\n    update\n    delete\n  }\n\n  directive @searchable(queries: SearchableQueryMap) on OBJECT\n\n  input SearchableQueryMap {\n    search: String\n  }\n\n  directive @deprecated(reason: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ENUM | ENUM_VALUE\n";
export declare const scalars: string;
//# sourceMappingURL=supported-directives.d.ts.map