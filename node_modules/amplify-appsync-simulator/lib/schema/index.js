"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var graphql_tools_1 = require("graphql-tools");
var appsync_scalars_1 = require("./appsync-scalars");
var directives_1 = require("./directives");
var KNOWN_DIRECTIVES = [];
function generateResolvers(schema, resolversConfig, simulatorContext) {
    var _this = this;
    if (resolversConfig === void 0) { resolversConfig = []; }
    var appSyncScalars = new graphql_1.Source(Object.keys(appsync_scalars_1.scalars)
        .map(function (scalar) { return "scalar " + scalar; })
        .join('\n'), 'AppSync-scalar.json');
    var directives = KNOWN_DIRECTIVES.reduce(function (set, d) {
        set.add(d.visitor);
        return set;
    }, new Set());
    var directiveAST = [];
    directives.forEach(function (d) {
        directiveAST.push(graphql_1.parse(d.typeDefinitions));
    });
    var documents = [schema, appSyncScalars].map(function (s) { return graphql_1.parse(s); });
    var doc = graphql_1.concatAST(__spreadArrays(documents, directiveAST));
    var resolvers = resolversConfig.reduce(function (acc, resolverConfig) {
        var _a;
        var typeObj = acc[resolverConfig.typeName] || {};
        var fieldName = resolverConfig.fieldName;
        var typeName = resolverConfig.typeName;
        typeObj[resolverConfig.fieldName] = __assign({ resolve: function (source, args, context, info) { return __awaiter(_this, void 0, void 0, function () {
                var resolver, res, res, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            resolver = simulatorContext.getResolver(resolverConfig.typeName, resolverConfig.fieldName);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 6, , 7]);
                            if (!(typeName !== 'Subscription')) return [3 /*break*/, 3];
                            return [4 /*yield*/, resolver.resolve(source, args, context, info)];
                        case 2:
                            res = _a.sent();
                            return [2 /*return*/, res];
                        case 3:
                            if (!!source) return [3 /*break*/, 5];
                            return [4 /*yield*/, resolver.resolve(source, args, context, info)];
                        case 4:
                            res = _a.sent();
                            return [2 /*return*/, res];
                        case 5: 
                        // subscription at publish time. No filtering
                        return [2 /*return*/, source];
                        case 6:
                            e_1 = _a.sent();
                            context.appsyncErrors.push(e_1);
                            return [3 /*break*/, 7];
                        case 7: return [2 /*return*/];
                    }
                });
            }); } }, (typeName === 'Subscription'
            ? {
                subscribe: function (source, args, context, info) {
                    // Connect time error. Not allowing subscription
                    if (context.appsyncErrors.length) {
                        throw new Error('Subscription failed');
                    }
                    return simulatorContext.asyncIterator(fieldName);
                },
            }
            : {}));
        return __assign(__assign({}, acc), (_a = {}, _a[resolverConfig.typeName] = typeObj, _a));
    }, { Subscription: {} });
    var defaultSubscriptions = generateDefaultSubscriptions(doc, resolversConfig, simulatorContext);
    var schemaDirectives = KNOWN_DIRECTIVES.reduce(function (sum, d) {
        var _a;
        d.visitor.simulatorContext = simulatorContext;
        return __assign(__assign({}, sum), (_a = {}, _a[d.name] = d.visitor, _a));
    }, {});
    if (Object.keys(defaultSubscriptions).length || Object.keys(resolvers.Subscription).length) {
        resolvers.Subscription = __assign(__assign({}, defaultSubscriptions), resolvers.Subscription);
    }
    else {
        // When there are no subscriptions in the doc, don't include subscription resolvers
        delete resolvers.Subscription;
    }
    var resolverMapWithAuth = directives_1.protectResolversWithAuthRules(doc, resolvers, simulatorContext);
    return graphql_tools_1.makeExecutableSchema({
        typeDefs: doc,
        resolvers: resolverMapWithAuth,
        schemaDirectives: schemaDirectives,
    });
}
exports.generateResolvers = generateResolvers;
function generateDefaultSubscriptions(doc, configuredResolvers, simulatorContext) {
    var configuredSubscriptions = configuredResolvers.filter(function (cfg) { return cfg.fieldName === 'Subscription'; }).map(function (cfg) { return cfg.typeName; });
    var schema = graphql_1.buildASTSchema(doc);
    var subscriptionType = schema.getSubscriptionType();
    if (subscriptionType) {
        var f = schema.getType(subscriptionType.name);
        if (f) {
            var fields = f.getFields();
            return Object.keys(fields)
                .filter(function (sub) { return !configuredSubscriptions.includes(sub); })
                .reduce(function (acc, sub) {
                var _a;
                var resolver = {
                    resolve: function (data) { return data; },
                    subscribe: function () { return simulatorContext.asyncIterator(sub); },
                };
                return __assign(__assign({}, acc), (_a = {}, _a[sub] = resolver, _a));
            }, {});
        }
    }
    return {};
}
function addDirective(name, visitor) {
    KNOWN_DIRECTIVES.push({
        name: name,
        visitor: visitor,
    });
}
exports.addDirective = addDirective;
addDirective('aws_subscribe', directives_1.AwsSubscribe);
addDirective('aws_api_key', directives_1.AwsAuth);
addDirective('aws_oidc', directives_1.AwsAuth);
addDirective('aws_cognito_user_pools', directives_1.AwsAuth);
addDirective('aws_auth', directives_1.AwsAuth);
//# sourceMappingURL=index.js.map