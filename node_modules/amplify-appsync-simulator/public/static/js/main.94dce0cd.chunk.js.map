{"version":3,"sources":["../../../node_modules/graphql-language-service-utils/esm sync /^.*/.js$","../../../node_modules/graphql-language-service-utils/esm sync /^.*/.json$","../../../node_modules/graphql-language-service-utils/esm lazy /^.*/.js$/ groupOptions: {} namespace object","../../../node_modules/graphql-language-service-utils/esm lazy /^.*/.json$/ groupOptions: {} namespace object","AuthModal.tsx","utils/jwt.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","webpackEmptyContext","webpackAsyncContext","Promise","then","webpackEmptyAsyncContext","AUTH_MODE","generateToken","decodedToken","JSON","parse","token","sign","verify","message","decode","refreshToken","issuer","tokenObj","length","iss","exp","Math","floor","Date","now","stringify","AuthModal","props","args","state","currentCognitoToken","currentOIDCTokenDecoded","currentOIDCToken","userName","userGroups","apiKey","possibleGroups","email","supportedAuthModes","API_KEY","isOpen","currentAuthMode","oidcTokenError","parseJWTToken","authModes","selectedAuthMode","onClose","bind","onGroupChange","onGroupAdd","onGenerate","changeAPIKey","changeEmail","onUserNameChange","onOIDCTokenChange","onAuthModeChange","result","authMode","this","cognitoToken","AMAZON_COGNITO_USER_POOLS","OIDCToken","OPENID_CONNECT","iam","AWS_IAM","ev","data","setState","value","formContent","actionText","Form","Field","Input","readOnly","placeholder","onChange","Dropdown","search","options","g","key","text","selection","fluid","multiple","allowAdditions","onAddItem","errorLabel","Label","basic","color","pointing","TextArea","rows","spellCheck","authModeOptions","filter","mode","Modal","onActionClick","open","Header","Content","Description","style","marginTop","Actions","Button","primary","onClick","newState","generateCognitoJWTToken","generateOIDCJWTToken","tokenPayload","sub","email_verified","algorithm","phone_number_verified","aud","event_id","token_use","phone_number","Component","DEFAULT_COGNITO_JWT_TOKEN","DEFAULT_OIDC_JWT_TOKEN","AUTH_TYPE_TO_NAME","DEFAULT_API_INFO","name","defaultAuthenticationType","authenticationType","additionalAuthenticationProviders","LOCAL_STORAGE_KEY_NAMES","fetcher","params","additionalHeaders","headers","Accept","fetch","method","body","response","json","responseBody","DEFAULT_QUERY","App","rest","_graphiql","schema","query","explorerIsOpen","authModalVisible","apiInfo","credentials","cognitoJWTToken","oidcJWTToken","toggleAuthModal","prevState","switchAuthMode","val","_handleInspectOperation","cm","mousePos","parsedQuery","console","error","getTokenAt","start","line","ch","end","position","indexFromPos","def","definitions","find","definition","loc","log","operationKind","kind","operation","operationName","selector","el","document","querySelector","scrollIntoView","_handleEditQuery","_handleToggleExplorer","loadCredentials","getIntrospectionQuery","introspectionResult","editor","getQueryEditor","setOption","extraKeys","buildClientSchema","window","localStorage","setItem","IAM","authProviders","possibleAuth","auth","includes","getItem","warn","issuers","openIDConnectConfig","Issuer","authModal","storeCredentials","className","onEdit","onRunOperation","handleRunQuery","onToggleExplorer","ref","onEditQuery","Toolbar","handlePrettifyQuery","label","title","handleToggleHistory","Select","onSelect","SelectOption","selected","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94dce0cd.chunk.js","sourcesContent":["var map = {\n\t\"./Range.js\": 107,\n\t\"./file.js\": 144,\n\t\"./getASTNodeAtPosition.js\": 143,\n\t\"./index.js\": 44,\n\t\"./validateWithCustomRules.js\": 167\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 566;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 567;","var map = {\n\t\"./Range.js\": 107,\n\t\"./file.js\": 144,\n\t\"./getASTNodeAtPosition.js\": 143,\n\t\"./index.js\": 44,\n\t\"./validateWithCustomRules.js\": 167\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 568;\nmodule.exports = webpackAsyncContext;","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 569;","import React, { Component } from 'react';\nimport { Button, Form, Modal, Dropdown, Input, TextArea, Label } from 'semantic-ui-react';\nimport { generateToken, parse } from './utils/jwt';\n\nexport enum AUTH_MODE {\n  API_KEY = 'API_KEY',\n  AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS',\n  OPENID_CONNECT = 'OPENID_CONNECT',\n  AWS_IAM = 'AWS_IAM',\n}\n\ntype State = {\n  currentCognitoToken?: string;\n  currentOIDCToken: string;\n  currentOIDCTokenDecoded?: string;\n  currentAuthMode: AUTH_MODE;\n  userName?: string;\n  userGroups: string[];\n  email?: string;\n  issuer?: string;\n  apiKey?: string;\n  possibleGroups: string[];\n  isOpen: boolean;\n  supportedAuthModes: AUTH_MODE[];\n  oidcTokenError: string;\n};\n\ntype Props = {\n  onClose: Function;\n  authModes: AUTH_MODE[];\n  selectedAuthMode: AUTH_MODE;\n  currentCognitoToken?: string;\n  currentOIDCToken?: string;\n  apiKey?: string;\n};\nexport class AuthModal extends Component<Props, State> {\n  state: State = {\n    currentCognitoToken: '',\n    currentOIDCTokenDecoded: '',\n    currentOIDCToken: '',\n    userName: '',\n    issuer: '',\n    userGroups: [],\n    apiKey: '',\n    possibleGroups: [],\n    email: '',\n    supportedAuthModes: [AUTH_MODE.API_KEY],\n    isOpen: true,\n    currentAuthMode: AUTH_MODE.API_KEY,\n    oidcTokenError: '',\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n\n    const decodedToken = this.parseJWTToken(this.props.currentCognitoToken) || {};\n    let state = {\n      userName: decodedToken['cognito:username'] || '',\n      userGroups: decodedToken['cognito:groups'] || [],\n      issuer: decodedToken['iss'],\n      email: decodedToken['email'],\n      possibleGroups: decodedToken['cognito:groups'] || [],\n    };\n    this.state = {\n      ...this.state,\n      ...state,\n      currentCognitoToken: this.props.currentCognitoToken || '',\n      currentOIDCToken: this.props.currentOIDCToken || '',\n      currentOIDCTokenDecoded: JSON.stringify(this.parseJWTToken(this.props.currentOIDCToken), null, 4) || '',\n      apiKey: props.apiKey || '',\n      supportedAuthModes: this.props.authModes,\n      currentAuthMode: props.selectedAuthMode,\n    };\n\n    this.onClose = this.onClose.bind(this);\n    this.onGroupChange = this.onGroupChange.bind(this);\n    this.onGroupAdd = this.onGroupAdd.bind(this);\n    this.onGenerate = this.onGenerate.bind(this);\n    this.changeAPIKey = this.changeAPIKey.bind(this);\n    this.changeEmail = this.changeEmail.bind(this);\n    this.onUserNameChange = this.onUserNameChange.bind(this);\n    this.onOIDCTokenChange = this.onOIDCTokenChange.bind(this);\n    this.onAuthModeChange = this.onAuthModeChange.bind(this);\n  }\n\n  onClose() {\n    const result = {\n      authMode: this.state.currentAuthMode,\n      apiKey: this.state.currentAuthMode === AUTH_MODE.API_KEY ? this.state.apiKey : null,\n      cognitoToken: this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? this.state.currentCognitoToken : null,\n      OIDCToken: this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT ? this.state.currentOIDCToken : null,\n      // We have no data for IAM to store, so we just store a constant string for now\n      iam: this.state.currentAuthMode === AUTH_MODE.AWS_IAM ? 'AWS4-HMAC-SHA256 IAMAuthorized' : null,\n    };\n\n    if (this.props.onClose) {\n      this.props.onClose(result);\n    }\n  }\n  onGroupChange(ev, data) {\n    this.setState({\n      userGroups: data.value,\n    });\n  }\n  onGroupAdd(ev, data) {\n    this.setState({\n      possibleGroups: [...this.state.possibleGroups, data.value],\n    });\n  }\n\n  onUserNameChange(ev, data) {\n    this.setState({\n      userName: data.value,\n    });\n  }\n\n  onOIDCTokenChange(ev, data) {\n    this.setState({\n      currentOIDCTokenDecoded: data.value,\n    });\n  }\n\n  onAuthModeChange(ev, data) {\n    this.setState({\n      currentAuthMode: data.value,\n    });\n  }\n\n  changeEmail(ev, data) {\n    this.setState({\n      email: data.value,\n    });\n  }\n  changeAPIKey(ev, data) {\n    this.setState({\n      apiKey: data.value,\n    });\n  }\n\n  render() {\n    let formContent;\n    let actionText = 'Save';\n    if (this.state.currentAuthMode === AUTH_MODE.API_KEY) {\n      formContent = (\n        <>\n          <Form.Field>\n            <label>ApiKey</label>\n            <Input readOnly placeholder='APIKey' value={this.state.apiKey} onChange={this.changeAPIKey} />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      actionText = 'Generate Token';\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Username</label>\n            <Input placeholder='User Name' value={this.state.userName} onChange={this.onUserNameChange} />\n          </Form.Field>\n          <Form.Field>\n            <label>Groups</label>\n            <Dropdown\n              placeholder='Choose cognito user groups'\n              search\n              options={this.state.possibleGroups.map(g => ({\n                key: g,\n                value: g,\n                text: g,\n              }))}\n              selection\n              fluid\n              multiple\n              allowAdditions\n              value={this.state.userGroups}\n              onAddItem={this.onGroupAdd}\n              onChange={this.onGroupChange}\n            />\n          </Form.Field>\n          <Form.Field>\n            <label>Email</label>\n            <Input placeholder='Email' value={this.state.email} onChange={this.changeEmail} />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n      const errorLabel = this.state.oidcTokenError ? (\n        <Label basic color='red' pointing='below'>\n          {this.state.oidcTokenError}\n        </Label>\n      ) : null;\n      formContent = (\n        <>\n          <Form.Field>\n            <label>Decoded OpenID Connect Token</label>\n            {errorLabel}\n            <TextArea\n              onChange={this.onOIDCTokenChange}\n              rows={10}\n              placeholder='Decoded OIDC Token'\n              spellCheck='false'\n              value={this.state.currentOIDCTokenDecoded}\n            />\n          </Form.Field>\n        </>\n      );\n    } else if (this.state.currentAuthMode === AUTH_MODE.AWS_IAM) {\n      formContent = (\n        <>\n          <label>IAM authentication mode has no settings.</label>\n        </>\n      );\n    }\n\n    const authModeOptions = this.state.supportedAuthModes\n      .filter(mode => mode)\n      .map(mode => ({\n        key: mode,\n        value: mode,\n        text: mode,\n      }));\n\n    return (\n      <Modal onClose={this.onClose} onActionClick={this.onGenerate} open={this.state.isOpen}>\n        <Modal.Header>Auth Options</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n            <Dropdown\n              placeholder='Auth Mode'\n              selection\n              options={authModeOptions}\n              value={this.state.currentAuthMode}\n              onChange={this.onAuthModeChange}\n            />\n            <div style={{ marginTop: '1em' }}>\n              <Form>{formContent}</Form>\n            </div>\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button primary onClick={this.onGenerate}>\n            {actionText}\n          </Button>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n  onGenerate() {\n    try {\n      const newState = {\n        isOpen: false,\n      };\n      if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n        newState['currentCognitoToken'] = this.generateCognitoJWTToken();\n      } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n        newState['currentOIDCToken'] = this.generateOIDCJWTToken();\n      }\n      this.setState(newState, () => {\n        this.onClose();\n      });\n    } catch (e) {}\n  }\n\n  generateCognitoJWTToken() {\n    const tokenPayload: any = {\n      sub: '7d8ca528-4931-4254-9273-ea5ee853f271',\n      'cognito:groups': [],\n      email_verified: true,\n      algorithm: 'HS256',\n      iss: 'https://cognito-idp.us-east-1.amazonaws.com/us-east-1_fake_idp',\n      phone_number_verified: true,\n      'cognito:username': '',\n      'cognito:roles': [],\n      aud: '2hifa096b3a24mvm3phskuaqi3',\n      event_id: '18f4067e-9985-4eae-9f33-f45f495470d0',\n      token_use: 'id',\n      phone_number: '+12062062016',\n      exp: Math.floor(Date.now() / 1000) + 60 * 60 * 12,\n      email: this.state.email,\n    };\n    tokenPayload['cognito:username'] = this.state.userName;\n    tokenPayload['cognito:groups'] = this.state.userGroups;\n    tokenPayload['auth_time'] = Math.floor(Date.now() / 1000); // In seconds\n\n    const token = generateToken(tokenPayload);\n    return token;\n  }\n\n  generateOIDCJWTToken() {\n    const tokenPayload = this.state.currentOIDCTokenDecoded || '';\n    try {\n      return generateToken(tokenPayload);\n    } catch (e) {\n      this.setState({\n        oidcTokenError: e.message,\n      });\n      throw e;\n    }\n  }\n  parseJWTToken(token) {\n    return parse(token);\n  }\n}\n","import { decode, sign, verify } from 'jsonwebtoken';\n\nexport function generateToken(decodedToken: string | object): string {\n  try {\n    if (typeof decodedToken === 'string') {\n      decodedToken = JSON.parse(decodedToken);\n    }\n    const token = sign(decodedToken, 'open-secrete');\n    verify(token, 'open-secrete');\n    return token;\n  } catch (e) {\n    const err = new Error('Error when generating OIDC token: ' + e.message);\n    throw err;\n  }\n}\n\nexport function parse(token): object {\n  const decodedToken = decode(token);\n  return decodedToken;\n}\n\n/**\n * Updates the exp time of the static token to ensure the shipped token is fresh. If user passes an\n * issuer, updates the token with the issuer\n * @param token\n * @param issuer\n */\nexport function refreshToken(token: string, issuer?: string): string {\n  const tokenObj: any = parse(token);\n  if (!Object.keys(tokenObj).length) {\n    throw new Error(`Invalid token ${token}`);\n  }\n  if (issuer) {\n    tokenObj.iss = issuer;\n  }\n  tokenObj.exp = Math.floor(Date.now() / 100 + 20000);\n  return generateToken(JSON.stringify(tokenObj));\n}\n","import GraphiQL from 'graphiql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport 'graphiql/graphiql.css';\nimport { buildClientSchema, getIntrospectionQuery, GraphQLSchema, parse } from 'graphql';\nimport React, { Component } from 'react';\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\nimport { AuthModal, AUTH_MODE } from './AuthModal';\nimport { refreshToken } from './utils/jwt';\n\nconst DEFAULT_COGNITO_JWT_TOKEN = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3ZDhjYTUyOC00OTMxLTQyNTQtOTI3My1lYTVlZTg1M2YyNzEiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiaXNzIjoiaHR0cHM6Ly9jb2duaXRvLWlkcC51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS91cy1lYXN0LTFfZmFrZSIsInBob25lX251bWJlcl92ZXJpZmllZCI6dHJ1ZSwiY29nbml0bzp1c2VybmFtZSI6InVzZXIxIiwiYXVkIjoiMmhpZmEwOTZiM2EyNG12bTNwaHNrdWFxaTMiLCJldmVudF9pZCI6ImIxMmEzZTJmLTdhMzYtNDkzYy04NWIzLTIwZDgxOGJkNzhhMSIsInRva2VuX3VzZSI6ImlkIiwiYXV0aF90aW1lIjoxOTc0MjY0NDEyLCJwaG9uZV9udW1iZXIiOiIrMTIwNjIwNjIwMTYiLCJleHAiOjE1NjQyNjgwMTIsImlhdCI6MTU2NDI2NDQxMywiZW1haWwiOiJ1c2VyQGRvbWFpbi5jb20ifQ.wHKY2KIhvWn4zpJ4TZ1vS3zRE9mGWsLY4NCV2Cof17Q`;\nconst DEFAULT_OIDC_JWT_TOKEN = `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1c2VyMSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJpc3MiOiJodHRwczovL3NvbWUtb2lkYy1wcm92aWRlci9hdXRoIiwicGhvbmVfbnVtYmVyX3ZlcmlmaWVkIjp0cnVlLCJhdWQiOiIyaGlmYTA5NmIzYTI0bXZtM3Boc2t1YXFpMyIsImV2ZW50X2lkIjoiYjEyYTNlMmYtN2EzNi00OTNjLTg1YjMtMjBkODE4YmQ3OGExIiwidG9rZW5fdXNlIjoiaWQiLCJhdXRoX3RpbWUiOjE5NzQyNjQ0MTIsInBob25lX251bWJlciI6IisxMjA2MjA2MjAxNiIsImV4cCI6MTU2NDI2ODAxMiwiaWF0IjoxNTY0MjY0NDEzLCJlbWFpbCI6InVzZXJAZG9tYWluLmNvbSJ9.uAegFXomOnA7Dkl-5FcS5icu5kL9Juqb81GnTrOZZqM`;\n\nconst AUTH_TYPE_TO_NAME = {\n  AMAZON_COGNITO_USER_POOLS: 'User Pool',\n  API_KEY: 'API Key',\n  OPENID_CONNECT: 'Open ID',\n  AWS_IAM: 'IAM',\n};\n\ntype AmplifyAppSyncSimulatorAuthInfo = {\n  authenticationType: string;\n};\ntype AmplifyAppSyncSimulatorApiInfo = {\n  name: string;\n  defaultAuthenticationType: AmplifyAppSyncSimulatorAuthInfo;\n  apiKey: string;\n  additionalAuthenticationProviders: AmplifyAppSyncSimulatorAuthInfo[];\n};\nconst DEFAULT_API_INFO: AmplifyAppSyncSimulatorApiInfo = {\n  name: 'AppSyncTransformer',\n  defaultAuthenticationType: {\n    authenticationType: 'API_KEY',\n  },\n  additionalAuthenticationProviders: [],\n  apiKey: 'da2-fakeApiId123456',\n};\n\nconst LOCAL_STORAGE_KEY_NAMES = {\n  cognitoToken: 'AMPLIFY_GRPAHIQL_EXPLORER_COGNITO_JWT_TOKEN',\n  oidcToken: 'AMPLIFY_GRPAHIQL_EXPLORER_OIDC_JWT_TOKEN',\n  apiKey: 'AMPLIFY_GRPAHIQL_EXPLORER_API_KEY',\n  iam: 'AMPLIFY_GRPAHIQL_EXPLORER_AWS_IAM',\n};\n\nfunction getAPIInfo() {\n  return fetch('/api-config').then(response => response.json());\n}\n\nfunction fetcher(params: Object, additionalHeaders): Promise<any> {\n  const headers = {\n    Accept: 'application/json',\n    'Content-Type': 'application/json',\n    ...additionalHeaders,\n  };\n  return fetch('/graphql', {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(params),\n  })\n    .then(function(response) {\n      return response.json();\n    })\n    .then(function(responseBody) {\n      try {\n        return JSON.parse(responseBody);\n      } catch (e) {\n        return responseBody;\n      }\n    });\n}\n\nconst DEFAULT_QUERY = `# shift-option/alt-click on a query below to jump to it in the explorer\n# option/alt-click on a field in the explorer to select all subfields\n`;\n\ntype State = {\n  schema?: GraphQLSchema | null;\n  query: string;\n  explorerIsOpen: boolean;\n  authModalVisible: boolean;\n  jwtToken?: string;\n  apiKey?: string;\n  apiInfo: AmplifyAppSyncSimulatorApiInfo;\n  currentAuthMode: AUTH_MODE;\n  credentials: {\n    apiKey?: string;\n    cognitoJWTToken?: string;\n    oidcJWTToken?: string;\n    iam?: string;\n  };\n};\n\nclass App extends Component<{}, State> {\n  _graphiql: GraphiQL;\n  state: State = {\n    schema: null,\n    query: DEFAULT_QUERY,\n    explorerIsOpen: true,\n    authModalVisible: false,\n    apiInfo: DEFAULT_API_INFO,\n    currentAuthMode: AUTH_MODE.API_KEY,\n    credentials: {\n      apiKey: '',\n      cognitoJWTToken: '',\n      oidcJWTToken: '',\n      iam: '',\n    },\n  };\n\n  constructor(props, ...rest) {\n    super(props, ...rest);\n    this.fetch = this.fetch.bind(this);\n  }\n  async componentDidMount() {\n    const apiInfo = await getAPIInfo();\n    this.loadCredentials(apiInfo);\n    this.setState({ apiInfo });\n    const introspectionResult = await this.fetch({\n      query: getIntrospectionQuery(),\n    });\n\n    const editor = this._graphiql.getQueryEditor();\n    editor.setOption('extraKeys', {\n      ...(editor.options.extraKeys || {}),\n      'Shift-Alt-LeftClick': this._handleInspectOperation,\n    });\n    if (introspectionResult && introspectionResult.data) {\n      this.setState({ schema: buildClientSchema(introspectionResult.data) });\n    }\n  }\n\n  toggleAuthModal = () =>\n    this.setState(prevState => ({\n      authModalVisible: !prevState.authModalVisible,\n    }));\n\n  switchAuthMode = val => {\n    this.setState({ currentAuthMode: val });\n  };\n  _handleInspectOperation = (cm: any, mousePos: { line: Number; ch: Number }) => {\n    const parsedQuery = parse(this.state.query || '');\n\n    if (!parsedQuery) {\n      console.error(\"Couldn't parse query document\");\n      return null;\n    }\n\n    var token = cm.getTokenAt(mousePos);\n    var start = { line: mousePos.line, ch: token.start };\n    var end = { line: mousePos.line, ch: token.end };\n    var relevantMousePos = {\n      start: cm.indexFromPos(start),\n      end: cm.indexFromPos(end),\n    };\n\n    var position = relevantMousePos;\n\n    var def = parsedQuery.definitions.find(definition => {\n      if (!definition.loc) {\n        console.log('Missing location information for definition');\n        return false;\n      }\n\n      const { start, end } = definition.loc;\n      return start <= position.start && end >= position.end;\n    });\n\n    if (!def) {\n      console.error(`Unable to find definition corresponding position at ${position.start}`);\n      return null;\n    }\n\n    var operationKind = def.kind === 'OperationDefinition' ? def.operation : def.kind === 'FragmentDefinition' ? 'fragment' : 'unknown';\n\n    var operationName =\n      def.kind === 'OperationDefinition' && !!def.name\n        ? def.name.value\n        : def.kind === 'FragmentDefinition' && !!def.name\n        ? def.name.value\n        : 'unknown';\n\n    var selector = `.graphiql-explorer-root #${operationKind}-${operationName}`;\n\n    var el = document.querySelector(selector);\n    el && el.scrollIntoView();\n  };\n\n  _handleEditQuery = (query: string): void => this.setState({ query });\n\n  _handleToggleExplorer = () => {\n    this.setState({ explorerIsOpen: !this.state.explorerIsOpen });\n  };\n\n  fetch(params) {\n    const headers = {};\n    if (this.state.currentAuthMode === AUTH_MODE.API_KEY) {\n      headers['x-api-key'] = this.state.credentials.apiKey;\n    } else if (this.state.currentAuthMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      headers['Authorization'] = this.state.credentials.cognitoJWTToken;\n    } else if (this.state.currentAuthMode === AUTH_MODE.OPENID_CONNECT) {\n      headers['Authorization'] = this.state.credentials.oidcJWTToken;\n    } else if (this.state.currentAuthMode === AUTH_MODE.AWS_IAM) {\n      headers['Authorization'] = this.state.credentials.iam;\n    }\n    return fetcher(params, headers);\n  }\n\n  storeCredentials(credentials) {\n    const apiInfo = this.state.apiInfo;\n    const newState = {\n      apiInfo: { ...apiInfo, authenticationType: credentials.authMode },\n    };\n    if (credentials.authMode === 'API_KEY') {\n      newState['apiKey'] = credentials.apiKey;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.apiKey, credentials.apiKey);\n    } else if (credentials.authMode === AUTH_MODE.AMAZON_COGNITO_USER_POOLS) {\n      newState['cognitoJWTToken'] = credentials.cognitoToken;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.cognitoToken, credentials.cognitoToken);\n    } else if (credentials.authMode === AUTH_MODE.OPENID_CONNECT) {\n      newState['oidcJWTToken'] = credentials.OIDCToken;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.oidcToken, credentials.OIDCToken);\n    } else if (credentials.authMode === AUTH_MODE.AWS_IAM) {\n      newState['oidcJWTToken'] = credentials.IAM;\n      window.localStorage.setItem(LOCAL_STORAGE_KEY_NAMES.iam, credentials.iam);\n    }\n    this.setState(prevState => ({\n      credentials: {\n        ...prevState.credentials,\n        ...newState,\n      },\n      currentAuthMode: credentials.authMode,\n    }));\n  }\n\n  loadCredentials(apiInfo = this.state.apiInfo) {\n    const credentials = {};\n    const authProviders = [apiInfo.defaultAuthenticationType, ...apiInfo.additionalAuthenticationProviders];\n    const possibleAuth = authProviders.map(auth => auth.authenticationType);\n\n    if (possibleAuth.includes('API_KEY')) {\n      credentials['apiKey'] = DEFAULT_API_INFO.apiKey;\n    }\n\n    if (possibleAuth.includes('AMAZON_COGNITO_USER_POOLS')) {\n      try {\n        credentials['cognitoJWTToken'] = refreshToken(window.localStorage.getItem(LOCAL_STORAGE_KEY_NAMES.cognitoToken) || '');\n      } catch (e) {\n        console.warn('Invalid Cognito token found in local storage. Using the default OIDC token');\n        // token is not valid\n        credentials['cognitoJWTToken'] = refreshToken(DEFAULT_COGNITO_JWT_TOKEN);\n      }\n    }\n\n    if (possibleAuth.includes('OPENID_CONNECT')) {\n      const issuers = authProviders\n        .filter(auth => auth.authenticationType === AUTH_MODE.OPENID_CONNECT)\n        .map((auth: any) => auth.openIDConnectConfig.Issuer);\n      try {\n        credentials['oidcJWTToken'] = refreshToken(window.localStorage.getItem(LOCAL_STORAGE_KEY_NAMES.oidcToken) || '', issuers[0]);\n      } catch (e) {\n        console.warn('Invalid OIDC token found in local storage. Using the default OIDC token');\n        credentials['oidcJWTToken'] = refreshToken(DEFAULT_OIDC_JWT_TOKEN, issuers[0]);\n      }\n    }\n\n    if (possibleAuth.includes('AWS_IAM')) {\n      credentials['iam'] = 'AWS4-HMAC-SHA256 IAMAuthorized';\n    }\n\n    this.setState(() => ({\n      currentAuthMode: AUTH_MODE[apiInfo.defaultAuthenticationType.authenticationType] || AUTH_MODE.API_KEY,\n    }));\n    this.setState({ credentials });\n    return credentials;\n  }\n\n  render() {\n    const { query, schema, authModalVisible, apiInfo } = this.state;\n    const authModes = [\n      AUTH_MODE[apiInfo.defaultAuthenticationType.authenticationType],\n      ...apiInfo.additionalAuthenticationProviders.map(auth => AUTH_MODE[auth.authenticationType]),\n    ].filter(auth => auth);\n    const authModal = authModalVisible ? (\n      <AuthModal\n        selectedAuthMode={this.state.currentAuthMode}\n        currentOIDCToken={this.state.credentials.oidcJWTToken}\n        currentCognitoToken={this.state.credentials.cognitoJWTToken}\n        apiKey={this.state.credentials.apiKey}\n        authModes={authModes}\n        onClose={credentials => {\n          this.storeCredentials(credentials);\n          this.setState({ authModalVisible: false });\n        }}\n      />\n    ) : null;\n    return (\n      <>\n        {authModal}\n        <div className='graphiql-container'>\n          <GraphiQLExplorer\n            schema={schema}\n            query={query}\n            onEdit={this._handleEditQuery}\n            onRunOperation={operationName => this._graphiql.handleRunQuery(operationName)}\n            explorerIsOpen={this.state.explorerIsOpen}\n            onToggleExplorer={this._handleToggleExplorer}\n          />\n          <GraphiQL\n            ref={ref => (this._graphiql = ref)}\n            fetcher={this.fetch}\n            schema={schema}\n            query={query}\n            onEditQuery={this._handleEditQuery}\n          >\n            <GraphiQL.Toolbar>\n              <GraphiQL.Button\n                onClick={() => this._graphiql.handlePrettifyQuery()}\n                label='Prettify'\n                title='Prettify Query (Shift-Ctrl-P)'\n              />\n              <GraphiQL.Button onClick={() => this._graphiql.handleToggleHistory()} label='History' title='Show History' />\n              <GraphiQL.Button onClick={this._handleToggleExplorer} label='Explorer' title='Toggle Explorer' />\n              <GraphiQL.Button onClick={this.toggleAuthModal} label='Update Auth' title='Auth Setting' />\n              <GraphiQL.Select label='Auth' onSelect={this.switchAuthMode}>\n                {authModes.map(mode => (\n                  <GraphiQL.SelectOption\n                    label={`Use: ${AUTH_TYPE_TO_NAME[mode]}`}\n                    value={mode}\n                    key={mode}\n                    selected={mode === this.state.currentAuthMode}\n                  />\n                ))}\n              </GraphiQL.Select>\n            </GraphiQL.Toolbar>\n          </GraphiQL>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}