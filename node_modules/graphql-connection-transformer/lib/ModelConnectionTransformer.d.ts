import { Transformer, TransformerContext } from 'graphql-transformer-core';
import { DirectiveNode, ObjectTypeDefinitionNode, FieldDefinitionNode, InterfaceTypeDefinitionNode } from 'graphql';
import { ResourceFactory } from './resources';
export declare class ModelConnectionTransformer extends Transformer {
    resources: ResourceFactory;
    constructor();
    before: (ctx: TransformerContext) => void;
    field: (parent: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode, field: FieldDefinitionNode, directive: DirectiveNode, ctx: TransformerContext) => void;
    connectionWithKey: (parent: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode, field: FieldDefinitionNode, directive: DirectiveNode, ctx: TransformerContext) => void;
    private typeExist;
    private generateModelXConnectionType;
    private generateFilterAndKeyConditionInputs;
    private supportsConditions;
    private extendTypeWithConnection;
    private getPrimaryKeyField;
    private getSortField;
}
//# sourceMappingURL=ModelConnectionTransformer.d.ts.map