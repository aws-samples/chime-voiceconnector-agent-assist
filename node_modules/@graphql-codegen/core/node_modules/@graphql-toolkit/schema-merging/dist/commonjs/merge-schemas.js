"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_tools_1 = require("@kamilkisiela/graphql-tools");
const merge_typedefs_1 = require("./typedefs-mergers/merge-typedefs");
const merge_resolvers_1 = require("./merge-resolvers");
const common_1 = require("@graphql-toolkit/common");
function mergeSchemas({ schemas, typeDefs, resolvers, resolversComposition, schemaDirectives, resolverValidationOptions, logger, exclusions }) {
    return graphql_tools_1.makeExecutableSchema({
        typeDefs: merge_typedefs_1.mergeTypeDefs([...schemas, ...(typeDefs ? common_1.asArray(typeDefs) : [])], { exclusions }),
        resolvers: common_1.composeResolvers(merge_resolvers_1.mergeResolvers([...schemas.map(schema => common_1.extractResolversFromSchema(schema)), ...(resolvers ? common_1.asArray(resolvers) : [])], { exclusions }), resolversComposition || {}),
        schemaDirectives,
        resolverValidationOptions,
        logger,
    });
}
exports.mergeSchemas = mergeSchemas;
async function mergeSchemasAsync({ schemas, typeDefs, resolvers, resolversComposition, schemaDirectives, resolverValidationOptions, logger, exclusions }) {
    const [typeDefsOutput, resolversOutput] = await Promise.all([
        merge_typedefs_1.mergeTypeDefs([...schemas, ...(typeDefs ? common_1.asArray(typeDefs) : [])], { exclusions }),
        Promise.all(schemas.map(async (schema) => common_1.extractResolversFromSchema(schema))).then(extractedResolvers => common_1.composeResolvers(merge_resolvers_1.mergeResolvers([...extractedResolvers, ...(resolvers ? common_1.asArray(resolvers) : [])], { exclusions }), resolversComposition || {})),
    ]);
    return graphql_tools_1.makeExecutableSchema({
        typeDefs: typeDefsOutput,
        resolvers: resolversOutput,
        schemaDirectives,
        resolverValidationOptions,
        logger,
    });
}
exports.mergeSchemasAsync = mergeSchemasAsync;
//# sourceMappingURL=merge-schemas.js.map