import { NormalizedScalarsMap, ConvertOptions } from './types';
import { DeclarationBlockConfig } from './utils';
import { GraphQLSchema, FragmentDefinitionNode, OperationDefinitionNode, ASTNode } from 'graphql';
import { SelectionSetToObject } from './selection-set-to-object';
import { OperationVariablesToObject } from './variables-to-object';
import { BaseVisitor, BaseVisitorConvertOptions } from './base-visitor';
import { ParsedTypesConfig, RawTypesConfig } from './base-types-visitor';
export interface ParsedDocumentsConfig extends ParsedTypesConfig {
    addTypename: boolean;
    preResolveTypes: boolean;
    globalNamespace: boolean;
    operationResultSuffix: string;
    dedupeOperationSuffix: boolean;
    namespacedImportName: string | null;
    exportFragmentSpreadSubTypes: boolean;
}
export interface RawDocumentsConfig extends RawTypesConfig {
    /**
     * @name preResolveTypes
     * @type boolean
     * @default false
     * @description Avoid using `Pick` and resolve the actual primitive type of all selection set.
     *
     * @example
     * ```yml
     * plugins
     *   config:
     *     preResolveTypes: true
     * ```
     */
    preResolveTypes?: boolean;
    /**
     * @name globalNamespace
     * @type boolean
     * @default false
     * @description Puts all generated code under `global` namespace. Useful for Stencil integration.
     *
     * @example
     * ```yml
     * plugins
     *   config:
     *     globalNamespace: true
     * ```
     */
    globalNamespace?: boolean;
    /**
     * @name operationResultSuffix
     * @type string
     * @default ""
     * @description Adds a suffix to generated operation result type names
     */
    operationResultSuffix?: string;
    /**
     * @name dedupeOperationSuffix
     * @type boolean
     * @default false
     * @description Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.
     */
    dedupeOperationSuffix?: boolean;
    /**
     * @name exportFragmentSpreadSubTypes
     * @type boolean
     * @default false
     * @description If set to true, it will export the sub-types created in order to make it easier to access fields declared under fragment spread.
     */
    exportFragmentSpreadSubTypes?: boolean;
    namespacedImportName?: string;
}
export declare class BaseDocumentsVisitor<TRawConfig extends RawDocumentsConfig = RawDocumentsConfig, TPluginConfig extends ParsedDocumentsConfig = ParsedDocumentsConfig> extends BaseVisitor<TRawConfig, TPluginConfig> {
    protected _schema: GraphQLSchema;
    protected _unnamedCounter: number;
    protected _variablesTransfomer: OperationVariablesToObject;
    protected _selectionSetToObject: SelectionSetToObject;
    constructor(rawConfig: TRawConfig, additionalConfig: TPluginConfig, _schema: GraphQLSchema, defaultScalars?: NormalizedScalarsMap);
    setSelectionSetHandler(handler: SelectionSetToObject): void;
    setDeclarationBlockConfig(config: DeclarationBlockConfig): void;
    setVariablesTransformer(variablesTransfomer: OperationVariablesToObject): void;
    convertName(node: ASTNode | string, options?: ConvertOptions & BaseVisitorConvertOptions): string;
    get schema(): GraphQLSchema;
    get addTypename(): boolean;
    private handleAnonymouseOperation;
    FragmentDefinition(node: FragmentDefinitionNode): string;
    OperationDefinition(node: OperationDefinitionNode): string;
}
