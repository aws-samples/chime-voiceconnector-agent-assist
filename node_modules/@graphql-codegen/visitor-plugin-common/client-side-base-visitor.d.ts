import { BaseVisitor, ParsedConfig, RawConfig } from './base-visitor';
import { FragmentDefinitionNode, OperationDefinitionNode, GraphQLSchema } from 'graphql';
import { Types } from '@graphql-codegen/plugin-helpers';
import { LoadedFragment } from './types';
export declare enum DocumentMode {
    graphQLTag = "graphQLTag",
    documentNode = "documentNode",
    external = "external",
    string = "string"
}
export interface RawClientSideBasePluginConfig extends RawConfig {
    noGraphQLTag?: boolean;
    gqlImport?: string;
    noExport?: boolean;
    dedupeOperationSuffix?: boolean;
    operationResultSuffix?: string;
    documentVariablePrefix?: string;
    documentVariableSuffix?: string;
    documentMode?: DocumentMode;
    importOperationTypesFrom?: string;
    importDocumentNodeExternallyFrom?: string;
}
export interface ClientSideBasePluginConfig extends ParsedConfig {
    /**
     * @name gqlImport
     * @type string
     * @default gql#graphql-tag
     * @description Customize from which module will `gql` be imported from.
     * This is useful if you want to use modules other than `graphql-tag`, e.g. `graphql.macro`.
     *
     * @example graphql.macro
     * ```yml
     * config:
     *   gqlImport: graphql.macro#gql
     * ```
     * @example Gatsby
     * ```yml
     * config:
     *   gqlImport: gatsby#graphql
     * ```
     */
    gqlImport: string;
    /**
     * @name operationResultSuffix
     * @type string
     * @default ""
     * @description Adds a suffix to generated operation result type names
     */
    operationResultSuffix: string;
    /**
     * @name dedupeOperationSuffix
     * @type boolean
     * @default false
     * @description Set this configuration to `true` if you wish to make sure to remove duplicate operation name suffix.
     */
    dedupeOperationSuffix: boolean;
    noExport: boolean;
    documentVariablePrefix: string;
    documentVariableSuffix: string;
    fragmentVariablePrefix: string;
    fragmentVariableSuffix: string;
    /**
     * @name documentMode
     * @type 'graphQLTag' | 'documentNode' | 'external'
     * @default 'graphQLTag'
     * @description Declares how DocumentNode are created:
     * - `graphQLTag`: `graphql-tag` or other modules (check `gqlImport`) will be used to generate document nodes. If this is used, document nodes are generated on client side i.e. the module used to generate this will be shipped to the client
     * - `documentNode`: document nodes will be generated as objects when we generate the templates.
     * - `external`: document nodes are imported from an external file. To be used with `importDocumentNodeExternallyFrom`
     */
    documentMode?: DocumentMode;
    /**
     * @name importDocumentNodeExternallyFrom
     * @type string | 'near-operation-file'
     * @default ''
     * @description This config should be used if `documentMode` is `external`. This has 2 usage:
     * - any string: This would be the path to import document nodes from. This can be used if we want to manually create the document nodes e.g. Use `graphql-tag` in a separate file and export the generated document
     * - 'near-operation-file': This is a special mode that is intended to be used with `near-operation-file` preset to import document nodes from those files. If these files are `.graphql` files, we make use of webpack loader.
     *
     * @example
     * ```yml
     * config:
     *   documentMode: external
     *   importDocumentNodeExternallyFrom: path/to/document-node-file
     * ```
     *
     * ```yml
     * config:
     *   documentMode: external
     *   importDocumentNodeExternallyFrom: near-operation-file
     * ```
     *
     */
    importDocumentNodeExternallyFrom?: string;
    importOperationTypesFrom?: string;
}
export declare class ClientSideBaseVisitor<TRawConfig extends RawClientSideBasePluginConfig = RawClientSideBasePluginConfig, TPluginConfig extends ClientSideBasePluginConfig = ClientSideBasePluginConfig> extends BaseVisitor<TRawConfig, TPluginConfig> {
    protected _schema: GraphQLSchema;
    protected _fragments: LoadedFragment[];
    protected _collectedOperations: OperationDefinitionNode[];
    protected _documents: Types.DocumentFile[];
    protected _additionalImports: string[];
    constructor(_schema: GraphQLSchema, _fragments: LoadedFragment[], rawConfig: TRawConfig, additionalConfig: Partial<TPluginConfig>, documents?: Types.DocumentFile[]);
    protected _getFragmentName(fragment: FragmentDefinitionNode | string): string;
    protected _extractFragments(document: FragmentDefinitionNode | OperationDefinitionNode): string[];
    protected _transformFragments(document: FragmentDefinitionNode | OperationDefinitionNode): string[];
    protected _includeFragments(fragments: string[]): string;
    protected _prepareDocument(documentStr: string): string;
    protected _gql(node: FragmentDefinitionNode | OperationDefinitionNode): string;
    protected _generateFragment(fragmentDocument: FragmentDefinitionNode): string | void;
    private get fragmentsGraph();
    get fragments(): string;
    protected _parseImport(importStr: string): {
        moduleName: string;
        propName: string;
    };
    private clearExtension;
    getImports(): string[];
    protected buildOperation(node: OperationDefinitionNode, documentVariableName: string, operationType: string, operationResultType: string, operationVariablesTypes: string): string;
    OperationDefinition(node: OperationDefinitionNode): string;
}
