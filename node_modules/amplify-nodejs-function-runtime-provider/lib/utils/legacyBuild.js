"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildResource = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = __importDefault(require("glob"));
const child_process_1 = __importDefault(require("child_process"));
async function buildResource(request) {
    const resourceDir = path_1.default.join(request.srcRoot, 'src');
    if (!request.lastBuildTimestamp || isBuildStale(request.srcRoot, request.lastBuildTimestamp)) {
        installDependencies(resourceDir);
        if (request.legacyBuildHookParams) {
            runBuildScriptHook(request.legacyBuildHookParams.resourceName, request.legacyBuildHookParams.projectRoot);
        }
        return Promise.resolve({ rebuilt: true });
    }
    return Promise.resolve({ rebuilt: false });
}
exports.buildResource = buildResource;
function runBuildScriptHook(resourceName, projectRoot) {
    const scriptName = `amplify:${resourceName}`;
    if (scriptExists(projectRoot, scriptName)) {
        runPackageManager(projectRoot, scriptName);
    }
}
function scriptExists(projectRoot, scriptName) {
    const packageJsonPath = path_1.default.normalize(path_1.default.join(projectRoot, 'package.json'));
    if (fs_extra_1.default.existsSync(packageJsonPath)) {
        const rootPackageJsonContents = require(packageJsonPath);
        return rootPackageJsonContents.scripts && rootPackageJsonContents.scripts[scriptName];
    }
    return false;
}
function installDependencies(resourceDir) {
    runPackageManager(resourceDir);
}
function runPackageManager(cwd, scriptName) {
    const isWindows = /^win/.test(process.platform);
    const npm = isWindows ? 'npm.cmd' : 'npm';
    const yarn = isWindows ? 'yarn.cmd' : 'yarn';
    const useYarn = fs_extra_1.default.existsSync(`${cwd}/yarn.lock`);
    const packageManager = useYarn ? yarn : npm;
    const args = toPackageManagerArgs(useYarn, scriptName);
    const childProcessResult = child_process_1.default.spawnSync(packageManager, args, {
        cwd,
        stdio: 'pipe',
        encoding: 'utf-8',
    });
    if (childProcessResult.status !== 0) {
        throw new Error(childProcessResult.output.join());
    }
}
function toPackageManagerArgs(useYarn, scriptName) {
    if (scriptName) {
        return useYarn ? [scriptName] : ['run-script', scriptName];
    }
    return useYarn ? [] : ['install'];
}
function isBuildStale(resourceDir, lastBuildTimestamp) {
    const dirTime = new Date(fs_extra_1.default.statSync(resourceDir).mtime);
    if (dirTime > lastBuildTimestamp) {
        return true;
    }
    const fileUpdatedAfterLastBuild = glob_1.default
        .sync(`${resourceDir}/**`)
        .filter(p => !p.includes('dist'))
        .filter(p => !p.includes('node_modules'))
        .find(file => new Date(fs_extra_1.default.statSync(file).mtime) > lastBuildTimestamp);
    return !!fileUpdatedAfterLastBuild;
}
//# sourceMappingURL=legacyBuild.js.map