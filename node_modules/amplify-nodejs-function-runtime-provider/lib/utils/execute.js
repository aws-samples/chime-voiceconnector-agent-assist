"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.invokeFunction = void 0;
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
async function loadHandler(root, handler) {
    const handlerParts = path_1.default.parse(handler);
    try {
        const handler = await Promise.resolve().then(() => __importStar(require(path_1.default.join(root, handlerParts.dir, handlerParts.name))));
        return handler[handlerParts.ext.replace('.', '')];
    }
    catch (err) {
        throw new Error(`Could not load lambda handler function due to ${err}`);
    }
}
function invokeFunction(options) {
    return new Promise(async (resolve, reject) => {
        let returned = false;
        const context = {
            done(error, result) {
                if (!returned) {
                    returned = true;
                    if (error === null || typeof error === 'undefined') {
                        context.succeed(result);
                    }
                    else {
                        context.fail(error);
                    }
                }
            },
            succeed(result) {
                returned = true;
                resolve(result);
            },
            fail(error) {
                returned = true;
                reject(error);
            },
            awsRequestId: 'LAMBDA_INVOKE',
            logStreamName: 'LAMBDA_INVOKE',
        };
        if (options.packageFolder) {
            const p = path_1.default.resolve(options.packageFolder);
            if (!fs_extra_1.existsSync(p)) {
                context.fail(`packageFolder ${options.packageFolder} does not exist`);
                return;
            }
            process.chdir(p);
        }
        else {
            context.fail('packageFolder is not defined');
            return;
        }
        if (!options.handler) {
            context.fail('handler is not defined');
            return;
        }
        if (options.context) {
            Object.assign(context, options.context);
        }
        const callback = (error, object) => {
            context.done(error, object);
        };
        const lambdaHandler = await loadHandler(options.packageFolder, options.handler);
        const { event } = options;
        try {
            const response = lambdaHandler(JSON.parse(event), context, callback);
            if (typeof response === 'object' && typeof response.then === 'function') {
                const result = await response;
                if (result !== undefined) {
                    context.done(null, result);
                }
                else {
                    context.done(null, null);
                }
            }
            else if (response !== undefined) {
                context.done(null, null);
            }
        }
        catch (e) {
            context.done(e, null);
        }
    });
}
exports.invokeFunction = invokeFunction;
process.on('message', async (options) => {
    try {
        const result = await invokeFunction(JSON.parse(options));
        process.send(JSON.stringify({ result, error: null }));
    }
    catch (error) {
        process.send(JSON.stringify({
            result: null,
            error: {
                type: 'Lambda:Unhandled',
                message: error.message,
            },
        }));
    }
    process.exit(1);
});
//# sourceMappingURL=execute.js.map