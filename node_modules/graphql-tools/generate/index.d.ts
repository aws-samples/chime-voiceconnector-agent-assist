import { GraphQLSchema, GraphQLFieldResolver } from 'graphql';
import { IAddResolversToSchemaOptions, IResolvers, IResolverValidationOptions } from '../Interfaces';
import addResolversToSchema from './addResolversToSchema';
import addSchemaLevelResolver from './addSchemaLevelResolver';
import assertResolversPresent from './assertResolversPresent';
export { addResolversToSchema, addSchemaLevelResolver, assertResolversPresent };
export { default as attachDirectiveResolvers } from './attachDirectiveResolvers';
export { default as attachConnectorsToContext } from './attachConnectorsToContext';
export { default as buildSchemaFromTypeDefinitions } from './buildSchemaFromTypeDefinitions';
export { chainResolvers } from './chainResolvers';
export { default as checkForResolveTypeResolver } from './checkForResolveTypeResolver';
export { default as concatenateTypeDefs } from './concatenateTypeDefs';
export { default as decorateWithLogger } from './decorateWithLogger';
export { default as extendResolversFromInterfaces } from './extendResolversFromInterfaces';
export { extractExtensionDefinitions, filterExtensionDefinitions, } from './extensionDefinitions';
export { default as SchemaError } from './SchemaError';
export * from './makeExecutableSchema';
export declare function addResolveFunctionsToSchema(schemaOrOptions: GraphQLSchema | IAddResolversToSchemaOptions, legacyInputResolvers?: IResolvers, legacyInputValidationOptions?: IResolverValidationOptions): GraphQLSchema;
export declare function addSchemaLevelResolveFunction(schema: GraphQLSchema, fn: GraphQLFieldResolver<any, any>): void;
export declare function assertResolveFunctionsPresent(schema: GraphQLSchema, resolverValidationOptions?: IResolverValidationOptions): void;
