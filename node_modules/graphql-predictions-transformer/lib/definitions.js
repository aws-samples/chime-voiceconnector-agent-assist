"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInputValueAction = exports.addInputArgument = exports.getActionInputType = exports.makeActionInputObject = exports.getActionInputName = exports.capitalizeFirstLetter = void 0;
const graphql_1 = require("graphql");
const graphql_transformer_common_1 = require("graphql-transformer-common");
function inputValueDefinition(inputValue, namedType, isNonNull = false) {
    return {
        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
        name: { kind: 'Name', value: inputValue },
        type: isNonNull ? graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(namedType)) : graphql_transformer_common_1.makeNamedType(namedType),
        directives: [],
    };
}
function capitalizeFirstLetter(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
exports.capitalizeFirstLetter = capitalizeFirstLetter;
function getActionInputName(action, fieldName) {
    return `${capitalizeFirstLetter(fieldName)}${capitalizeFirstLetter(action)}Input`;
}
exports.getActionInputName = getActionInputName;
function makeActionInputObject(fieldName, fields) {
    return {
        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        name: { kind: 'Name', value: `${capitalizeFirstLetter(fieldName)}Input` },
        fields,
        directives: []
    };
}
exports.makeActionInputObject = makeActionInputObject;
function getActionInputType(action, fieldName, isFirst = false) {
    const actionInputFields = {
        identifyText: [inputValueDefinition('key', 'String', true)],
        identifyLabels: [inputValueDefinition('key', 'String', true)],
        translateText: [
            inputValueDefinition('sourceLanguage', 'String', true),
            inputValueDefinition('targetLanguage', 'String', true),
            ...(isFirst ? [inputValueDefinition('text', 'String', true)] : []),
        ],
        convertTextToSpeech: [
            inputValueDefinition('voiceID', 'String', true),
            ...(isFirst ? [inputValueDefinition('text', 'String', true)] : []),
        ]
    };
    return {
        kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,
        name: { kind: 'Name', value: getActionInputName(action, fieldName) },
        fields: actionInputFields[action],
        directives: []
    };
}
exports.getActionInputType = getActionInputType;
function addInputArgument(field, fieldName, isList) {
    return {
        ...field,
        arguments: [
            {
                kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
                name: { kind: 'Name', value: 'input' },
                type: graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(`${capitalizeFirstLetter(fieldName)}Input`)),
                directives: [],
            },
        ],
        type: isList ? graphql_transformer_common_1.makeListType(graphql_transformer_common_1.makeNamedType('String')) : graphql_transformer_common_1.makeNamedType('String'),
    };
}
exports.addInputArgument = addInputArgument;
function createInputValueAction(action, fieldName) {
    return {
        kind: graphql_1.Kind.INPUT_VALUE_DEFINITION,
        name: { kind: 'Name', value: `${action}` },
        type: graphql_transformer_common_1.makeNonNullType(graphql_transformer_common_1.makeNamedType(getActionInputName(action, fieldName))),
        directives: [],
    };
}
exports.createInputValueAction = createInputValueAction;
//# sourceMappingURL=definitions.js.map