{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Root stack for the Amplify AWS CloudFormation provider",
	"Parameters": {
		"DeploymentBucketName": {
			"Description": "Name of the common deployment bucket provided by the parent stack",
			"Type": "String",
			"Default": "DeploymentBucket"
		},
		"AuthRoleName": {
			"Type": "String",
			"Default": "AuthRoleName"
		},
		"UnauthRoleName": {
			"Type": "String",
			"Default": "UnauthRoleName"
		}
	},
	"Resources": {
		"DeploymentBucket": {
			"Type": "AWS::S3::Bucket",
			"DeletionPolicy": "Retain",
			"Properties": {
				"BucketName": {
					"Ref": "DeploymentBucketName"
				}
			}
		},
		"AuthRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Ref": "AuthRoleName"
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Sid": "",
							"Effect": "Deny",
							"Principal": {
								"Federated": "cognito-identity.amazonaws.com"
							},
							"Action": "sts:AssumeRoleWithWebIdentity"
						}
					]
				}
			}
		},
		"UnauthRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Ref": "UnauthRoleName"
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Sid": "",
							"Effect": "Deny",
							"Principal": {
								"Federated": "cognito-identity.amazonaws.com"
							},
							"Action": "sts:AssumeRoleWithWebIdentity"
						}
					]
				}
			}
		},
		"authcognitocf0c6096": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": "https://s3.amazonaws.com/amplify-chime-vc-agentassist-zhizhk-94343-deployment/amplify-cfn-templates/auth/cognitocf0c6096-cloudformation-template.yml",
				"Parameters": {
					"identityPoolName": "cognitocf0c6096_identitypool_cf0c6096",
					"allowUnauthenticatedIdentities": false,
					"thirdPartyAuth": false,
					"lambdaLogPolicy": "cognitocf0c6096_lambda_log_policy",
					"openIdLambdaRoleName": "cognitocf0c6096_openid_lambda_role",
					"openIdRolePolicy": "cognitocf0c6096_openid_pass_role_policy",
					"openIdLambdaIAMPolicy": "cognitocf0c6096_openid_lambda_iam_policy",
					"openIdLogPolicy": "cognitocf0c6096_openid_lambda_log_policy",
					"userPoolName": "cognitocf0c6096_userpool_cf0c6096",
					"autoVerifiedAttributes": "email",
					"mfaConfiguration": "OFF",
					"mfaTypes": "SMS Text Message",
					"roleName": "cognitocf0c6096_sns-role",
					"roleExternalId": "cognitocf0c6096_role_external_id",
					"policyName": "cognitocf0c6096-sns-policy",
					"smsAuthenticationMessage": "Your authentication code is {####}",
					"smsVerificationMessage": "Your verification code is {####}",
					"emailVerificationSubject": "Your verification code",
					"emailVerificationMessage": "Your verification code is {####}",
					"defaultPasswordPolicy": false,
					"passwordPolicyMinLength": 8,
					"passwordPolicyCharacters": "Requires Lowercase,Requires Uppercase,Requires Numbers,Requires Symbols",
					"requiredAttributes": "email",
					"userpoolClientName": "cognitocf0c6096_app_client",
					"userpoolClientGenerateSecret": true,
					"userpoolClientRefreshTokenValidity": 30,
					"userpoolClientReadAttributes": "email",
					"mfaLambdaRole": "cognitocf0c6096_totp_lambda_role",
					"mfaLambdaLogPolicy": "cognitocf0c6096_totp_lambda_log_policy",
					"mfaPassRolePolicy": "cognitocf0c6096_totp_pass_role_policy",
					"mfaLambdaIAMPolicy": "cognitocf0c6096_totp_lambda_iam_policy",
					"userpoolClientLambdaRole": "cognitocf0c6096_userpoolclient_lambda_role",
					"userpoolClientLogPolicy": "cognitocf0c6096_userpoolclient_lambda_log_policy",
					"userpoolClientLambdaPolicy": "cognitocf0c6096_userpoolclient_lambda_iam_policy",
					"userpoolClientSetAttributes": false,
					"useDefault": "default",
					"resourceName": "cognitocf0c6096",
					"authSelections": "identityPoolAndUserPool",
					"authRoleName": {
						"Ref": "AuthRoleName"
					},
					"unauthRoleName": {
						"Ref": "UnauthRoleName"
					},
					"authRoleArn": {
						"Fn::GetAtt": [
							"AuthRole",
							"Arn"
						]
					},
					"unauthRoleArn": {
						"Fn::GetAtt": [
							"UnauthRole",
							"Arn"
						]
					},
					"env": "zhizhk"
				}
			}
		},
		"apichimeagentassist": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": "https://s3.amazonaws.com/amplify-chime-vc-agentassist-zhizhk-94343-deployment/amplify-cfn-templates/api/cloudformation-template.json",
				"Parameters": {
					"CreateAPIKey": 1,
					"AppSyncApiName": "chimeagentassist",
					"DynamoDBBillingMode": "PAY_PER_REQUEST",
					"DynamoDBEnableServerSideEncryption": "false",
					"TranscriptSegmentTableName": "TranscriptSegment",
					"S3DeploymentBucket": "amplify-chime-vc-agentassist-zhizhk-94343-deployment",
					"S3DeploymentRootKey": "amplify-appsync-files/7271413796594efd5c9b9ac3d17ff77160dda97d",
					"env": "zhizhk"
				}
			}
		},
		"hostingS3AndCloudFront": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": "https://s3.amazonaws.com/amplify-chime-vc-agentassist-zhizhk-94343-deployment/amplify-cfn-templates/hosting/template.json",
				"Parameters": {
					"bucketName": "chime-vc-agentassist-20200303170349-hostingbucket",
					"env": "zhizhk"
				}
			}
		},
		"functionchimevcagentassist76fdc921": {
			"Type": "AWS::CloudFormation::Stack",
			"Properties": {
				"TemplateURL": "https://s3.amazonaws.com/amplify-chime-vc-agentassist-zhizhk-94343-deployment/amplify-cfn-templates/function/chimevcagentassist76fdc921-cloudformation-template.json",
				"Parameters": {
					"TranscriptSegmentTableStreamArn": "arn:aws:dynamodb:us-east-1:812207417033:table/TranscriptSegment/stream/2020-02-28T09:48:08.588",
					"TranscriptSegmentTableName": "TranscriptSegment",
					"apichimeagentassistGraphQLAPIIdOutput": {
						"Fn::GetAtt": [
							"apichimeagentassist",
							"Outputs.GraphQLAPIIdOutput"
						]
					},
					"apichimeagentassistGraphQLAPIEndpointOutput": {
						"Fn::GetAtt": [
							"apichimeagentassist",
							"Outputs.GraphQLAPIEndpointOutput"
						]
					},
					"apichimeagentassistGraphQLAPIKeyOutput": {
						"Fn::GetAtt": [
							"apichimeagentassist",
							"Outputs.GraphQLAPIKeyOutput"
						]
					},
					"env": "zhizhk"
				}
			}
		},
		"UpdateRolesWithIDPFunction": {
			"DependsOn": [
				"AuthRole",
				"UnauthRole",
				"authcognitocf0c6096"
			],
			"Type": "AWS::Lambda::Function",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"const response = require('cfn-response');",
								"const aws = require('aws-sdk');",
								"let responseData = {};",
								"exports.handler = function(event, context) {",
								"  try {",
								"    let authRoleName = event.ResourceProperties.authRoleName;",
								"    let unauthRoleName = event.ResourceProperties.unauthRoleName;",
								"    let idpId = event.ResourceProperties.idpId;",
								"    let promises = [];",
								"    let authParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'authenticated'}}}]};",
								"    let unauthParamsJson = { 'Version': '2012-10-17','Statement': [{'Effect': 'Allow','Principal': {'Federated': 'cognito-identity.amazonaws.com'},'Action': 'sts:AssumeRoleWithWebIdentity','Condition': {'StringEquals': {'cognito-identity.amazonaws.com:aud': idpId},'ForAnyValue:StringLike': {'cognito-identity.amazonaws.com:amr': 'unauthenticated'}}}]};",
								"    if (event.RequestType == 'Delete') {",
								"        delete authParamsJson.Statement.Condition;",
								"        delete unauthParamsJson.Statement.Condition;",
								"        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
								"        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
								"        const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
								"        promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
								"        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
								"        Promise.all(promises)",
								"         .then((res) => {",
								"            console.log(\"delete response data\" + JSON.stringify(res));",
								"            response.send(event, context, response.SUCCESS, {});",
								"         });",
								"    }",
								"    if (event.RequestType == 'Update' || event.RequestType == 'Create') {",
								"       const iam = new aws.IAM({ apiVersion: '2010-05-08', region: event.ResourceProperties.region});",
								"        let authParams = { PolicyDocument: JSON.stringify(authParamsJson),RoleName: authRoleName};",
								"        let unauthParams = {PolicyDocument: JSON.stringify(unauthParamsJson),RoleName: unauthRoleName};",
								"        promises.push(iam.updateAssumeRolePolicy(authParams).promise());",
								"        promises.push(iam.updateAssumeRolePolicy(unauthParams).promise());",
								"        Promise.all(promises)",
								"         .then((res) => {",
								"            console.log(\"createORupdate\" + res);",
								"            console.log(\"response data\" + JSON.stringify(res));",
								"            response.send(event, context, response.SUCCESS, {});",
								"         });",
								"    }",
								"  } catch(err) {",
								"       console.log(err.stack);",
								"       responseData = {Error: err};",
								"       response.send(event, context, response.FAILED, responseData);",
								"       throw err;",
								"  }",
								"};"
							]
						]
					}
				},
				"Handler": "index.handler",
				"Runtime": "nodejs10.x",
				"Timeout": "300",
				"Role": {
					"Fn::GetAtt": [
						"UpdateRolesWithIDPFunctionRole",
						"Arn"
					]
				}
			}
		},
		"UpdateRolesWithIDPFunctionOutputs": {
			"Type": "Custom::LambdaCallout",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"UpdateRolesWithIDPFunction",
						"Arn"
					]
				},
				"region": {
					"Ref": "AWS::Region"
				},
				"idpId": {
					"Fn::GetAtt": [
						"authcognitocf0c6096",
						"Outputs.IdentityPoolId"
					]
				},
				"authRoleName": {
					"Ref": "AuthRoleName"
				},
				"unauthRoleName": {
					"Ref": "UnauthRoleName"
				}
			}
		},
		"UpdateRolesWithIDPFunctionRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"RoleName": {
					"Fn::Join": [
						"",
						[
							{
								"Ref": "AuthRoleName"
							},
							"-idp"
						]
					]
				},
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Policies": [
					{
						"PolicyName": "UpdateRolesWithIDPFunctionPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"logs:CreateLogGroup",
										"logs:CreateLogStream",
										"logs:PutLogEvents"
									],
									"Resource": "arn:aws:logs:*:*:*"
								},
								{
									"Effect": "Allow",
									"Action": "iam:UpdateAssumeRolePolicy",
									"Resource": {
										"Fn::GetAtt": [
											"AuthRole",
											"Arn"
										]
									}
								},
								{
									"Effect": "Allow",
									"Action": "iam:UpdateAssumeRolePolicy",
									"Resource": {
										"Fn::GetAtt": [
											"UnauthRole",
											"Arn"
										]
									}
								}
							]
						}
					}
				]
			}
		}
	},
	"Outputs": {
		"Region": {
			"Description": "CloudFormation provider root stack Region",
			"Value": {
				"Ref": "AWS::Region"
			},
			"Export": {
				"Name": {
					"Fn::Sub": "${AWS::StackName}-Region"
				}
			}
		},
		"StackName": {
			"Description": "CloudFormation provider root stack ID",
			"Value": {
				"Ref": "AWS::StackName"
			},
			"Export": {
				"Name": {
					"Fn::Sub": "${AWS::StackName}-StackName"
				}
			}
		},
		"StackId": {
			"Description": "CloudFormation provider root stack name",
			"Value": {
				"Ref": "AWS::StackId"
			},
			"Export": {
				"Name": {
					"Fn::Sub": "${AWS::StackName}-StackId"
				}
			}
		},
		"DeploymentBucketName": {
			"Description": "CloudFormation provider root stack deployment bucket name",
			"Value": {
				"Ref": "DeploymentBucketName"
			},
			"Export": {
				"Name": {
					"Fn::Sub": "${AWS::StackName}-DeploymentBucketName"
				}
			}
		},
		"AuthRoleArn": {
			"Value": {
				"Fn::GetAtt": [
					"AuthRole",
					"Arn"
				]
			}
		},
		"UnauthRoleArn": {
			"Value": {
				"Fn::GetAtt": [
					"UnauthRole",
					"Arn"
				]
			}
		},
		"AuthRoleName": {
			"Value": {
				"Ref": "AuthRole"
			}
		},
		"UnauthRoleName": {
			"Value": {
				"Ref": "UnauthRole"
			}
		}
	}
}