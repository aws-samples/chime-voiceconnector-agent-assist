{"version":3,"sources":["utils/audio.js","aws-exports.js","constants/index.js","utils/elasticsearch.js","utils/sts.js","utils/transcript.js","agentAssist/AgentAssist.js","search/StreamingRecord.js","search/HistorySearch.js","apps/App.js","utils/serviceWorker.js","index.js"],"names":["defaultRegion","awsExports","aws_project_region","getMergedAudioURL","bucket","oneAudioObject","otherAudioObject","transactionId","Auth","currentCredentials","then","creds","lambda","AWS","Lambda","region","credentials","essentialCredentials","params","FunctionName","MERGE_AUDIO_LAMBDA_FUNCTION_NAME","InvocationType","Buffer","from","JSON","stringify","invoke","promise","data","body","parse","Payload","undefined","urlFromLambda","url","config","update","awsmobile","TRANSCRIPT_TABLE_NAME","TRANSCRIPT_TABLE_KEYS","TRANSACTION_ID","CALL_ID","START_TIME","SPEAKER","END_TIME","SEGMENT_ID","TRANSCRIPT","LOGGED_ON","IS_PARTIAL","IS_FINAL","SEARCH_LAMBDA_FUNCTION_NAME","MAX_RESULT","ELASTIC_SEARCH_INDEX_NAMES","WAVFILE","METADATA","searchFunctionName","transcriptTableName","maxRecords","getSignedUrl","objectKey","S3","signatureVersion","getSignedUrlPromise","Bucket","Key","retrieveBucketAndKey","transactionid","esParams","index","type","size","query","query_string","default_field","output","Records","retrieveTranscriptForTransactionId","ddb","DynamoDB","DocumentClient","TableName","KeyConditionExpression","ExpressionAttributeNames","ExpressionAttributeValues","Count","Items","filter","item","IsFinal","queryCall","keyword","Promise","all","queryTranscriptKeyword","queryMetadataForKeyword","results","transcriptionPromises","metadataPromises","map","d","TransactionId","metadata","length","result","fromNumber","Direction","direction","StartTimeEpochSeconds","Math","ceil","Date","startTime","EndTimeEpochSeconds","endTime","SourcePhoneNumber","resolve","sort","order","multi_match","match","Transcript","operator","mergeAndComprehendTranscript","segments","mergedSegments","mergeTranscript","Comprehend","forEach","segment","i","Speaker","LanguageCode","Text","detectSentiment","error","sentimentResponse","console","SentimentScore","Negative","Sentiment","toFixed","SentimentClass","Positive","daRow","document","getElementById","tBodies","rows","cells","className","innerText","showSentiment","detectKeyPhrases","keyphraseResponse","Array","isArray","KeyPhrases","keyPhrase","Score","row","innerHTML","replace","showKeyphrases","a","b","LoggedOn","push","e","search","Action","readTranscript","AgentAssist","React","Component","constructor","props","super","this","state","transcript","componentDidMount","readTranscriptPaginationAndUpdate","setState","API","graphql","graphqlOperation","observable","addSegmentToState","updatedTranscript","slice","updateTranscript","value","onAnnounceCreateTranscriptSegment","subscribe","next","complete","log","firstPage","nextToken","listTranscriptSegments","concat","items","nextPage","shouldMergeTranscript","render","latestCall","reduce","acc","curr","currentTransactionId","EndTime","key","StartTime","href","hidden","id","style","width","onClick","preventDefault","title","withAuthenticator","StreamingRecord","onExpand","event","expanded","agentLegAudioUrl","callerLegAudioUrl","pairs","urlPromise","pair","Time","urls","mergedAudioUrl","onSwitchChange","requireMerged","target","checked","ExpansionPanel","onChange","ExpansionPanelSummary","expandIcon","aria-controls","Avatar","Typography","getSubContent","moment","unix","fromNow","diffSeconds","duration","formatString","asSeconds","utc","asMilliseconds","format","formatDuration","getDateAndDuration","ExpansionPanelDetails","tr","speaker","lines","keywords","backgroundColor","split","word","matchedKeyword","RegExp","exec","test","e1","e2","highlightTranscript","getDetail","FormControlLabel","control","Switch","label","getMergedSwitch","controls","volume","src","getAudio","HistorySearch","handleSearch","currInput","accountId","componentDidUpdate","prevProps","prevState","input","noValidate","autoComlete","TextField","variant","fullWidth","helperText","r","Amplify","configure","App","handleChange","newValue","STS","getCallerIdentity","Account","Tabs","indicatorColor","textColor","centered","Tab","Boolean","window","location","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.229e82aa.chunk.js","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport AWS from 'aws-sdk';\nimport { Auth } from 'aws-amplify';\n\nimport awsExports from '../aws-exports';\nimport { MERGE_AUDIO_LAMBDA_FUNCTION_NAME } from '../constants';\n\nconst defaultRegion = awsExports.aws_project_region;\nAWS.config.update({ region: defaultRegion });\n\nexport function getMergedAudioURL(bucket, oneAudioObject, otherAudioObject, transactionId) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      FunctionName: MERGE_AUDIO_LAMBDA_FUNCTION_NAME,\n      InvocationType: 'RequestResponse',\n    };\n\n    params['Payload'] = Buffer.from(\n      JSON.stringify({\n        bucket: bucket,\n        oneAudioObject: oneAudioObject,\n        otherAudioObject: otherAudioObject,\n        transactionId: transactionId,\n      })\n    );\n    return lambda\n      .invoke(params)\n      .promise()\n      .then(data => {\n        const body = JSON.parse(data.Payload).body;\n        if (body !== undefined) {\n          const urlFromLambda = body.url;\n\n          if (urlFromLambda === undefined) {\n            return '';\n          }\n          return urlFromLambda;\n        } else {\n          return '';\n        }\n      });\n  });\n}\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:da548ad1-04e6-4632-9a07-1442e38c4763\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_LXVMQXoVD\",\n    \"aws_user_pools_web_client_id\": \"2d8pv68eepg1e0brtr0f67pi7u\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://hyrd63b2frd2bktcsiclvpzkii.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-sk4dq4wjzjbl3lxsxzltgd2ja4\",\n    \"aws_content_delivery_bucket\": \"chime-vc-agentassist-083981752084-hostingbucket-dev\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"http://chime-vc-agentassist-083981752084-hostingbucket-dev.s3-website-us-east-1.amazonaws.com\"\n};\n\n\nexport default awsmobile;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n// ---- Transcript Table start ----\n// Name of DynamoDB table which stores transcript\nexport const TRANSCRIPT_TABLE_NAME = 'TranscriptSegment';\n\n// Key name for transcript table\nexport const TRANSCRIPT_TABLE_KEYS = {\n  TRANSACTION_ID: 'TransactionId',\n  CALL_ID: 'CallId',\n  START_TIME: 'StartTime',\n  SPEAKER: 'Speaker',\n  END_TIME: 'EndTime',\n  SEGMENT_ID: 'SegmentId',\n  TRANSCRIPT: 'Transcript',\n  LOGGED_ON: 'LoggedOn',\n  IS_PARTIAL: 'IsPartial',\n  IS_FINAL: 'IsFinal',\n};\n// ---- Transcript Table end ----\n\n// ---- Search start ----\n// Name of Lambda function\nexport const SEARCH_LAMBDA_FUNCTION_NAME = 'chime-search-transcript-and-audio';\nexport const MERGE_AUDIO_LAMBDA_FUNCTION_NAME = 'chime-retrieve-merged-audio-url';\n\n// Max number of result per one search returned by elastic search\nexport const MAX_RESULT = 10;\n\n// Search index\nexport const ELASTIC_SEARCH_INDEX_NAMES = {\n  WAVFILE: 'wavfile',\n  METADATA: 'metadata',\n  TRANSCRIPT: 'transcript',\n};\n// ---- Search end ----\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport AWS from 'aws-sdk';\nimport { Auth } from 'aws-amplify';\n\nimport awsExports from '../aws-exports';\nimport {\n  SEARCH_LAMBDA_FUNCTION_NAME,\n  TRANSCRIPT_TABLE_NAME,\n  MAX_RESULT,\n  TRANSCRIPT_TABLE_KEYS,\n  ELASTIC_SEARCH_INDEX_NAMES,\n} from '../constants';\n\nconst defaultRegion = awsExports.aws_project_region;\nAWS.config.update({ region: defaultRegion });\n\nconst config = {\n  searchFunctionName: SEARCH_LAMBDA_FUNCTION_NAME,\n  transcriptTableName: TRANSCRIPT_TABLE_NAME,\n  maxRecords: MAX_RESULT,\n};\n\nexport function getSignedUrl(bucket, objectKey) {\n  return Auth.currentCredentials().then(creds => {\n    const s3 = new AWS.S3({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n      signatureVersion: 'v4',\n    });\n\n    return s3.getSignedUrlPromise('getObject', { Bucket: bucket, Key: objectKey });\n  });\n}\n\nexport function retrieveBucketAndKey(transactionid) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n    const params = {\n      FunctionName: config.searchFunctionName,\n      InvocationType: 'RequestResponse',\n    };\n\n    const esParams = {\n      index: ELASTIC_SEARCH_INDEX_NAMES.WAVFILE,\n      type: '_doc',\n      body: {\n        size: 2,\n        query: {\n          query_string: {\n            default_field: TRANSCRIPT_TABLE_KEYS.TRANSACTION_ID,\n            query: transactionid,\n          },\n        },\n      },\n      output: ['Bucket', 'Key', 'Time'],\n    };\n    params['Payload'] = Buffer.from(JSON.stringify(esParams));\n\n    return lambda\n      .invoke(params)\n      .promise()\n      .then((data) => {\n        const body = JSON.parse(data.Payload).body;\n        if (body === undefined || body === []) {\n          return [];\n        }\n        return JSON.parse(data.Payload).body.Records;\n      });\n  });\n}\n\nexport function retrieveTranscriptForTransactionId(transactionId) {\n  return Auth.currentCredentials().then(creds => {\n    const ddb = new AWS.DynamoDB.DocumentClient({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      TableName: config.transcriptTableName,\n      KeyConditionExpression: '#id = :id',\n      ExpressionAttributeNames: {\n        '#id': TRANSCRIPT_TABLE_KEYS.TRANSACTION_ID,\n      },\n      ExpressionAttributeValues: {\n        ':id': transactionId,\n      },\n    };\n\n    return ddb\n      .query(params)\n      .promise()\n      .then((data) => {\n        if (data.Count === 0) {\n          return [];\n        }\n\n        return data.Items.filter(item => item.IsFinal !== true);\n      });\n  });\n}\n\nexport function queryCall(keyword) {\n  return Promise.all([queryTranscriptKeyword(keyword), queryMetadataForKeyword(keyword)]).then(results => {\n      // First step: find transaction id of the call that is correlated to the keyword.\n      const transcriptionPromises = results[0], metadataPromises = results[1];\n      return Promise.all([keyword,\n        transcriptionPromises.map(d => {\n          return queryMetadataForKeyword(d.TransactionId).then(metadata => {\n            // Metadata should correlate with only one transactionId.\n            if (metadata.length === 1) {\n              return metadata[0];\n            }\n          });\n        }),\n        metadataPromises\n      ]);\n    }).then(promise => {\n      // Second step: extract data for frontend.\n      const metadata = [...promise[1], ...promise[2]]\n      const result = metadata.map(d => {\n        const fromNumber = (d.fromNumber !== undefined || d.fromNumber !== null) ? d.fromNumber : \"Unknown\";\n        return {\n          TransactionId: d.transactionId,\n          Direction: d.direction,\n          StartTimeEpochSeconds: Math.ceil(new Date(d.startTime) / 1000),\n          EndTimeEpochSeconds: Math.ceil(new Date(d.endTime) / 1000),\n          SourcePhoneNumber: fromNumber,\n        }\n      });\n\n      return new Promise(resolve => resolve(result));\n    })\n}\n\nfunction queryMetadataForKeyword(keyword) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      FunctionName: config.searchFunctionName,\n      InvocationType: 'RequestResponse',\n    };\n\n    const esParams = {\n      index: ELASTIC_SEARCH_INDEX_NAMES.METADATA,\n      type: '_doc',\n      body: {\n        size: config.maxRecords,\n        sort: { startTime: { order: 'desc' } },\n        query: {\n          multi_match: {\n            type: 'best_fields',\n            query: keyword,\n          },\n        },\n      },\n      output: [],\n    };\n\n    params['Payload'] = Buffer.from(JSON.stringify(esParams));\n    return lambda\n      .invoke(params)\n      .promise()\n      .then((data) => {\n        const body = JSON.parse(data.Payload).body;\n        if (body === undefined || body === []) {\n          return [];\n        }\n        return JSON.parse(data.Payload).body.Records;\n      });\n  });\n}\n\nexport function queryTranscriptKeyword(keyword) {\n  return Auth.currentCredentials().then(creds => {\n    const lambda = new AWS.Lambda({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n\n    const params = {\n      FunctionName: config.searchFunctionName,\n      InvocationType: 'RequestResponse',\n    };\n\n    const esParams = {\n      index: ELASTIC_SEARCH_INDEX_NAMES.TRANSCRIPT,\n      type: '_doc',\n      body: {\n        size: config.maxRecords,\n        query: {\n          match: {\n            Transcript: {\n              query: keyword,\n              operator: 'and',\n            },\n          },\n        },\n      },\n      output: [],\n    };\n\n    params['Payload'] = Buffer.from(JSON.stringify(esParams));\n    return lambda\n      .invoke(params)\n      .promise()\n      .then((data) => {\n        const body = JSON.parse(data.Payload).body;\n        if (body === undefined || body === []) {\n          return [];\n        }\n        return JSON.parse(data.Payload).body.Records;\n      });\n  });\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport AWS from 'aws-sdk';\nimport { Auth } from 'aws-amplify';\n\nimport awsExports from '../aws-exports';\n\nconst defaultRegion = awsExports.aws_project_region;\nAWS.config.update({ region: defaultRegion });\n\nexport function getAWSAccountId() {\n  return Auth.currentCredentials().then(creds => {\n    const sts = new AWS.STS({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(creds),\n    });\n    return sts.getCallerIdentity({}).promise();\n  });\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport AWS from 'aws-sdk';\nimport { Auth } from 'aws-amplify';\n\nimport awsExports from '../aws-exports';\n\nconst defaultRegion = awsExports.aws_project_region;\nAWS.config.update({ region: defaultRegion });\n\nfunction showKeyphrases(error, segment, index, keyphraseResponse) {\n  if (error) {\n    console.error(error);\n  } else {\n    if (Array.isArray(keyphraseResponse.KeyPhrases)) {\n      keyphraseResponse.KeyPhrases.forEach(keyPhrase => {\n        if (keyPhrase.Score > 0.75) {\n          const row = document.getElementById('ttlist').tBodies[0].rows[index];\n          if (row) {\n            row.cells[4].innerHTML = row.cells[4].innerHTML.replace(\n              keyPhrase.Text,\n              `<span class=\"hl\">${keyPhrase.Text}</span>`\n            );\n          }\n        }\n      });\n    }\n  }\n}\n\nfunction showSentiment(error, segment, index, sentimentResponse) {\n  if (error) {\n    console.error(error);\n  } else {\n    if (sentimentResponse.SentimentScore.Negative > 0.4) {\n      segment.Sentiment = `-  ${sentimentResponse.SentimentScore.Negative.toFixed(2)}`;\n      segment.SentimentClass = 's-minus';\n    } else if (sentimentResponse.SentimentScore.Positive > 0.65) {\n      segment.Sentiment = `+  ${sentimentResponse.SentimentScore.Positive.toFixed(2)}`;\n      segment.SentimentClass = 's-plus';\n    }\n  }\n\n  if (segment.SentimentClass) {\n    const daRow = document.getElementById('ttlist').tBodies[0].rows[index];\n    if (daRow) {\n      daRow.cells[2].className = segment.SentimentClass;\n      daRow.cells[2].innerText = segment.Sentiment;\n    }\n  }\n}\n\nexport function mergeAndComprehendTranscript(segments) {\n  const mergedSegments = mergeTranscript(segments);\n  Auth.currentCredentials().then(credentials => {\n    const Comprehend = new AWS.Comprehend({\n      region: defaultRegion,\n      credentials: Auth.essentialCredentials(credentials),\n    });\n    mergedSegments.forEach((segment, i) => {\n      if (segment.Speaker !== 'spk_0') {\n        const params = {\n          LanguageCode: 'en',\n          Text: segment.Transcript,\n        };\n        Comprehend.detectSentiment(params, (error, sentimentResponse) => {\n          showSentiment(error, segment, i, sentimentResponse);\n        });\n        Comprehend.detectKeyPhrases(params, (error, keyphraseResponse) => {\n          showKeyphrases(error, segment, i, keyphraseResponse);\n        });\n      }\n    });\n  });\n  return mergedSegments;\n}\n\nexport function mergeTranscript(segments) {\n  segments.sort(function(a, b) {\n    if (a.TransactionId < b.TransactionId) {\n      return -1;\n    } else if (a.TransactionId > b.TransactionId) {\n      return 1;\n    } else {\n      return a.LoggedOn - b.LoggedOn;\n    }\n  });\n  const mergedSegments = [];\n  segments.forEach(segment => {\n    if (\n      mergedSegments.length > 0 &&\n      mergedSegments[mergedSegments.length - 1].Speaker === segment.Speaker\n    ) {\n      mergedSegments[mergedSegments.length - 1].Transcript += ` ${segment.Transcript}`;\n    } else {\n      mergedSegments.push({ ...segment });\n    }\n  });\n  mergedSegments.forEach(e => {\n    if (e.Transcript) {\n      if (e.Transcript.search(/\\baccount[a-z]* \\b(num)[a-z]* \\b[a-z]*/i) !== -1) {\n        e.Action = 'ClientSnapshot';\n      }\n      if (e.Transcript.search(/\\bmiss[a-z]* \\b[a-z]*\\b \\b(connect|flight)[a-z]*/i) !== -1) {\n        e.Action = 'ConnectionDoctor';\n      }\n    }\n  });\n  return mergedSegments;\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport React from 'react';\nimport AWS from 'aws-sdk';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\n\nimport { mergeAndComprehendTranscript } from '../utils/transcript';\nimport awsExports from '../aws-exports';\nimport '../styles/AgentAssist.css';\n\nconst defaultRegion = awsExports.aws_project_region;\nAWS.config.update({\n  region: defaultRegion,\n});\n\nconst readTranscript = `\nquery listTranscriptSegments($nextToken: String = \"\") {\n    listTranscriptSegments(nextToken: $nextToken) {\n        items {\n            TransactionId\n                StartTime\n                Speaker\n                EndTime\n                Transcript\n                LoggedOn\n        },\n        nextToken\n    }\n}\n`;\n\nconst anncTranscript = `subscription {\n    onAnnounceCreateTranscriptSegment {\n        TransactionId\n            StartTime\n            Speaker\n            EndTime\n            Transcript\n            LoggedOn\n    }\n}\n`;\n\nclass AgentAssist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      transcript: [],\n    };\n  }\n\n  async componentDidMount() {\n    const transcript = await this.readTranscriptPaginationAndUpdate();\n    this.setState({ transcript: transcript });\n\n    const observable = await API.graphql(graphqlOperation(anncTranscript));\n    const addSegmentToState = segment => {\n      this.setState(state => {\n        const updatedTranscript = state.transcript.slice();\n        updatedTranscript.push(segment);\n        return {\n          transcript: updatedTranscript,\n        };\n      });\n    };\n\n    const updateTranscript = data => {\n      const segment = data.value.data.onAnnounceCreateTranscriptSegment;\n      addSegmentToState(segment);\n      return;\n    };\n\n    observable.subscribe({\n      next: updateTranscript,\n      complete: console.log,\n      error: console.error,\n    });\n  }\n\n  async readTranscriptPaginationAndUpdate() {\n    let transcript = [];\n    const firstPage = await API.graphql(graphqlOperation(readTranscript));\n    let nextToken = firstPage.data.listTranscriptSegments.nextToken;\n\n    transcript = transcript.concat(firstPage.data.listTranscriptSegments.items);\n\n    while (nextToken !== null) {\n      const nextPage = await API.graphql(\n        graphqlOperation(readTranscript, { nextToken: nextToken })\n      );\n      nextToken = nextPage.data.listTranscriptSegments.nextToken;\n      transcript = transcript.concat(nextPage.data.listTranscriptSegments.items);\n    }\n\n    return transcript;\n  }\n\n  shouldMergeTranscript() {\n    return this.props.value === this.props.index;\n  }\n\n  render() {\n    let data = [];\n    if (this.shouldMergeTranscript()) {\n      const latestCall = this.state.transcript.reduce(\n        (acc, curr) => (acc !== null && acc.LoggedOn > curr.LoggedOn ? acc : curr),\n        null\n      );\n      const currentTransactionId = latestCall === null ? null : latestCall.TransactionId;\n      data = [].concat(\n        this.state.transcript.filter(\n          e => e.TransactionId === currentTransactionId && e.EndTime !== null\n        )\n      );\n      data = mergeAndComprehendTranscript(data).map((item, i) => (\n        <tr key={i}>\n          <td>{item.StartTime.toFixed(3)}</td>\n          <td>{item.Speaker && item.Speaker === 'spk_0' ? 'agent' : 'caller'}</td>\n          <td className={item.SentimentClass ? item.SentimentClass : 's-none'}>\n            {item.Sentiment ? item.Sentiment : ''}\n          </td>\n          <td>\n            {item.Action && item.Action === 'ClientSnapshot' ? (\n              <a href=\"#modal2\" className=\"action\">\n                Client Snapshot\n              </a>\n            ) : (\n              ''\n            )}\n          </td>\n          <td className=\"transcript-note\">{item.Transcript}</td>\n        </tr>\n      ));\n    }\n    return (\n      <div className=\"AssistAgent\" hidden={this.props.value !== this.props.index}>\n        <table id=\"ttlist\" className=\"transcript\">\n          <thead className=\"transcript\">\n            <tr>\n              <th>Start</th>\n              <th>Speaker</th>\n              <th style={{ width: '3em' }}>&plusmn;</th>\n              <th>Action</th>\n              <th style={{ width: '60%' }}>\n                Transcript\n                <a\n                  href=\"#a\"\n                  onClick={e => {\n                    this.setState({ transcript: [] });\n                    e.preventDefault();\n                  }}\n                  title=\"Clear transcript\"\n                >\n                  &empty;\n                </a>\n              </th>\n            </tr>\n          </thead>\n          <tbody>{data}</tbody>\n        </table>\n\n        <div id=\"modal1\" className=\"overlay\">\n          <a className=\"cancel\" href=\"#a\" title=\"Close modal\">\n            {' '}\n          </a>\n          <div className=\"modal\">\n            <h1>Connection Doctor</h1>\n            <div className=\"content\">\n              <table>\n                <tbody>\n                  <tr>\n                    <td>PNR: </td>\n                    <td>CJK1Z3</td>\n                  </tr>\n                  <tr>\n                    <td>PAX: </td>\n                    <td>Johnson/Jonas</td>\n                  </tr>\n                  <tr>\n                    <td>Itinerary: </td>\n                    <td>\n                      LGA/MIA NA 1211 1219/1531 (now 1600/1912)\n                      <br />\n                      CONN 134 min (now *MISSED*)\n                      <br />\n                      MIA/SJU NA 2561 1745/2026\n                    </td>\n                  </tr>\n                  <tr>\n                    <td>Remediation</td>\n                    <td>\n                      <span className=\"opt\" onClick={() => console.log('Internal')}>\n                        Internal (0)\n                      </span>\n                      <span className=\"opt\" onClick={() => console.log('Codeshare')}>\n                        Codeshare (2)\n                      </span>\n                      <span className=\"opt\" onClick={() => console.log('Other')}>\n                        Other (10+)\n                      </span>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n\n        <div id=\"modal2\" className=\"overlay\">\n          <a className=\"cancel\" href=\"#a\" title=\"Close modal\">\n            {' '}\n          </a>\n          <div className=\"modal\">\n            <h1>Client Snapshot</h1>\n            <div className=\"content\">\n              <table>\n                <tbody>\n                  <tr>\n                    <td>Account: </td>\n                    <td>PC1234</td>\n                  </tr>\n                  <tr>\n                    <td>User: </td>\n                    <td>joe@joey.com</td>\n                  </tr>\n                  <tr>\n                    <td>Software: </td>\n                    <td>PowerChart 1.35 (upgraded 12-Feb-2020 3:02 PM UTC)</td>\n                  </tr>\n                  <tr>\n                    <td>Remediation</td>\n                    <td>\n                      <span className=\"opt\" onClick={() => console.log('ReleaseNotes')}>\n                        Release notes\n                      </span>\n                      <span className=\"opt\" onClick={() => console.log('Manager')}>\n                        Mgr. Escalation\n                      </span>\n                      <span className=\"opt\" onClick={() => console.log('Credits')}>\n                        Credits\n                      </span>\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withAuthenticator(AgentAssist, false);\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Avatar from '@material-ui/core/Avatar';\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport moment from 'moment/moment';\n\nimport {\n  getSignedUrl,\n  retrieveBucketAndKey,\n  retrieveTranscriptForTransactionId,\n} from '../utils/elasticsearch';\nimport { mergeTranscript } from '../utils/transcript';\nimport { getMergedAudioURL } from '../utils/audio';\nimport '../styles/StreamingRecord.css';\n\nclass StreamingRecord extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metadata: this.props.metadata,\n      transcript: [],\n      requireMerged: false,\n      keyword: this.props.keyword,\n    };\n  }\n\n  updateTranscript() {\n    retrieveTranscriptForTransactionId(this.state.metadata.TransactionId).then(segments => {\n      this.setState({ transcript: mergeTranscript(segments) });\n    });\n  }\n\n  componentDidMount() {\n    this.updateTranscript();\n  }\n\n  onExpand = (event, expanded) => {\n    if (\n      expanded === true &&\n      (this.state.agentLegAudioUrl === undefined || this.state.callerLegAudioUrl === undefined)\n    ) {\n      retrieveBucketAndKey(this.state.metadata.TransactionId).then(pairs => {\n        if (pairs.length === 0) {\n          return;\n        }\n\n        const urlPromise = pairs.map(pair => {\n          if (pair.Bucket === undefined || pair.Key === undefined || pair.Time === undefined) {\n            return undefined;\n          }\n\n          return getSignedUrl(pair.Bucket, pair.Key);\n        });\n\n        Promise.all(urlPromise).then(urls => {\n          this.setState({ callerLegAudioUrl: urls[0], agentLegAudioUrl: urls[1] });\n        });\n\n        if (this.state.mergedAudioUrl === undefined) {\n          const bucket = pairs[0].Bucket,\n            oneAudioObject = pairs[0],\n            otherAudioObject = pairs[1];\n          getMergedAudioURL(\n            bucket,\n            oneAudioObject,\n            otherAudioObject,\n            this.state.metadata.TransactionId\n          ).then(url => {\n            this.setState({ mergedAudioUrl: url });\n          });\n        }\n      });\n    }\n  };\n\n  onSwitchChange = event => {\n    this.setState({ requireMerged: event.target.checked });\n  };\n\n  render() {\n    const getSubContent = () => {\n      if (this.state.transcript === undefined) {\n        return '(waiting for transcript retrivement...)';\n      } else if (this.state.transcript.length === 0) {\n        return 'Cannot translate the streaming audio';\n      } else {\n        return this.state.transcript[0].Transcript + ' (click for more)';\n      }\n    };\n\n    const highlightTranscript = (speaker, lines, keywords) => {\n      const style = {\n        backgroundColor: 'wheat',\n      };\n      return (\n        <Typography>\n          {' '}\n          {speaker === 'spk_0' ? 'Caller: ' : 'Agent: '}\n          {lines.split(' ').map(word => {\n            const match = keywords\n              .split(' ')\n              .map(keyword => {\n                if (keyword === '') {\n                  return false;\n                }\n\n                // keyword only allows number, letter(lowercase and upper).\n                const matchedKeyword = new RegExp(\"[0-9a-zA-Z,?.' ]+\", 'i').exec(keyword)[0];\n\n                // i.e. keyword is apple, 'apple.', 'apple', 'Apple' are allowed.\n                const regex = new RegExp(matchedKeyword + '[,.?]?$', 'i');\n                if (regex.test(word)) {\n                  return true;\n                }\n                return false;\n              })\n              .reduce((e1, e2) => e1 || e2);\n\n            if (match === true) {\n              return <span style={style}>{word} </span>;\n            } else {\n              return word + ' ';\n            }\n          })}\n        </Typography>\n      );\n    };\n\n    const getDetail = () => {\n      if (this.state.transcript === undefined) {\n        return <Typography> (Retrieving transcripts ...) </Typography>;\n      } else if (this.state.transcript.length === 0) {\n        return (\n          <div className=\"transcript\">\n            <Typography>Transcript is not applicable</Typography>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"transcript\">\n            {this.state.transcript.map(tr => {\n              return highlightTranscript(tr.Speaker, tr.Transcript, this.state.keyword);\n            })}\n          </div>\n        );\n      }\n    };\n\n    const getDateAndDuration = () => {\n      const formatDuration = diffSeconds => {\n        const duration = moment.duration(diffSeconds, 'seconds');\n        let formatString = 'H[h] m[m] s[s]';\n        if (duration.asSeconds() < 3600) {\n          formatString = 'm[m] s[s]';\n        }\n        return moment.utc(duration.asMilliseconds()).format(formatString);\n      };\n\n      if (this.state.metadata.EndTimeEpochSeconds === undefined) {\n        return (\n          <div>\n            <Typography className=\"third-heading\">In Call</Typography>\n          </div>\n        );\n      }\n\n      return (\n        <div>\n          <div>\n            <Typography className=\"third-heading\">\n              {moment.unix(this.state.metadata.StartTimeEpochSeconds).fromNow()}\n            </Typography>\n          </div>\n          <div>\n            <Typography className=\"third-heading\">\n              {formatDuration(\n                this.state.metadata.EndTimeEpochSeconds - this.state.metadata.StartTimeEpochSeconds\n              )}\n            </Typography>\n          </div>\n        </div>\n      );\n    };\n\n    const getMergedSwitch = () => {\n      return (\n        <div>\n          <FormControlLabel\n            control={\n              <Switch\n                size=\"small\"\n                checked={this.state.requireMerged}\n                onChange={this.onSwitchChange}\n              />\n            }\n            label=\"Merge audio?\"\n          />\n        </div>\n      );\n    };\n\n    const getAudio = () => {\n      if (!this.state.requireMerged) {\n        return (\n          <div className=\"audio\">\n            <div className=\"caller-leg\">\n              <p>Caller leg</p>\n              {this.state.callerLegAudioUrl !== undefined ? (\n                <audio\n                  controls\n                  volume=\"0.1\"\n                  id=\"audio\"\n                  className=\"stream-audio\"\n                  src={this.state.callerLegAudioUrl}\n                />\n              ) : (\n                <Typography> Caller streaming audio is not applicable</Typography>\n              )}\n            </div>\n            <div className=\"agent-leg\">\n              <p>Agent leg</p>\n              {this.state.agentLegAudioUrl !== undefined ? (\n                <audio\n                  controls\n                  volume=\"0.1\"\n                  id=\"audio\"\n                  className=\"stream-audio\"\n                  src={this.state.agentLegAudioUrl}\n                />\n              ) : (\n                <Typography> Agent streaming audio is not applicable</Typography>\n              )}\n            </div>\n          </div>\n        );\n      } else {\n        return (\n          <div className=\"audio\">\n            <div className=\"merged-audio\">\n              <p>Merged Audio</p>\n              {this.state.mergedAudioUrl !== undefined ? (\n                <audio\n                  controls\n                  volume=\"0.1\"\n                  id=\"audio\"\n                  className=\"stream-audio\"\n                  src={this.state.mergedAudioUrl}\n                />\n              ) : (\n                <Typography> Merged streaming audio is not applicable</Typography>\n              )}\n            </div>\n          </div>\n        );\n      }\n    };\n\n    return (\n      <div className=\"root\">\n        <ExpansionPanel onChange={this.onExpand}>\n          <ExpansionPanelSummary\n            expandIcon={<ExpandMoreIcon />}\n            aria-controls=\"panel1a-content\"\n            id=\"panel1a-header\"\n          >\n            <div className=\"avater-col\">\n              <Avatar>\n                {this.state.metadata.Direction === 'Inbound' ? (\n                  <CallReceivedIcon />\n                ) : (\n                  <CallMadeIcon />\n                )}\n              </Avatar>\n            </div>\n            <div className=\"main-col\">\n              <div className=\"number-header-row\">\n                <Typography className=\"number-header\">\n                  From: {this.state.metadata.SourcePhoneNumber}\n                </Typography>\n              </div>\n              <div className=\"sub-content-row\">\n                <Typography className=\"sub-content\">{getSubContent()}</Typography>\n              </div>\n            </div>\n            <div className=\"right-col\">{getDateAndDuration()}</div>\n          </ExpansionPanelSummary>\n          <ExpansionPanelDetails>\n            <div className=\"panel-detail\">\n              {getDetail()}\n              {getMergedSwitch()}\n              {getAudio()}\n            </div>\n          </ExpansionPanelDetails>\n        </ExpansionPanel>\n      </div>\n    );\n  }\n}\n\nStreamingRecord.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default StreamingRecord;\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport React from 'react';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport TextField from '@material-ui/core/TextField';\n\nimport StreamingRecord from './StreamingRecord';\nimport { queryCall } from '../utils/elasticsearch';\nimport '../styles/HistorySearch.css';\n\nclass HistorySearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      metadata: [],\n      currInput: '',\n    };\n  }\n\n  componentDidMount() {\n    queryCall(this.props.accountId).then(data => {\n      this.setState({ currInput: this.props.accountId, metadata: data });\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const input = this.state.currInput;\n    if (this.state.currInput !== prevState.currInput) {\n      queryCall(this.state.currInput).then(data => {\n        // If current input remains unchanged after callback, then set the state.\n        if (input === this.state.currInput) {\n          this.setState({ metadata: [] });\n          this.setState({ metadata: data });\n        }\n      });\n    }\n  }\n\n  handleSearch = event => {\n    this.setState({ currInput: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"HistorySearch\" hidden={this.props.value !== this.props.index}>\n        <div className=\"search-text-field\">\n          <form noValidate autoComlete=\"off\">\n            <TextField\n              variant=\"outlined\"\n              label=\"Search\"\n              id=\"searchField\"\n              fullWidth\n              onChange={this.handleSearch}\n              helperText=\"Keyword includes metadata(account id, voice connector id, phone number, header, timestamp, etc) or Transcription\"\n            />\n          </form>\n        </div>\n        <div>\n          {this.state.metadata.map((r, i) => {\n            return <StreamingRecord key={i} metadata={r} keyword={this.state.currInput} />;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withAuthenticator(HistorySearch, false);\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport React, { Component } from 'react';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\nimport { getAWSAccountId } from '../utils/sts';\nimport '../styles/App.css';\nimport AgentAssist from '../agentAssist/AgentAssist';\nimport HistorySearch from '../search/HistorySearch';\nimport Amplify from 'aws-amplify';\nimport awsExports from '../aws-exports';\n\nAmplify.configure(awsExports);\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '0',\n      accountId: '',\n    };\n  }\n\n  handleChange = (event, newValue) => {\n    this.setState({ value: newValue });\n  };\n\n  componentDidMount() {\n    document.title = 'Chime Vx - Agent Assist';\n    getAWSAccountId().then(id => {\n      this.setState({ accountId: id.Account });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Agent Assist (Chime Vx)</h1>\n        </header>\n        <br />\n        <Tabs\n          value={this.state.value}\n          onChange={this.handleChange}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          centered\n        >\n          <Tab label=\"ActiveCall\" value=\"0\" />\n          <Tab label=\"Search\" value=\"1\" />\n        </Tabs>\n        <AgentAssist value={this.state.value} index=\"0\" />\n        <HistorySearch accountId={this.state.accountId} value={this.state.value} index=\"1\" />\n      </div>\n    );\n  }\n}\n\nexport default withAuthenticator(App, true);\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: MIT-0\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport App from './apps/App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}